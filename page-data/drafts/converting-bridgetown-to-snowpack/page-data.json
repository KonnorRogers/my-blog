{"componentChunkName":"component---src-templates-blog-post-js","path":"/drafts/converting-bridgetown-to-snowpack/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":null},"pageContext":{"slug":"/drafts/converting-bridgetown-to-snowpack/","previous":{"id":"d7b65bb7-ecdf-540e-b5a3-5396023b5d04","fields":{"slug":"/bridgetownrb/dockerizing-bridgetown/"},"frontmatter":{"title":"Dockerizing Bridgetown"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dockerizing Bridgetown\",\n  \"date\": \"2020-05-23T15:55:36\",\n  \"description\": \"Getting started building with Bridgetown by dockerizing it. I'll walk through a Docker setup for Bridgetown using Alpine Linux.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    align: \"center\"\n  }, \" What is Bridgetownrb? \"), mdx(\"p\", {\n    align: \"center\",\n    style: {\n      \"background\": \"#F0FFF0\",\n      \"borderRadius\": \"16px\",\n      \"padding\": \"1rem\"\n    }\n  }, mdx(\"a\", {\n    href: \"https://bridgetownrb.com\"\n  }, \"Bridgetownrb\"), \"\\xA0is a \\\"Webpack-aware,\", mdx(\"br\", null), \"Ruby-powered static site generator\", mdx(\"br\", null), \"for the modern Jamstack era.\\\"\"), mdx(\"br\", null), mdx(\"p\", null, \"So what does this mean? To me it means it is a\\nstatic site generator that uses Webpack under the hood and can source\\ndata from other places like a CMS or markdown files just like other static site generators such as\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gatsbyjs.org\"\n  }), \"Gatsby\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gridsome.org/\"\n  }), \"Gridsome\")), mdx(\"h2\", {\n    id: \"table-of-contents\"\n  }, mdx(\"a\", {\n    href: \"#table-of-contents\"\n  }, \"Table Of Contents\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#prerequisites\"\n  }), \"Prerequisites\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#create-directory\"\n  }), \"Create a new directory\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#docker-files\"\n  }), \"Docker Files\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-dockerfile\"\n  }), \"Adding a Dockerfile\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-docker-compose\"\n  }), \"Adding a docker-compose.yml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-docker-env\"\n  }), \"Adding a docker.env\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-docker-ignore\"\n  }), \"Adding a .dockerignore\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#dep-files\"\n  }), \"Dependency Files\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-gemfile\"\n  }), \"Adding a Gemfile\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-package-json\"\n  }), \"Adding a package.json\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-lockfiles\"\n  }), \"Adding lockfiles\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#generating-a-project\"\n  }), \"Generating a project\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#prior-to-new\"\n  }), \"File structure prior to generation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#generation-command\"\n  }), \"Running the Generation Command\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#post-new\"\n  }), \"File structure post generation\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#commands\"\n  }), \"Useful Commands\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#starting-the-server\"\n  }), \"Starting the server\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#stopping-the-server\"\n  }), \"Stopping the server\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#other-commands\"\n  }), \"Other commands\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#i-know\"\n  }), \"I know what I\\u2019m doing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#links\"\n  }), \"Links\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#going-forward\"\n  }), \"Going forward\"))), mdx(\"h2\", null, \"Note:\"), mdx(\"p\", null, \"If you would like to skip straight to building without explanations feel\\nfree to go to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#i-know\"\n  }), \"I know what I\\u2019m doing\"), \" section.\"), mdx(\"h2\", {\n    id: \"prerequisites\"\n  }, mdx(\"a\", {\n    href: \"#prerequisites\"\n  }, \"Prerequisites\")), mdx(\"p\", null, \"There are only 2 prerequisites for this project.\"), mdx(\"p\", null, \"Docker & Docker Compose. To check you have them, run the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker -v\\n# Docker version 19.03.6, build 369ce74a3c\\n\\ndocker-compose -v\\n# docker-compose version 1.25.0, build unknown\\n\")), mdx(\"h2\", {\n    id: \"create-directory\"\n  }, mdx(\"a\", {\n    href: \"#create-directory\"\n  }, \"Create a new directory\")), mdx(\"p\", null, \"Now that we\\u2019ve confirmed Docker and Docker Compose are installed, lets\\nsetup the initial structure for Docker to pull down Bridgetownrb so we\\ndo not have to install it locally.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir -p bridgetown-project\\ncd bridgetown-project\\n\")), mdx(\"h2\", {\n    id: \"docker-files\"\n  }, mdx(\"a\", {\n    href: \"#docker-files\"\n  }, \"Docker Files\")), mdx(\"h3\", {\n    id: \"adding-dockerfile\"\n  }, mdx(\"a\", {\n    href: \"#adding-dockerfile\"\n  }, \"Adding a Dockerfile\")), mdx(\"p\", null, \"I\\u2019m not goin to go too in depth into this Dockerfile, but the point of\\nit is to be able to run a Docker container as a non-root user and still\\ndo everything you need to do. We\\u2019ll be using Alpine Linux to keep the\\nimage small.\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" and add the following contents into it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\",\n    \"metastring\": \"title=Dockerfile\",\n    \"title\": \"Dockerfile\"\n  }), \"FROM ruby:2.6-alpine3.11 as builder\\n\\nRUN apk add --no-cache --virtual \\\\\\\\\\n    #\\n    # required\\n    nodejs-dev yarn bash \\\\\\\\\\n    tzdata build-base libffi-dev \\\\\\\\\\n    #\\n    # nice to haves\\n    curl git \\\\\\\\\\n    #\\n    # Fixes watch file isses with things like HMR\\n    libnotify-dev\\n\\nFROM builder as bridgetownrb-app\\n\\n# This is to fix an issue on Linux with permissions issues\\nARG USER_ID=${USER_ID:-1000}\\nARG GROUP_ID=${GROUP_ID:-1000}\\nARG DOCKER_USER=${DOCKER_USER:-user}\\nARG APP_DIR=${APP_DIR:-/home/user/bridgetown-app}\\n\\n# Create a non-root user\\nRUN addgroup -g $GROUP_ID -S $GROUP_ID\\nRUN adduser --disabled-password -G $GROUP_ID --uid $USER_ID -S $DOCKER_USER\\n\\n# Create and then own the directory to fix permissions issues\\nRUN mkdir -p $APP_DIR\\nRUN chown -R $USER_ID:$GROUP_ID $APP_DIR\\n\\n# Define the user running the container\\nUSER $USER_ID:$GROUP_ID\\n\\n# . now == $APP_DIR\\nWORKDIR $APP_DIR\\n\\n# COPY is run as a root user, not as the USER defined above, so we must chown it\\nCOPY --chown=$USER_ID:$GROUP_ID Gemfile* $APP_DIR/\\nRUN gem install bundler\\nRUN bundle install\\n\\n# For webpacker / node_modules\\nCOPY --chown=$USER_ID:$GROUP_ID package.json $APP_DIR\\nCOPY --chown=$USER_ID:$GROUP_ID yarn.lock $APP_DIR\\n\\nRUN yarn install\\n\\nCMD [\\\"yarn\\\", \\\"start\\\"]\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/blob/prior-bridgetown-new/Dockerfile\"\n  }), \"Reference File on\\nGithub\")), mdx(\"h3\", {\n    id: \"adding-docker-compose\"\n  }, mdx(\"a\", {\n    href: \"#adding-docker-compose\"\n  }, \"Adding a docker-compose.yml\")), mdx(\"p\", null, \"Now that we have a Dockerfile as our base, lets make it easy to call the\\nDockerfile without having to specify a bunch of build arguments.\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" and add the following content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# docker-compose.yml\\n\\nversion: '3'\\n\\nservices:\\n  web:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile\\n      args:\\n        USER_ID: ${USER_ID:-1000}\\n        GROUP_ID: ${GROUP_ID:-1000}\\n        DOCKER_USER: ${DOCKER_USER:-user}\\n        APP_DIR: ${APP_DIR:-/home/user/bridgetown-app}\\n\\n    command: bash -c \\\"yarn start --host '0.0.0.0'\\\"\\n\\n    ports:\\n      - '4000:4000'\\n      # Not totally necessary to open 4001, but it is used, so lets make it discoverable\\n      - '4001:4001'\\n      - '4002:4002'\\n\\n    volumes:\\n      - .:${APP_DIR:-/home/user/bridgetown-app}\\n      # this seperates node_modules from the host\\n      - node_modules:${APP_DIR:-/home/user/bridgetown-app}/node_modules\\n\\nvolumes:\\n  node_modules:\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/blob/master/docker-compose.yml\"\n  }), \"Reference File on\\nGithub\")), mdx(\"h3\", {\n    id: \"adding-docker-env\"\n  }, mdx(\"a\", {\n    href: \"#adding-docker-env\"\n  }, \"Adding docker.env\")), mdx(\"p\", null, \"You\\u2019ll notice above that theres a bunch of ENV variables being used to\\nsubstitute values. Now there\\u2019s a few ways to provide the ENV variables\\nto Docker. I\\u2019ve found the easiest way to pass ENV variables is by\\nsourcing a file with ENV variables.\"), mdx(\"p\", null, \"To show you what this looks like lets create a \\u2018docker.env\\u2019 file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=docker.env\",\n    \"title\": \"docker.env\"\n  }), \"\\n# Assign and export seperately to avoid masking return values.\\nUSER_ID=$(id -u \\\"$USER\\\")\\nGROUP_ID=$(id -g \\\"$USER\\\")\\nexport USER_ID\\nexport GROUP_ID\\n\\nexport DOCKER_USER=\\\"user\\\"\\nexport APP_DIR=\\\"/home/$DOCKER_USER/bridgetown\\\"\\n\")), mdx(\"p\", null, \"Now in order to pull these values into your shell environment run the\\nfollowing command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env\\n\")), mdx(\"p\", null, \"This will now pull in your ENV variables for docker to use.\"), mdx(\"h4\", null, \"Note:\"), mdx(\"p\", null, \"This is really only necessary for Linux users. Mac and Windows users\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"should\"), \" be fine to run without this script. It has not been tested\\nhowever.\"), mdx(\"h3\", {\n    id: \"adding-docker-ignore\"\n  }, mdx(\"a\", {\n    href: \"#adding-docker-ignore\"\n  }, \"Adding .dockerignore\")), mdx(\"p\", null, \"The final piece to this Docker puzzle is to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".dockerignore\"), \". I stole the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" provided by Bridgetownrb for this. It looks as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=.dockerignore\",\n    \"title\": \".dockerignore\"\n  }), \"\\n# Bridgetown\\noutput\\n.bridgetown-cache\\n.bridgetown-metadata\\n.bridgetown-webpack\\n\\n# Dependency folders\\nnode_modules\\nbower_components\\nvendor\\n\\n# Caches\\n.sass-cache\\n.npm\\n.node_repl_history\\n\\n# Ignore bundler config.\\n/.bundle\\n\\n# Ignore Byebug command history file.\\n.byebug_history\\n\\n# dotenv environment variables file\\n.env\\n\\n# Mac files\\n.DS_Store\\n\\n# Yarn\\nyarn-error.log\\nyarn-debug.log*\\n.pnp/\\n.pnp.js\\n# Yarn Integrity file\\n.yarn-integrity\\n\\n.git\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/blob/prior-bridgetown-new/.dockerignore\"\n  }), \"Reference File on\\nGithub\")), mdx(\"h2\", {\n    id: \"dep-files\"\n  }, mdx(\"a\", {\n    href: \"#dep-files\"\n  }, \"Dependency Files\")), mdx(\"h3\", {\n    id: \"adding-gemfile\"\n  }, mdx(\"a\", {\n    href: \"#adding-gemfile\"\n  }, \"Adding a Gemfile\")), mdx(\"p\", null, \"Alright, with the Docker setup above, we can now specify our\\ndependency files.\"), mdx(\"p\", null, \"The first step is to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gemfile\"), \". Create a Gemfile as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=Gemfile\",\n    \"title\": \"Gemfile\"\n  }), \"\\n\\nsource \\\"https://rubygems.org\\\"\\ngem \\\"bridgetown\\\", \\\"~> 0.15.0\\\"\\n\")), mdx(\"p\", null, \"This will tell \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundler\"), \" to install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bridgetown\"), \" from Rubygems.org\"), mdx(\"h3\", {\n    id: \"adding-package-json\"\n  }, mdx(\"a\", {\n    href: \"#adding-package-json\"\n  }, \"Adding a package.json\")), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" structured similarly to the one below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"title=package.json\",\n    \"title\": \"package.json\"\n  }), \"{\\n  \\\"name\\\": \\\"bridgetown-site\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"private\\\": true\\n}\\n\")), mdx(\"h3\", {\n    id: \"adding-lockfiles\"\n  }, mdx(\"a\", {\n    href: \"#adding-lockfiles\"\n  }, \"Adding lockfiles\")), mdx(\"p\", null, \"Almost done with the setup I promise!\"), mdx(\"p\", null, \"Finally, lets create 2 empty lockfiles.\"), mdx(\"p\", null, \"The 2 lockfiles are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn.lock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gemfile.lock\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch yarn.lock Gemfile.lock\\n\")), mdx(\"h2\", {\n    id: \"generating-a-project\"\n  }, mdx(\"a\", {\n    href: \"#generating-a-project\"\n  }, \"Generating a project\")), mdx(\"h3\", {\n    id: \"prior-to-new\"\n  }, mdx(\"a\", {\n    href: \"#prior-to-new\"\n  }, \"File structure prior to generation\")), mdx(\"p\", null, \"Your file structure should look as follows if you followed the above\\nsteps.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"tree -L 1 -a .\\n\\n.\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 docker.env\\n\\u251C\\u2500\\u2500 Dockerfile\\n\\u251C\\u2500\\u2500 .dockerignore\\n\\u251C\\u2500\\u2500 Gemfile\\n\\u251C\\u2500\\u2500 Gemfile.lock\\n\\u251C\\u2500\\u2500 package.json\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/tree/prior-bridgetown-new\"\n  }), \"Reference Branch on\\nGithub\")), mdx(\"h3\", {\n    id: \"generation-command\"\n  }, mdx(\"a\", {\n    href: \"#generation-command\"\n  }, \"Running the Generation Command\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose run --rm bridgetown new . --force\\n\")), mdx(\"p\", null, \"This will generate a new project for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bridgetown\")), mdx(\"h3\", {\n    id: \"post-new\"\n  }, mdx(\"a\", {\n    href: \"#post-new\"\n  }, \"File Structure After Generation\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"tree -L 1 -a .\\n\\n.\\n\\u251C\\u2500\\u2500 bridgetown.config.yml\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 docker.env\\n\\u251C\\u2500\\u2500 Dockerfile\\n\\u251C\\u2500\\u2500 .dockerignore\\n\\u251C\\u2500\\u2500 frontend\\n\\u251C\\u2500\\u2500 Gemfile\\n\\u251C\\u2500\\u2500 Gemfile.lock\\n\\u251C\\u2500\\u2500 .git\\n\\u251C\\u2500\\u2500 .gitignore\\n\\u251C\\u2500\\u2500 package.json\\n\\u251C\\u2500\\u2500 plugins\\n\\u251C\\u2500\\u2500 README.md\\n\\u251C\\u2500\\u2500 src\\n\\u251C\\u2500\\u2500 start.js\\n\\u251C\\u2500\\u2500 sync.js\\n\\u251C\\u2500\\u2500 webpack.config.js\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/tree/post-bridgetown-new\"\n  }), \"Reference Branch on\\nGithub\")), mdx(\"p\", null, \"Now, to start your server you can simply run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose up --build\\n\")), mdx(\"p\", null, \"This will allow you to view Bridgetown welcome screen on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:4000\")), mdx(\"h2\", {\n    id: \"commands\"\n  }, mdx(\"a\", {\n    href: \"#commands\"\n  }, \"Useful Commands\")), mdx(\"h3\", {\n    id: \"starting-the-server\"\n  }, mdx(\"a\", {\n    href: \"#starting-the-server\"\n  }, \"Starting the server\")), mdx(\"p\", null, \"If it\\u2019s your first time since generating the project, run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose up --build\\n\")), mdx(\"p\", null, \"If you have already built the container, you can simply do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose up\\n\")), mdx(\"h3\", {\n    id: \"stopping-the-server\"\n  }, mdx(\"a\", {\n    href: \"#stopping-the-server\"\n  }, \"Stopping the server\")), mdx(\"p\", null, \"In another terminal to stop the server you can simply run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose down --remove-orphans\\n\")), mdx(\"h3\", {\n    id: \"other-commands\"\n  }, mdx(\"a\", {\n    href: \"#other-commands\"\n  }, \"Other commands\")), mdx(\"p\", null, \"Sourcing ENV variables\"), mdx(\"br\", null), \"This is only technically required once in a running terminal.\", mdx(\"br\", null), \"`source ./docker.env`\", mdx(\"p\", null, \"Run a command in an already running container:\"), mdx(\"br\", null), \"`docker-compose exec web [command]`\", mdx(\"p\", null, \"Run a one-off command:\"), mdx(\"br\", null), \"`docker-compose run --rm web [command]`\", mdx(\"p\", null, \"Upgrading \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web yarn upgrade\\ndocker-compose down --remove-orphans\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"Adding an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" package:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web yarn add [package]\\ndocker-compose down --remove-orphans\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"Adding a gem\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web bundle add [gem]\\ndocker-compose down --remove-orphans\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"The below is a TLDR / reference version of the above.\\nTo skip to the links sections click the link below.\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#links\"\n  }), \"Links section\")), mdx(\"h2\", {\n    id: \"i-know\"\n  }, mdx(\"a\", {\n    href: \"#i-know\"\n  }, \"I know what I'm doing\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir -p bridgetown-project && cd bridgetown-project\\ntouch Gemfile Gemfile.lock package.json yarn.lock \\\\\\\\\\n      .dockerignore docker-compose.yml Dockerfile docker.env\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\",\n    \"metastring\": \"title=Dockerfile\",\n    \"title\": \"Dockerfile\"\n  }), \"\\nFROM ruby:2.6-alpine3.11 as builder\\n\\nRUN apk add --no-cache --virtual \\\\\\\\\\n    #\\n    # required\\n    nodejs-dev yarn bash \\\\\\\\\\n    tzdata build-base libffi-dev \\\\\\\\\\n    #\\n    # nice to haves\\n    curl git \\\\\\\\\\n    #\\n    # Fixes watch file isses with things like HMR\\n    libnotify-dev\\n\\nFROM builder as bridgetownrb-app\\n\\n# This is to fix an issue on Linux with permissions issues\\nARG USER_ID=${USER_ID:-1000}\\nARG GROUP_ID=${GROUP_ID:-1000}\\nARG DOCKER_USER=${DOCKER_USER:-user}\\nARG APP_DIR=${APP_DIR:-/home/user/bridgetown-app}\\n\\n# Create a non-root user\\nRUN addgroup -g $GROUP_ID -S $GROUP_ID\\nRUN adduser --disabled-password -G $GROUP_ID --uid $USER_ID -S $DOCKER_USER\\n\\n# Create and then own the directory to fix permissions issues\\nRUN mkdir -p $APP_DIR\\nRUN chown -R $USER_ID:$GROUP_ID $APP_DIR\\n\\n# Define the user running the container\\nUSER $USER_ID:$GROUP_ID\\n\\n# . now == $APP_DIR\\nWORKDIR $APP_DIR\\n\\n# COPY is run as a root user, not as the USER defined above, so we must chown it\\nCOPY --chown=$USER_ID:$GROUP_ID Gemfile* $APP_DIR/\\nRUN gem install bundler\\nRUN bundle install\\n\\n# For webpacker / node_modules\\nCOPY --chown=$USER_ID:$GROUP_ID package.json $APP_DIR\\nCOPY --chown=$USER_ID:$GROUP_ID yarn.lock $APP_DIR\\n\\nRUN yarn install\\n\\nCMD [\\\"yarn\\\", \\\"start\\\"]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"title=docker-compose.yml\",\n    \"title\": \"docker-compose.yml\"\n  }), \"version: '3'\\n\\nservices:\\n  web:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile\\n      args:\\n        USER_ID: ${USER_ID:-1000}\\n        GROUP_ID: ${GROUP_ID:-1000}\\n        DOCKER_USER: ${DOCKER_USER:-user}\\n        APP_DIR: ${APP_DIR:-/home/user/bridgetown-app}\\n\\n    command: bash -c \\\"yarn start --host '0.0.0.0'\\\"\\n\\n    ports:\\n      - '4000:4000'\\n      # Not totally necessary to open 4001, but it is used, so lets make it discoverable\\n      - '4001:4001'\\n      - '4002:4002'\\n\\n    volumes:\\n      - .:${APP_DIR:-/home/user/bridgetown-app}\\n      # this seperates node_modules from the host\\n      - node_modules:${APP_DIR:-/home/user/bridgetown-app}/node_modules\\n\\nvolumes:\\n  node_modules:\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=docker.env\",\n    \"title\": \"docker.env\"\n  }), \"\\n\\n# Assign and export seperately to avoid masking return values.\\nUSER_ID=$(id -u \\\"$USER\\\")\\nGROUP_ID=$(id -g \\\"$USER\\\")\\nexport USER_ID\\nexport GROUP_ID\\n\\nexport DOCKER_USER=\\\"user\\\"\\nexport APP_DIR=\\\"/home/$DOCKER_USER/bridgetown\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=.dockerignore\",\n    \"title\": \".dockerignore\"\n  }), \"\\n\\n# Bridgetown\\noutput\\n.bridgetown-cache\\n.bridgetown-metadata\\n.bridgetown-webpack\\n\\n# Dependency folders\\nnode_modules\\nbower_components\\nvendor\\n\\n# Caches\\n.sass-cache\\n.npm\\n.node_repl_history\\n\\n# Ignore bundler config.\\n/.bundle\\n\\n# Ignore Byebug command history file.\\n.byebug_history\\n\\n# dotenv environment variables file\\n.env\\n\\n# Mac files\\n.DS_Store\\n\\n# Yarn\\nyarn-error.log\\nyarn-debug.log*\\n.pnp/\\n.pnp.js\\n# Yarn Integrity file\\n.yarn-integrity\\n\\n.git\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=Gemfile\",\n    \"title\": \"Gemfile\"\n  }), \"# Gemfile\\n\\nsource \\\"https://rubygems.org\\\"\\ngem \\\"bridgetown\\\", \\\"~> 0.15.0\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"title=package.json\",\n    \"title\": \"package.json\"\n  }), \"{\\n  \\\"name\\\": \\\"bridgetown-site\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"private\\\": true\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env\\ndocker-compose run --rm web bridgetown new . --force\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"Navigate to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:4000\"), \" and bam! up and running!\"), mdx(\"h2\", {\n    id: \"links\"\n  }, mdx(\"a\", {\n    href: \"#links\"\n  }, \"Links\")), mdx(\"h3\", null, \"Bridgetown\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.bridgetownrb.com/\"\n  }), \"Bridgetownrb\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.bridgetownrb.com/docs/\"\n  }), \"Bridgetown Getting Started\")), mdx(\"h3\", null, \"Github\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown\"\n  }), \"Github Reference\\nRepo\")), mdx(\"h2\", {\n    id: \"going-forward\"\n  }, mdx(\"a\", {\n    href: \"#going-forward\"\n  }, \"Going Forward\")), mdx(\"p\", null, \"This blog post was merely a setup blog post. My next blog post will\\ndetail creating a portfolio with TailwindCSS & Bridgetownrb.\"), mdx(\"p\", null, \"This is a reference post to point people back to.\\nSo stay tuned for the next part of building with bridgetown.\"), mdx(\"p\", null, \"And if you dont feel like waiting, go check out their documentation.\"), mdx(\"br\", null), \"[Bridgetown Documentation](https://www.bridgetownrb.com/docs/)\", mdx(\"p\", null, \"Good luck building with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bridgetownrb.com\"\n  }), \"Bridgetown\"), \" and I hope this was useful!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"ef2608af-af49-5933-af0f-a4da250a962b","fields":{"slug":"/ruby/dynamic_getters_and_setters/"},"frontmatter":{"title":"Dynamic Getters and Setters on an Object"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Getters and Setters on an Object\",\n  \"date\": \"2020-08-10T15:35:09\",\n  \"description\": \"A guide to defining dynamic getters and setters on a Ruby Object\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    id: \"problem\"\n  }, mdx(\"a\", {\n    href: \"#problem\"\n  }, \"The Problem\")), mdx(\"p\", null, \"So I\\u2019m currently making a Rubygem called\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/paramagicdev/snowpacker\"\n  }), \"Snowpacker\"), \" and I ran into\\nan interesting problem.\"), mdx(\"p\", null, \"In Snowpacker, I allow users to define various attributes within a Rails app initializer like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=rails_app/config/initializers/snowpacker.rb\",\n    \"title\": \"rails_app/config/initializers/snowpacker.rb\"\n  }), \"Snowpacker.configure do |snowpacker|\\n  snowpacker.config_dir = Rails.root.join(\\\"config\\\", \\\"snowpacker\\\")\\n  # ... more options\\nend\\n\")), mdx(\"p\", null, \"The code to set this up is fairly straight forward. In my gem I have the\\nfollowing 2 files:\"), mdx(\"p\", null, \"First, we have to make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \" object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=lib/snowpacker/configuration.rb\",\n    \"title\": \"lib/snowpacker/configuration.rb\"\n  }), \"module Snowpacker\\n  class Configuration\\n    attr_accessor :config_dir\\n    attr_accessor :config_file\\n    attr_accessor :babel_config_file\\n\\n    # ... more accessors\\n\\n  end\\nend\\n\")), mdx(\"p\", null, \"Then, we need to make the configuration available project wide. To do\\nso, we have to create a class method to define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \" instance\\nand then we create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \" to be able to set & get the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \" values. In a nutshell we want to be able to do the\\nfollowing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"Snowpacker.configure do |snowpacker|\\n  snowpacker.config.attr = \\\"value\\\"\\nend\\n\")), mdx(\"p\", null, \"As well as be able to do this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"Snowpacker.config.attr = \\\"other value\\\"\\n\")), mdx(\"p\", null, \"To do so, we have to do the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=lib/snowpacker.rb\",\n    \"title\": \"lib/snowpacker.rb\"\n  }), \"# ... other require statements\\nrequire \\\"snowpacker/configuration\\\"\\n\\nmodule Snowpacker\\n  # Everything below this is the same as def self.method; stuff; end\\n  class << self\\n    attr_accessor :config\\n\\n    def configure\\n      self.config ||= Configuration.new\\n      yield(config) if block_given?\\n    end\\n  end\\nend\\n\")), mdx(\"p\", null, \"So now everything works as expected. There\\u2019s just one problem. What if a\\nuser wants to define another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \"? I can\\u2019t possibly account\\nfor this. So, lets look at how to define a dynamic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \".\"), mdx(\"h2\", {\n    id: \"attr_accessor\"\n  }, mdx(\"a\", {\n    href: \"#attr_accessor\"\n  }, \"What does attr_accessor actually do?\")), mdx(\"p\", null, \"Well first, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \" combines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_writer\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_reader\"), \".\"), mdx(\"p\", null, \"Totally not helpful right? Well lets break it down further.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_writer :name\"), \" is the equivalent of:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"def name\\n  @name\\nend\\n\")), mdx(\"p\", null, \"And \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_reader :name\"), \" is the equivalent of:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"def name=(value)\\n  @name = value\\nend\\n\")), mdx(\"p\", null, \"So \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \" neatly provides the 2 above methods for us.\"), mdx(\"p\", null, \"The only issue is, you can\\u2019t technically dynamically define an\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \", instead, you have to manually define both methods listed\\nabove to achieve the same functionality.\"), mdx(\"h2\", {\n    id: \"why-care\"\n  }, mdx(\"a\", {\n    href: \"#why-care\"\n  }, \"Why should I care?\")), mdx(\"p\", null, \"But Konnor, why does that matter? Well the reason it matters is that in\\nmy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snowpack.config.js\"), \" I read the value of Environment variables to\\nmake certain things behave in certain ways. The way these values are\\nset are via instance variables that are read from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \" object. Basically, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Snowpacker\"), \" will take all\\nthe instance_variables of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \" object and prepend\\n\\u201CSNOWPACKER\", \"_\", \"\\u201D to them.\"), mdx(\"p\", null, \"For example, if you\\u2019re given the following code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=rails_app/config/initializers/snowpacker.rb\",\n    \"title\": \"rails_app/config/initializers/snowpacker.rb\"\n  }), \"Snowpacker.configure do |snowpacker|\\n  snowpacker.config_dir = Rails.root.join(\\\"config\\\", \\\"snowpacker\\\")\\n  snowpacker.babel_config_file = File.join(snowpacker.config_dir,\\n  \\\"babel.config.js\\\")\\n  # ... more options\\nend\\n\")), mdx(\"p\", null, \"What Snowpacker will do at runtime is create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SNOWPACKER_CONFIG_DIR\"), \"\\nenvironment variable as well as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SNOWPACKER_BABEL_CONFIG_FILE\"), \". Both\\nvalues can now be accessed via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ENV[\\\"SNOWPACKER_CONFIG_DIR\\\"]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ENV[\\\"SNOWPACKER_BABEL_CONFIG_FILE\\\"]\"), \" respectively.\"), mdx(\"h2\", {\n    id: \"okay-cool\"\n  }, mdx(\"a\", {\n    href: \"#okay-cool\"\n  }, \"Okay, fine, its important, so whats the next step?\")), mdx(\"p\", null, \"Initially I had a very ugly non-idiomatic workaround. Then it dawned on\\nme to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"method_missing\"), \" approach.\"), mdx(\"p\", null, \"In a nutshell, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"method_missing\"), \" is a method defined on every\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object\"), \" that checks to see if a method exists. If it does not exist, it\\nprints a stacktrace and raises a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NoMethodError\"), \". So what we\\u2019re doing is\\noverriding the existing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"method_missing\"), \" on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \" Object\\nto be able to dynamically define methods. Rails makes heavy use of this\\npattern.\"), mdx(\"p\", null, \"Here\\u2019s how I setup dynamic attribute getting and setting in Snowpacker.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=lib/snowpacker/configuration.rb\",\n    \"title\": \"lib/snowpacker/configuration.rb\"\n  }), \"module Snowpacker\\n  class Configuration\\n    attr_accessor :config_dir\\n    # ... Other base accessors\\n`\\n    def method_missing(method_name, *args, &block)\\n      # Check if the method missing is an \\\"attr=\\\" method\\n      raise unless method_name.to_s.end_with(\\\"=\\\")\\n\\n      setter = method_name\\n      getter = symbol.to_s.slice(0...-1).to_sym\\n      instance_var = \\\"@#{getter}\\\".to_sym\\n\\n      define_singleton_method(setter) do |new_val|\\n        instance_variable_set(instance_var, new_val)\\n      end\\n\\n      define_singleton_method(getter) { instance_variable_get(instance_var) }\\n\\n      # Ignores all arguments but the first one\\n      value = args[0]\\n\\n      # Actually sets the value on the instance variable\\n      send(setter, value)\\n    rescue\\n      # Raise error as normal, nothing to see here\\n      super(symbol, *args, &block)\\n    end\\n  end\\nend\\n\")), mdx(\"p\", null, \"So now with the above we could add an attr onto our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \"\\nobject without worry about adding an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \".\"), mdx(\"h2\", {\n    id: \"dont-get-it\"\n  }, mdx(\"a\", {\n    href: \"#dont-get-it\"\n  }, \"Yea...I dont get it, whats happening?\")), mdx(\"p\", null, \"If you\\u2019re sitting there scratching your head, I don\\u2019t blame you.\\nThis may seem like a lot but lets break it down line by line.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"def method_missing(symbol, *args, &block)\")), mdx(\"p\", null, \"All this means is that we\\u2019re overriding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"method_missing\"), \" for all\\nConfiguration Objects.\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"raise unless symbol.to_s.end_with(\\\"=\\\")\")), mdx(\"p\", null, \"If the method name does not end with an equal sign, raise an error.\\nIn other words, we want to raise an error if the method we\\u2019re trying to\\ncall is not a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setter\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr=\"), \"). That\\u2019s it, pretty cool right!\"), mdx(\"p\", null, \"Heres an example of what we want:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"Snowpacker.config.test # will raise an error\\n\\nSnowpacker.config.test = \\\"value\\\" # will not raise an error.\\nSnowpacker.config.test # now returns \\\"value\\\"\\n\")), mdx(\"p\", null, \"So now that we know we\\u2019re only dealing with methods that look like\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"random_attribute=\"), \" we can start making more assumptions.\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setter = symbol\"), \" we\\u2019re just renaming the argument to make our intent more clear.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getter = symbol.to_s.slice(0...-1).to_sym\"), \" Because the setter method\\ncontains an equal sign, the getter cannot contain the equal sign. So to\\nfix this we turn it to a string, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"slice\"), \" off the equal sign at the end,\\nthen convert it back to a symbol so we can use it as a method.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"instance_var = \\\"@#{getter}\\\".to_sym\"), \" When we create add an instance\\nvariable it must be in the form:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":@example_instance_variable\"), \" so all we\\u2019re doing here is prepending a \\u201D@\\u201D to tell Ruby that its an instance variable.\"), mdx(\"p\", null, \"Alright now we\\u2019re getting to do the actual work:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"define_singleton_method(setter) do |new_val|\\n  instance_variable_set(instance_var, new_val)\\nend\\n\")), mdx(\"p\", null, \"This is our setter method. What we\\u2019re saying is \\u201Ccreate a method in the\\nform \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variable_name=(value)\"), \". In other words, we\\u2019re recreating\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_writer\"), \" here. This allows us to write new values to the instance\\nvariable.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"define_singleton_method(getter) { instance_variable_get(instance_var) }\")), mdx(\"p\", null, \"So if the previous method was the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_writer\"), \", this is the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_reader\"), \". So now we technically have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attr_accessor\"), \"\\nfunctionality we were looking for, theres one issue though. When a user\\ngoes to set the value for the first time, it wont actually set. To fix\\nthis we implement the below code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"value = args[0]\\nsend(setter, value)\\n\")), mdx(\"p\", null, \"This sets our instance variable to the value we passed in.\"), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"Snowpacker.config.test_attr = \\\"attr_value\\\"\\n# \\\"test_attr\\\" is the setter\\n# \\\"attr_value\\\" is the value\\n\")), mdx(\"p\", null, \"Alright so thats all the logic. But what does that last little bit do?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"rescue\\n  super(method_name, *args, &block)\\nend\\n\")), mdx(\"p\", null, \"All this does, is if any error occurs, send it up the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"method_missing\"), \"\\ncall chain and raise a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NoMethodError\"), \".\"), mdx(\"p\", null, \"That\\u2019s it. Wield this new found power wisely!\"), mdx(\"h2\", {\n    id: \"links\"\n  }, mdx(\"a\", {\n    href: \"#links\"\n  }, \"Links\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/snowpacker\"\n  }), \"Snowpacker\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/snowpacker/blob/master/lib/snowpacker/configuration.rb\"\n  }), \"Snowpacker Configuration\\nFile\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://ruby-doc.org/core-2.7.0/BasicObject.html#method-i-method_missing\"\n  }), \"Method Missing\\nDocumentation\")), mdx(\"h2\", null, \"Extra cleanup\"), mdx(\"p\", null, \"If you use a linter, it will probably tell you to define a\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"respond_to_missing?\"), \" method. It\\u2019s really not needed here since we\\u2019re\\ndirectly defining methods, but if you want to make your linter happy,\\nhere ya go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"def respond_to_missing?(method_name, include_private = false)\\n  method_name.to_s.end_with?(\\\"=\\\") || super\\nend\\n\")), mdx(\"p\", null, \"We\\u2019re just telling Ruby, any method that ends with an equal sign is\\nactually a method for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Configuration\"), \" Object.\"), mdx(\"p\", null, \"Heres the Thoughtbot post on it:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://thoughtbot.com/blog/always-define-respond-to-missing-when-overriding\"\n  }), \"https://thoughtbot.com/blog/always-define-respond-to-missing-when-overriding\")), mdx(\"p\", null, \"Happy Rubying, or whatever the kids say these days!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}