{"componentChunkName":"component---src-templates-blog-post-js","path":"/making-ems-helper/introduction/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"markdownRemark":{"id":"39ac433c-f0ca-53f6-97aa-84b336eff962","excerpt":"Tech Stack Ruby on Rails v6.0.1 Ruby 2.6.3 Explanation I am most familiar with Ruby on Rails and therefore felt I would be most\nproductive using Ruby on Rails…","html":"<h2>Tech Stack</h2>\n<ul>\n<li>Ruby on Rails v6.0.1</li>\n<li>Ruby 2.6.3</li>\n</ul>\n<h3>Explanation</h3>\n<p>I am most familiar with Ruby on Rails and therefore felt I would be most\nproductive using Ruby on Rails for this project</p>\n<h2>Deployment</h2>\n<p>I still have not decided between a self host option like Linode / DigitalOcean\nor letting Heroku handle it for me. As this is a small personal project, and I would\nlike to get a feel for DevOps I will most likely be self hosting using DigitalOcean / Linode\ncombined with Docker containers.</p>\n<h2>Scope</h2>\n<p>I plan for this to be very limited scope. Very simply, I plan to have a database\nof every hospital. Each hospital will have an address and series of boolean\nvalues as to its capabilities. The biggest challenge will be\naggregating the appropriate data.</p>\n<h2>Data aggregation</h2>\n<p>Data aggregation seems to be the biggest challenge, thankfully someone has already\nsomewhat solved this problem.<br>\n<a href=\"https://hifld-geoplatform.opendata.arcgis.com/datasets/hospitals\">https://hifld-geoplatform.opendata.arcgis.com/datasets/hospitals</a>\nThe Homeland Infrastructure Foundation has aggregated all hospitals in the 50 states\nvia each individual state department. They even have an easy to use API as well\nas the added bonus of Trauma levels.</p>\n<p>Unfortunately, they do not have things such as Stroke Centers, Cath labs, and various\npoint of entry capabilites. I will most likely be creating a scraper using Nokogiri to get this information from\neach individual states respective website.</p>\n<p>In addition, I plan to have a form for users to submit for review the addition of a new\nhospital. I will most likely have to add a sign in system at some point\nshould this project gain any traction.</p>\n<h2>Geocoding</h2>\n<p>What is geocoding? Geocoding and geolocation a way of quantifying a longitude\nand latitude location for any given location.<br>\nGeocoding and geolocation will be the basis of using a user’s current location and searching the radius\nfor the closest appropriate facility. This is a big part of this project<br></p>\n<p>Again, this is another solved problem. Initially I had thought Google Maps was the only option,\non further review there is a lovely RubyGem called <a href=\"https://github.com/alexreisner/geocoder\">Geocoder</a>\nwhich aggregates multiple APIs. I have not dug into what service it would call out to\nas currently this is a tightly scoped project with no plans of hitting API request limits.</p>\n<h2>Database backups</h2>\n<p>I have not settled on any particular service for database backups yet.\nIt is a consideration I have and it is worth noting. The database plans to be fairly\nstatic, however, it’s always good to be prepared.</p>\n<p>As of now, the easiest option seems to set up a cron job to backup the database using\n<code class=\"language-text\">pg_dump</code> and then sending that file to a remote server maybe like an AWS S3 bucket?</p>\n<p>Alternatively, I found this github repo <a href=\"https://github.com/fastmonkeys/stellar\">https://github.com/fastmonkeys/stellar</a>\nwhich appears to be a faster alternative to <code class=\"language-text\">pg_dump</code> and <code class=\"language-text\">pg_restore</code>. I still have not\nsettled on a good option but as this fleshes out it will become important</p>\n<h2>Error Tracking</h2>\n<p>Sentry. Need I say more? Sentry is great its raved about, I may even integrate\nwith LogRocket. Again, future problem, not needed right away.</p>\n<h2>CI / CD Pipeline</h2>\n<p>Yes, its a small project, but following best practices is not a bad thing.\nCurrently, I plan on using github actions as my CI / CD. Setting up Jenkins / Travis / CircleCI\nseems like more headache than using an integrated option.</p>\n<h2>Using docker-compose</h2>\n<p>As part of any good CI / CD pipeline, ideally I should be using Docker / containerization.\nI have setup my docker-compose and Dockerfile in my repo to be used to provide a reproducible\nenvironment. Unfortunately, I feel docker local development needs a little work,\nbut it definitely has its place in a CI / CD pipeline for sure as well as providing\na starting point for new users.</p>\n<h2>Donations!</h2>\n<p>Its important to make sure that this can at least be self sustainable. I plan to\ncreate a donations page which integrates with Stripe / Paypal to allow people to keep\nthe lights on!</p>\n<h2>Closing thoughts</h2>\n<p>EMS Helper plans to be a free service which will take donations in order to keep the service running. I currently do not have plans to make it a paid service. In addition, you can follow along with my progress on the <a href=\"https://github.com/ParamagicDev/ems_helper/tree/development\">development branch on Github.</a></p>","frontmatter":{"title":"Making EMS Helper - Introduction","date":"December 05, 2019","description":"This is the beginning of EMS Helper. A service meant to provide people with the ability to quickly locate the closest appropriate hospital."}}},"pageContext":{"slug":"/making-ems-helper/introduction/","previous":{"fields":{"slug":"/misc/postgresql-password-reset/"},"frontmatter":{"title":"PostgresQL - Setting up postgres on a local environment"}},"next":{"fields":{"slug":"/making-ems-helper/setting-up/"},"frontmatter":{"title":"Making EMS Helper - Setting up"}}}}}