{"componentChunkName":"component---src-templates-blog-post-js","path":"/bridgetownrb/building-with-bridgetown/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"b1bbf065-9d07-5c7f-bb4b-b9b4adbe514c","excerpt":"This will be the actual building portion of creating a site with\n Bridgetown To go back and see how the project is setup, check out  Dockerizing\nBridgetownâ€¦","frontmatter":{"title":"Building with Bridgetown - Portfolio","date":"May 24, 2020"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Building with Bridgetown - Portfolio\",\n  \"date\": \"2020-05-24T09:54:47\",\n  \"description\": \"In this post, I will be detailing how I built my portfolio site with Bridgetown along with TailwindCSS.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    id: \"foreword\"\n  }, mdx(\"a\", {\n    href: \"#foreword\"\n  }, \"Prerequisites\")), mdx(\"p\", null, \"This will be the actual building portion of creating a site with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bridgetownrb.com\"\n  }), \"Bridgetown\")), mdx(\"p\", null, \"To go back and see how the project is setup, check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"bridgetownrb/dockerizing-bridgetown/\"\n  }), \"Dockerizing\\nBridgetown\")), mdx(\"p\", null, \"Alternatively, to follow along you could simply do the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone https://github.com/ParamagicDev/getting-started-with-bridgetown\\n\\ncd getting-started-with-bridgetown\\nrm -rf .git\\ngit init\\nsource ./docker.env && docker-compose up --build\\n\")), mdx(\"p\", null, \"And now you\\u2019re completely caught up! Lets get building!\"), mdx(\"h2\", {\n    id: \"site-data\"\n  }, mdx(\"a\", {\n    href: \"#site-data\"\n  }, \"Setting Site Data\")), mdx(\"p\", null, \"The first thing we want to do is setup some static data for us to pull\\nin.\"), mdx(\"p\", null, \"For example, we want our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"first_name\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"last_name\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"github_profile\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"linkedin_profile\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"portfolio_site\"), \" and whatever else\\nyou can think of to be easily pulled down and easily changed should\\nsomething change in the future.\"), mdx(\"p\", null, \"So where do we go to set site data?\"), mdx(\"p\", null, \"According to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.bridgetownrb.com/docs/datafiles\"\n  }), \"Bridgetown\\nDocs\"), \" you set up your\\nstatic data inside of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./_data/\"), \" directory. You can use one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"YAML\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CSV\"), \" files. I prefer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"YAML\"), \" myself.\"), mdx(\"p\", null, \"So lets add the data. Navigate to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_data/site_metadata.yml\"), \" file.\\nFor me, I filled in the following information:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"title=_data/site_metadata.yml\",\n    \"title\": \"_data/site_metadata.yml\"\n  }), \"title: Konnor's Portfolio\\nemail: konnor7414@gmail.com\\ndescription: >- # this means to ignore newlines\\n  This is Konnor's portfolio site. It contains info about who he is, what\\n  projects he is working on / has worked on, as well as contact information.\\n\\nfirst_name: Konnor\\nlast_name: Rogers\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"@todo\"\n  }), \"Reference File on Github\")), mdx(\"p\", null, \"Now, lets create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_data/projects.yml\"), \" file. Here, we can do things\\nlike add links, descriptions, etc for each project that we plan on\\nputting in. Heres what my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_data/projects.yml\"), \" file looks like.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"title=_data/projects.yml\",\n    \"title\": \"_data/projects.yml\"\n  }), \"ma_protocol_rewrite:\\n  source_code: https://github.com/ParamagicDev/ma-protocol-rewrite/tree/master\\n  deployed_app: https://inspiring-varahamihira-efb922.netlify.app/\\n  description: ->\\n    A rewrite of EMS protocols for the state of Massachusetts. The app\\n    is written in React / Gatsby and attempts to created a more\\n    navigable and searchable interface for reading the protocols. This is the\\n    current project im working on.\\n# Below projects omitted for brevity\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"@todo\"\n  }), \"Reference File on Github\")), mdx(\"p\", null, \"Finally, lets add some links for people to find us:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"title=_data/links.yml\",\n    \"title\": \"_data/links.yml\"\n  }), \"blog: https://paramagicdev.github.io/my-blog\\nlinkedin: https://www.linkedin.com/in/konnor-rogers-78b120175/\\ngithub: https://github.com/ParamagicDev\\n\")), mdx(\"p\", null, \"So now, in various pages we can access our data via a simple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\"\n  }), \"# Example Page\\n\\n{{ site.links.github }}\\nhttps://github.com/ParamagicDev\\n\\n{{ site.projects.ma_protocol_rewrite[:source_code] }}\\nhttps://github.com/ParamagicDev/ma-protocol-rewrite/tree/master\\n\\n{{ site.site_metadata.first_name }}\\nKonnor\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/bridgetownrb/building-with-bridgetown/","previous":{"id":"d7b65bb7-ecdf-540e-b5a3-5396023b5d04","fields":{"slug":"/bridgetownrb/dockerizing-bridgetown/"},"frontmatter":{"title":"Dockerizing Bridgetown"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dockerizing Bridgetown\",\n  \"date\": \"2020-05-23T15:55:36\",\n  \"description\": \"Getting started building with Bridgetown by dockerizing it. I'll walk through a Docker setup for Bridgetown using Alpine Linux.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    align: \"center\"\n  }, \" What is Bridgetownrb? \"), mdx(\"p\", {\n    align: \"center\",\n    style: {\n      \"background\": \"#F0FFF0\",\n      \"borderRadius\": \"16px\",\n      \"padding\": \"1rem\"\n    }\n  }, mdx(\"a\", {\n    href: \"https://bridgetownrb.com\"\n  }, \"Bridgetownrb\"), \"\\xA0is a \\\"Webpack-aware,\", mdx(\"br\", null), \"Ruby-powered static site generator\", mdx(\"br\", null), \"for the modern Jamstack era.\\\"\"), mdx(\"br\", null), mdx(\"p\", null, \"So what does this mean? To me it means it is a\\nstatic site generator that uses Webpack under the hood and can source\\ndata from other places like a CMS or markdown files just like other static site generators such as\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gatsbyjs.org\"\n  }), \"Gatsby\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gridsome.org/\"\n  }), \"Gridsome\")), mdx(\"h2\", {\n    id: \"table-of-contents\"\n  }, mdx(\"a\", {\n    href: \"#table-of-contents\"\n  }, \"Table Of Contents\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#prerequisites\"\n  }), \"Prerequisites\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#create-directory\"\n  }), \"Create a new directory\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#docker-files\"\n  }), \"Docker Files\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-dockerfile\"\n  }), \"Adding a Dockerfile\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-docker-compose\"\n  }), \"Adding a docker-compose.yml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-docker-env\"\n  }), \"Adding a docker.env\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-docker-ignore\"\n  }), \"Adding a .dockerignore\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#dep-files\"\n  }), \"Dependency Files\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-gemfile\"\n  }), \"Adding a Gemfile\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-package-json\"\n  }), \"Adding a package.json\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-lockfiles\"\n  }), \"Adding lockfiles\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#generating-a-project\"\n  }), \"Generating a project\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#prior-to-new\"\n  }), \"File structure prior to generation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#generation-command\"\n  }), \"Running the Generation Command\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#post-new\"\n  }), \"File structure post generation\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#commands\"\n  }), \"Useful Commands\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#starting-the-server\"\n  }), \"Starting the server\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#stopping-the-server\"\n  }), \"Stopping the server\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#other-commands\"\n  }), \"Other commands\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#i-know\"\n  }), \"I know what I\\u2019m doing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#links\"\n  }), \"Links\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#going-forward\"\n  }), \"Going forward\"))), mdx(\"h2\", null, \"Note:\"), mdx(\"p\", null, \"If you would like to skip straight to building without explanations feel\\nfree to go to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#i-know\"\n  }), \"I know what I\\u2019m doing\"), \" section.\"), mdx(\"h2\", {\n    id: \"prerequisites\"\n  }, mdx(\"a\", {\n    href: \"#prerequisites\"\n  }, \"Prerequisites\")), mdx(\"p\", null, \"There are only 2 prerequisites for this project.\"), mdx(\"p\", null, \"Docker & Docker Compose. To check you have them, run the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker -v\\n# Docker version 19.03.6, build 369ce74a3c\\n\\ndocker-compose -v\\n# docker-compose version 1.25.0, build unknown\\n\")), mdx(\"h2\", {\n    id: \"create-directory\"\n  }, mdx(\"a\", {\n    href: \"#create-directory\"\n  }, \"Create a new directory\")), mdx(\"p\", null, \"Now that we\\u2019ve confirmed Docker and Docker Compose are installed, lets\\nsetup the initial structure for Docker to pull down Bridgetownrb so we\\ndo not have to install it locally.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir -p bridgetown-project\\ncd bridgetown-project\\n\")), mdx(\"h2\", {\n    id: \"docker-files\"\n  }, mdx(\"a\", {\n    href: \"#docker-files\"\n  }, \"Docker Files\")), mdx(\"h3\", {\n    id: \"adding-dockerfile\"\n  }, mdx(\"a\", {\n    href: \"#adding-dockerfile\"\n  }, \"Adding a Dockerfile\")), mdx(\"p\", null, \"I\\u2019m not goin to go too in depth into this Dockerfile, but the point of\\nit is to be able to run a Docker container as a non-root user and still\\ndo everything you need to do. We\\u2019ll be using Alpine Linux to keep the\\nimage small.\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" and add the following contents into it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\",\n    \"metastring\": \"title=Dockerfile\",\n    \"title\": \"Dockerfile\"\n  }), \"FROM ruby:2.6-alpine3.11 as builder\\n\\nRUN apk add --no-cache --virtual \\\\\\\\\\n    #\\n    # required\\n    nodejs-dev yarn bash \\\\\\\\\\n    tzdata build-base libffi-dev \\\\\\\\\\n    #\\n    # nice to haves\\n    curl git \\\\\\\\\\n    #\\n    # Fixes watch file isses with things like HMR\\n    libnotify-dev\\n\\nFROM builder as bridgetownrb-app\\n\\n# This is to fix an issue on Linux with permissions issues\\nARG USER_ID=${USER_ID:-1000}\\nARG GROUP_ID=${GROUP_ID:-1000}\\nARG DOCKER_USER=${DOCKER_USER:-user}\\nARG APP_DIR=${APP_DIR:-/home/user/bridgetown-app}\\n\\n# Create a non-root user\\nRUN addgroup -g $GROUP_ID -S $GROUP_ID\\nRUN adduser --disabled-password -G $GROUP_ID --uid $USER_ID -S $DOCKER_USER\\n\\n# Create and then own the directory to fix permissions issues\\nRUN mkdir -p $APP_DIR\\nRUN chown -R $USER_ID:$GROUP_ID $APP_DIR\\n\\n# Define the user running the container\\nUSER $USER_ID:$GROUP_ID\\n\\n# . now == $APP_DIR\\nWORKDIR $APP_DIR\\n\\n# COPY is run as a root user, not as the USER defined above, so we must chown it\\nCOPY --chown=$USER_ID:$GROUP_ID Gemfile* $APP_DIR/\\nRUN gem install bundler\\nRUN bundle install\\n\\n# For webpacker / node_modules\\nCOPY --chown=$USER_ID:$GROUP_ID package.json $APP_DIR\\nCOPY --chown=$USER_ID:$GROUP_ID yarn.lock $APP_DIR\\n\\nRUN yarn install\\n\\nCMD [\\\"yarn\\\", \\\"start\\\"]\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/blob/prior-bridgetown-new/Dockerfile\"\n  }), \"Reference File on\\nGithub\")), mdx(\"h3\", {\n    id: \"adding-docker-compose\"\n  }, mdx(\"a\", {\n    href: \"#adding-docker-compose\"\n  }, \"Adding a docker-compose.yml\")), mdx(\"p\", null, \"Now that we have a Dockerfile as our base, lets make it easy to call the\\nDockerfile without having to specify a bunch of build arguments.\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" and add the following content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# docker-compose.yml\\n\\nversion: '3'\\n\\nservices:\\n  web:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile\\n      args:\\n        USER_ID: ${USER_ID:-1000}\\n        GROUP_ID: ${GROUP_ID:-1000}\\n        DOCKER_USER: ${DOCKER_USER:-user}\\n        APP_DIR: ${APP_DIR:-/home/user/bridgetown-app}\\n\\n    command: bash -c \\\"yarn start --host '0.0.0.0'\\\"\\n\\n    ports:\\n      - '4000:4000'\\n      # Not totally necessary to open 4001, but it is used, so lets make it discoverable\\n      - '4001:4001'\\n      - '4002:4002'\\n\\n    volumes:\\n      - .:${APP_DIR:-/home/user/bridgetown-app}\\n      # this seperates node_modules from the host\\n      - node_modules:${APP_DIR:-/home/user/bridgetown-app}/node_modules\\n\\nvolumes:\\n  node_modules:\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/blob/master/docker-compose.yml\"\n  }), \"Reference File on\\nGithub\")), mdx(\"h3\", {\n    id: \"adding-docker-env\"\n  }, mdx(\"a\", {\n    href: \"#adding-docker-env\"\n  }, \"Adding docker.env\")), mdx(\"p\", null, \"You\\u2019ll notice above that theres a bunch of ENV variables being used to\\nsubstitute values. Now there\\u2019s a few ways to provide the ENV variables\\nto Docker. I\\u2019ve found the easiest way to pass ENV variables is by\\nsourcing a file with ENV variables.\"), mdx(\"p\", null, \"To show you what this looks like lets create a \\u2018docker.env\\u2019 file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=docker.env\",\n    \"title\": \"docker.env\"\n  }), \"\\n# Assign and export seperately to avoid masking return values.\\nUSER_ID=$(id -u \\\"$USER\\\")\\nGROUP_ID=$(id -g \\\"$USER\\\")\\nexport USER_ID\\nexport GROUP_ID\\n\\nexport DOCKER_USER=\\\"user\\\"\\nexport APP_DIR=\\\"/home/$DOCKER_USER/bridgetown\\\"\\n\")), mdx(\"p\", null, \"Now in order to pull these values into your shell environment run the\\nfollowing command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env\\n\")), mdx(\"p\", null, \"This will now pull in your ENV variables for docker to use.\"), mdx(\"h4\", null, \"Note:\"), mdx(\"p\", null, \"This is really only necessary for Linux users. Mac and Windows users\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"should\"), \" be fine to run without this script. It has not been tested\\nhowever.\"), mdx(\"h3\", {\n    id: \"adding-docker-ignore\"\n  }, mdx(\"a\", {\n    href: \"#adding-docker-ignore\"\n  }, \"Adding .dockerignore\")), mdx(\"p\", null, \"The final piece to this Docker puzzle is to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".dockerignore\"), \". I stole the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" provided by Bridgetownrb for this. It looks as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=.dockerignore\",\n    \"title\": \".dockerignore\"\n  }), \"\\n# Bridgetown\\noutput\\n.bridgetown-cache\\n.bridgetown-metadata\\n.bridgetown-webpack\\n\\n# Dependency folders\\nnode_modules\\nbower_components\\nvendor\\n\\n# Caches\\n.sass-cache\\n.npm\\n.node_repl_history\\n\\n# Ignore bundler config.\\n/.bundle\\n\\n# Ignore Byebug command history file.\\n.byebug_history\\n\\n# dotenv environment variables file\\n.env\\n\\n# Mac files\\n.DS_Store\\n\\n# Yarn\\nyarn-error.log\\nyarn-debug.log*\\n.pnp/\\n.pnp.js\\n# Yarn Integrity file\\n.yarn-integrity\\n\\n.git\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/blob/prior-bridgetown-new/.dockerignore\"\n  }), \"Reference File on\\nGithub\")), mdx(\"h2\", {\n    id: \"dep-files\"\n  }, mdx(\"a\", {\n    href: \"#dep-files\"\n  }, \"Dependency Files\")), mdx(\"h3\", {\n    id: \"adding-gemfile\"\n  }, mdx(\"a\", {\n    href: \"#adding-gemfile\"\n  }, \"Adding a Gemfile\")), mdx(\"p\", null, \"Alright, with the Docker setup above, we can now specify our\\ndependency files.\"), mdx(\"p\", null, \"The first step is to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gemfile\"), \". Create a Gemfile as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=Gemfile\",\n    \"title\": \"Gemfile\"\n  }), \"\\n\\nsource \\\"https://rubygems.org\\\"\\ngem \\\"bridgetown\\\", \\\"~> 0.14.0\\\"\\n\")), mdx(\"p\", null, \"This will tell \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundler\"), \" to install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bridgetown\"), \" from Rubygems.org\"), mdx(\"h3\", {\n    id: \"adding-package-json\"\n  }, mdx(\"a\", {\n    href: \"#adding-package-json\"\n  }, \"Adding a package.json\")), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" structured similarly to the one below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"title=package.json\",\n    \"title\": \"package.json\"\n  }), \"{\\n  \\\"name\\\": \\\"bridgetown-site\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"private\\\": true\\n}\\n\")), mdx(\"h3\", {\n    id: \"adding-lockfiles\"\n  }, mdx(\"a\", {\n    href: \"#adding-lockfiles\"\n  }, \"Adding lockfiles\")), mdx(\"p\", null, \"Almost done with the setup I promise!\"), mdx(\"p\", null, \"Finally, lets create 2 empty lockfiles.\"), mdx(\"p\", null, \"The 2 lockfiles are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn.lock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gemfile.lock\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch yarn.lock Gemfile.lock\\n\")), mdx(\"h2\", {\n    id: \"generating-a-project\"\n  }, mdx(\"a\", {\n    href: \"#generating-a-project\"\n  }, \"Generating a project\")), mdx(\"h3\", {\n    id: \"prior-to-new\"\n  }, mdx(\"a\", {\n    href: \"#prior-to-new\"\n  }, \"File structure prior to generation\")), mdx(\"p\", null, \"Your file structure should look as follows if you followed the above\\nsteps.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"tree -L 1 -a .\\n\\n.\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 docker.env\\n\\u251C\\u2500\\u2500 Dockerfile\\n\\u251C\\u2500\\u2500 .dockerignore\\n\\u251C\\u2500\\u2500 Gemfile\\n\\u251C\\u2500\\u2500 Gemfile.lock\\n\\u251C\\u2500\\u2500 package.json\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/tree/prior-bridgetown-new\"\n  }), \"Reference Branch on\\nGithub\")), mdx(\"h3\", {\n    id: \"generation-command\"\n  }, mdx(\"a\", {\n    href: \"#generation-command\"\n  }, \"Running the Generation Command\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose run --rm bridgetown new . --force\\n\")), mdx(\"p\", null, \"This will generate a new project for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bridgetown\")), mdx(\"h3\", {\n    id: \"post-new\"\n  }, mdx(\"a\", {\n    href: \"#post-new\"\n  }, \"File Structure After Generation\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"tree -L 1 -a .\\n\\n.\\n\\u251C\\u2500\\u2500 bridgetown.config.yml\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 docker.env\\n\\u251C\\u2500\\u2500 Dockerfile\\n\\u251C\\u2500\\u2500 .dockerignore\\n\\u251C\\u2500\\u2500 frontend\\n\\u251C\\u2500\\u2500 Gemfile\\n\\u251C\\u2500\\u2500 Gemfile.lock\\n\\u251C\\u2500\\u2500 .git\\n\\u251C\\u2500\\u2500 .gitignore\\n\\u251C\\u2500\\u2500 package.json\\n\\u251C\\u2500\\u2500 plugins\\n\\u251C\\u2500\\u2500 README.md\\n\\u251C\\u2500\\u2500 src\\n\\u251C\\u2500\\u2500 start.js\\n\\u251C\\u2500\\u2500 sync.js\\n\\u251C\\u2500\\u2500 webpack.config.js\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown/tree/post-bridgetown-new\"\n  }), \"Reference Branch on\\nGithub\")), mdx(\"p\", null, \"Now, to start your server you can simply run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose up --build\\n\")), mdx(\"p\", null, \"This will allow you to view Bridgetown welcome screen on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:4000\")), mdx(\"h2\", {\n    id: \"commands\"\n  }, mdx(\"a\", {\n    href: \"#commands\"\n  }, \"Useful Commands\")), mdx(\"h3\", {\n    id: \"starting-the-server\"\n  }, mdx(\"a\", {\n    href: \"#starting-the-server\"\n  }, \"Starting the server\")), mdx(\"p\", null, \"If it\\u2019s your first time since generating the project, run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose up --build\\n\")), mdx(\"p\", null, \"If you have already built the container, you can simply do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env && docker-compose up\\n\")), mdx(\"h3\", {\n    id: \"stopping-the-server\"\n  }, mdx(\"a\", {\n    href: \"#stopping-the-server\"\n  }, \"Stopping the server\")), mdx(\"p\", null, \"In another terminal to stop the server you can simply run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose down --remove-orphans\\n\")), mdx(\"h3\", {\n    id: \"other-commands\"\n  }, mdx(\"a\", {\n    href: \"#other-commands\"\n  }, \"Other commands\")), mdx(\"p\", null, \"Sourcing ENV variables\"), mdx(\"br\", null), \"This is only technically required once in a running terminal.\", mdx(\"br\", null), \"`source ./docker.env`\", mdx(\"p\", null, \"Run a command in an already running container:\"), mdx(\"br\", null), \"`docker-compose exec web [command]`\", mdx(\"p\", null, \"Run a one-off command:\"), mdx(\"br\", null), \"`docker-compose run --rm web [command]`\", mdx(\"p\", null, \"Upgrading \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web yarn upgrade\\ndocker-compose down --remove-orphans\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"Adding an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" package:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web yarn add [package]\\ndocker-compose down --remove-orphans\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"Adding a gem\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web bundle add [gem]\\ndocker-compose down --remove-orphans\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"The below is a TLDR / reference version of the above.\\nTo skip to the links sections click the link below.\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#links\"\n  }), \"Links section\")), mdx(\"h2\", {\n    id: \"i-know\"\n  }, mdx(\"a\", {\n    href: \"#i-know\"\n  }, \"I know what I'm doing\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir -p bridgetown-project && cd bridgetown-project\\ntouch Gemfile Gemfile.lock package.json yarn.lock \\\\\\\\\\n      .dockerignore docker-compose.yml Dockerfile docker.env\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\",\n    \"metastring\": \"title=Dockerfile\",\n    \"title\": \"Dockerfile\"\n  }), \"\\nFROM ruby:2.6-alpine3.11 as builder\\n\\nRUN apk add --no-cache --virtual \\\\\\\\\\n    #\\n    # required\\n    nodejs-dev yarn bash \\\\\\\\\\n    tzdata build-base libffi-dev \\\\\\\\\\n    #\\n    # nice to haves\\n    curl git \\\\\\\\\\n    #\\n    # Fixes watch file isses with things like HMR\\n    libnotify-dev\\n\\nFROM builder as bridgetownrb-app\\n\\n# This is to fix an issue on Linux with permissions issues\\nARG USER_ID=${USER_ID:-1000}\\nARG GROUP_ID=${GROUP_ID:-1000}\\nARG DOCKER_USER=${DOCKER_USER:-user}\\nARG APP_DIR=${APP_DIR:-/home/user/bridgetown-app}\\n\\n# Create a non-root user\\nRUN addgroup -g $GROUP_ID -S $GROUP_ID\\nRUN adduser --disabled-password -G $GROUP_ID --uid $USER_ID -S $DOCKER_USER\\n\\n# Create and then own the directory to fix permissions issues\\nRUN mkdir -p $APP_DIR\\nRUN chown -R $USER_ID:$GROUP_ID $APP_DIR\\n\\n# Define the user running the container\\nUSER $USER_ID:$GROUP_ID\\n\\n# . now == $APP_DIR\\nWORKDIR $APP_DIR\\n\\n# COPY is run as a root user, not as the USER defined above, so we must chown it\\nCOPY --chown=$USER_ID:$GROUP_ID Gemfile* $APP_DIR/\\nRUN gem install bundler\\nRUN bundle install\\n\\n# For webpacker / node_modules\\nCOPY --chown=$USER_ID:$GROUP_ID package.json $APP_DIR\\nCOPY --chown=$USER_ID:$GROUP_ID yarn.lock $APP_DIR\\n\\nRUN yarn install\\n\\nCMD [\\\"yarn\\\", \\\"start\\\"]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"title=docker-compose.yml\",\n    \"title\": \"docker-compose.yml\"\n  }), \"version: '3'\\n\\nservices:\\n  web:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile\\n      args:\\n        USER_ID: ${USER_ID:-1000}\\n        GROUP_ID: ${GROUP_ID:-1000}\\n        DOCKER_USER: ${DOCKER_USER:-user}\\n        APP_DIR: ${APP_DIR:-/home/user/bridgetown-app}\\n\\n    command: bash -c \\\"yarn start --host '0.0.0.0'\\\"\\n\\n    ports:\\n      - '4000:4000'\\n      # Not totally necessary to open 4001, but it is used, so lets make it discoverable\\n      - '4001:4001'\\n      - '4002:4002'\\n\\n    volumes:\\n      - .:${APP_DIR:-/home/user/bridgetown-app}\\n      # this seperates node_modules from the host\\n      - node_modules:${APP_DIR:-/home/user/bridgetown-app}/node_modules\\n\\nvolumes:\\n  node_modules:\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=docker.env\",\n    \"title\": \"docker.env\"\n  }), \"\\n\\n# Assign and export seperately to avoid masking return values.\\nUSER_ID=$(id -u \\\"$USER\\\")\\nGROUP_ID=$(id -g \\\"$USER\\\")\\nexport USER_ID\\nexport GROUP_ID\\n\\nexport DOCKER_USER=\\\"user\\\"\\nexport APP_DIR=\\\"/home/$DOCKER_USER/bridgetown\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=.dockerignore\",\n    \"title\": \".dockerignore\"\n  }), \"\\n\\n# Bridgetown\\noutput\\n.bridgetown-cache\\n.bridgetown-metadata\\n.bridgetown-webpack\\n\\n# Dependency folders\\nnode_modules\\nbower_components\\nvendor\\n\\n# Caches\\n.sass-cache\\n.npm\\n.node_repl_history\\n\\n# Ignore bundler config.\\n/.bundle\\n\\n# Ignore Byebug command history file.\\n.byebug_history\\n\\n# dotenv environment variables file\\n.env\\n\\n# Mac files\\n.DS_Store\\n\\n# Yarn\\nyarn-error.log\\nyarn-debug.log*\\n.pnp/\\n.pnp.js\\n# Yarn Integrity file\\n.yarn-integrity\\n\\n.git\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"title=Gemfile\",\n    \"title\": \"Gemfile\"\n  }), \"# Gemfile\\n\\nsource \\\"https://rubygems.org\\\"\\ngem \\\"bridgetown\\\", \\\"~> 0.14.0\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"title=package.json\",\n    \"title\": \"package.json\"\n  }), \"{\\n  \\\"name\\\": \\\"bridgetown-site\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"private\\\": true\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"source ./docker.env\\ndocker-compose run --rm web bridgetown new . --force\\ndocker-compose up --build\\n\")), mdx(\"p\", null, \"Navigate to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:4000\"), \" and bam! up and running!\"), mdx(\"h2\", {\n    id: \"links\"\n  }, mdx(\"a\", {\n    href: \"#links\"\n  }, \"Links\")), mdx(\"h3\", null, \"Bridgetown\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.bridgetownrb.com/\"\n  }), \"Bridgetownrb\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.bridgetownrb.com/docs/\"\n  }), \"Bridgetown Getting Started\")), mdx(\"h3\", null, \"Github\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/getting-started-with-bridgetown\"\n  }), \"Github Reference\\nRepo\")), mdx(\"h2\", {\n    id: \"going-forward\"\n  }, mdx(\"a\", {\n    href: \"#going-forward\"\n  }, \"Going Forward\")), mdx(\"p\", null, \"This blog post was merely a setup blog post. My next blog post will\\ndetail creating a portfolio with TailwindCSS & Bridgetownrb.\"), mdx(\"p\", null, \"This is a reference post to point people back to.\\nSo stay tuned for the next part of building with bridgetown.\"), mdx(\"p\", null, \"And if you dont feel like waiting, go check out their documentation.\"), mdx(\"br\", null), \"[Bridgetown Documentation](https://www.bridgetownrb.com/docs/)\", mdx(\"p\", null, \"Good luck building with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bridgetownrb.com\"\n  }), \"Bridgetown\"), \" and I hope this was useful!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":null}}}