{"componentChunkName":"component---src-templates-blog-post-js","path":"/misc/postgresql-password-reset/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PostgresQL - Setting up postgres on a local environment\",\n  \"date\": \"2019-11-24T20:59:03\",\n  \"description\": \"I will detail a short and easy way to get PostgresQL running on a Ubuntu based machine for local development.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Purpose\"), mdx(\"p\", null, \"Setting up a database for the first time is never any fun. In this short post I will detail how I have come to setup PostgresQL for local development environments.\"), mdx(\"h3\", null, \"Quick Start\"), mdx(\"h4\", null, \"WARNING:\"), mdx(\"p\", null, \"This will change all instances of /etc/postgresql/\", \"*\", \"/main/pg_hba.conf auth options to \\u2018trust\\u2019 \", mdx(\"br\", null)), mdx(\"p\", null, \"Proceed with caution:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"git\"), \" clone https://github.com/ParamagicDev/config-files.git ~/paramagic-config-files\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"cd\"), \" ~/paramagic-config-files\\n./scripts/postgres-setup.sh\\n./scripts/postgres-pass-reset.sh\\n\\npsql -U postgres\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# This will drop you into a postgres instance as the admin\"), \"\\n$ alter user postgres with password \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'YOUR SNAZZY PASSWORD'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n$ \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"\\\\\"), \"q\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# This will make postgres require a password in order\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# to be instantiated\"), \"\\n./scripts/postgres-md5-require.sh\"))), mdx(\"h3\", null, \"Explanation\"), mdx(\"p\", null, \"Okay, I\\u2019m assuming you read the quick start, saw the warnings, and decided\\nto read a little more about whats happening in these scripts.\"), mdx(\"h4\", null, \"Installation scripts\"), mdx(\"h5\", null, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/tree/master/scripts\"\n  }), \"My PostgresQL scripts\")), mdx(\"p\", null, \"The contents of these scripts was partially stolen from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/docker-library/postgres/blob/4a82eb932030788572b637c8e138abb94401640c/12/Dockerfile\"\n  }), \"Official PostgresQL Dockerfile\")), mdx(\"p\", null, \"So what does this script do?\"), mdx(\"p\", null, \"Well first let me show you the contents.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"#!/bin/bash\\n\\n# postgres-setup.sh\\npg_user=\\\"postgres\\\"\\npg_dir=\\\"/var/lib/postgresql\\\"\\npg_data=\\\"/var/lib/postgresql/data\\\"\\n\\n# Installs postgresql\\nsudo apt update && sudo apt install \\\\\\n  postgresql postgresql-contrib postgresql-common libpq-dev -y\\n\\n# Creates the postgres user and postgres group\\nsudo groupadd \\\"$pg_user\\\"\\nsudo useradd -r -g \\\"$pg_user\\\" --home-dir=\\\"$pg_dir\\\" --shell=/bin/bash \\\"$pg_user\\\"\\n\\nsudo mkdir -p \\\"$pg_dir\\\"\\nsudo chown -R \\\"$pg_user\\\":\\\"$pg_user\\\" \\\"$pg_dir\\\"\\n\\nsudo mkdir -p \\\"$pg_dir\\\" && sudo chown -R \\\"$pg_user\\\":\\\"$pg_user\\\" \\\"$pg_dir\\\" && \\\\\\n  sudo chmod 2777 /var/run/postgresql\\n\\n\\n# this 777 will be replaced by 700 at runtime (allows semi-arbitrary \\\"--user\\\" values)\\nsudo mkdir -p \\\"$pg_data\\\" \\\\\\n  && sudo chown -R \\\"$pg_user\\\":\\\"$pg_user\\\" \\\"$pg_data\\\" \\\\\\n  && sudo chmod 777 \\\"$pg_data\\\"bash\"))), mdx(\"p\", null, \"Basically, this script says:\", mdx(\"br\", null)), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Download postgres from the apt repository (default debian based package manager)\"), mdx(\"br\", null)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then after downloading postgres, create a user for the postgres database named \\u201Cpostgres\\u201D\"), mdx(\"br\", null)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create the appropriate directories and change the read / write / execute properties of each directory based on the offical PostgresQL Dockerfile.\"), mdx(\"br\", null))), mdx(\"p\", null, \"In a nutshell, thats all that the script does.\"), mdx(\"p\", null, \"Now, you can try logging into the database from the command line.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"psql -U postgres\"))), mdx(\"p\", null, \"This probably will not work due to permissions set in a file called \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"pg_hba.conf\")), mdx(\"p\", null, \"For me, this file was located on my Ubuntu 18.10 & 19.04 machines in the location:\"), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"/etc/postgresql/<version-number>/main/pg_hba.conf\")), mdx(\"p\", null, \"So heres where things get tricky. You may have previously setup a password youve forgotten, maybe theres something weird going on and you cant get into the database, anythings possible.\"), mdx(\"p\", null, \"If you checked out the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"pg_hba.conf file\"), \" you\\u2019ll see a setup similar to this:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"conf\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-conf\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-conf\"\n  }), \"# ... above code omitted for brevity\\n# Database administrative login by Unix domain socket\\nlocal   all             postgres                                peer\\n\\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\\n\\n# \\\"local\\\" is for Unix domain socket connections only\\nlocal   all             all                                     peer\\n# IPv4 local connections:\\nhost    all             all             127.0.0.1/32            md5\\n# IPv6 local connections:\\nhost    all             all             ::1/128                 md5\\n# Allow replication connections from localhost, by a user with the\\n# replication privilege.\\n#local   replication     postgres                                peer\\n#host    replication     postgres        127.0.0.1/32            peer\\n#host    replication     postgres        ::1/128                 peer\"))), mdx(\"p\", null, \"Without getting too technical, the very last column of each row decides the\\nauthentication option you would like to use. If for some reason you cannot\\nget access to your database, there may be a password set for the user that\\nyou don\\u2019t know.\"), mdx(\"p\", null, \"The easiest way to fix this is to change all options in the last column to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"trust\")), mdx(\"p\", null, \"I made a script specifically for changing the options in the last column to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"trust\")), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/blob/master/scripts/postgres-pass-reset.sh\"\n  }), \"Change to trust script\")), mdx(\"p\", null, \"Now you can go in and change the password for the user to whatever you would like it to be.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"psql -U postgres\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# drops you into a postgres instance\"), \"\\n-\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" alter user postgres with password \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'NEW_PASSWORD'\"), \"\\\"\\n-\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"\\\\\"), \"q\"))), mdx(\"p\", null, \"This will change password of the user \\u2018postgres\\u2019 to the value of \\u2018NEW_PASSWORD\\u2019\"), mdx(\"p\", null, \"Now if you would like to lock your database back down I created a script for that as well!\"), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/blob/master/scripts/postgres-md5-require.sh\"\n  }), \"Reset auth options to md5 script\")), mdx(\"p\", null, \"This will now require a password everytime you attempt to login.\"), mdx(\"h3\", null, \"Additional notes\"), mdx(\"p\", null, \"If you don\\u2019t want to use my scripts you can manually edit your\\n\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"/etc/postgresql/<version_number>/main/pg_hba.conf\"), \" to reflect the options you would like.\"), mdx(\"p\", null, \"Be careful with this, as for me I\\u2019m using postgresql version 11.5, however, when editing\\n\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"/etc/postgresql/11/main/pg_hba.conf\"), \" It did not properly reflect my settings.\"), mdx(\"p\", null, \"I had to edit \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"/etc/postgresql/9.5/pg_hba.conf\"), \" which is the reason my scripts will change\\nthe value of the auth method in all \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"/etc/postgresql/<version-number>/pg_hba.conf\"), \" files\"), mdx(\"h3\", null, \"Closing thoughts\"), mdx(\"p\", null, \"Setting up a database is never fun which is why I now always try to script the process.\\nThis one had me stumped for a whole day before I came across the relevant articles. I hope\\nthis article can help you as much as it helped me! Have a fantastic day.\"), mdx(\"p\", null, \"Any questions feel free to email me: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"mailto:Konnor7414@gmail.com\"\n  }), \"Konnor7414@gmail.com\")), mdx(\"p\", null, \"I don\\u2019t claim to know all, and I don\\u2019t even work as a software developer fulltime\\u2026(yet)\\nI\\u2019m sure I made some errors and some mistakes. Feel free to correct me and I will update the article\"), mdx(\"p\", null, \"Setting up a database is never fun which is why I now always try to script the process.\\nThis one had me stumped for a whole day before I came across the relevant articles. I hope\\nthis article can help you as much as it helped me! Have a fantastic day.\"), mdx(\"p\", null, \"Any questions feel free to email me: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"mailto:Konnor7414@gmail.com\"\n  }), \"Konnor7414@gmail.com\")), mdx(\"p\", null, \"I don\\u2019t claim to know all, and I don\\u2019t even work as a software developer fulltime\\u2026(yet)\\nI\\u2019m sure I made some errors and some mistakes. Feel free to correct me and I will update the article.\"), mdx(\"h3\", null, \"Links\"), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/tree/master/scripts\"\n  }), \"My config-files repo with postgres scripts\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.postgresql.org/\"\n  }), \"PostgresQL Homepage\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/docker-library/postgres/blob/4a82eb932030788572b637c8e138abb94401640c/12/Dockerfile\"\n  }), \"PostgresQL Dockerfile\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://enterprise.arcgis.com/en/server/10.3/cloud/amazon/change-default-database-passwords-on-linux.htm\"\n  }), \"Where I found the sed scripts\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/4494336/how-do-you-store-a-list-of-directories-into-an-array-in-bash-and-then-print-the\"\n  }), \"How I figured out how to put multiple directories into a bash array\")));\n}\n;\nMDXContent.isMDXComponent = true;","id":"33a40e1a-72a2-505e-a564-42ab61617b24","excerpt":"Purpose Setting up a database for the first time is never any fun. In this short post I will detail how I have come to setup PostgresQL for local development…","frontmatter":{"title":"PostgresQL - Setting up postgres on a local environment","date":"November 24, 2019","description":"I will detail a short and easy way to get PostgresQL running on a Ubuntu based machine for local development."}}},"pageContext":{"slug":"/misc/postgresql-password-reset/","previous":{"fields":{"slug":"/learning-php/part8/"},"frontmatter":{"title":"PHP for Beginners - Part 8 - What the heck is PDO?"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PHP for Beginners - Part 8 - What the heck is PDO?\",\n  \"date\": \"2019-11-23T13:02:49\",\n  \"description\": \"Lets learn about PDO and why its important.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Okay, lets continue where we left off with MySQL prior to learning classes.\"), mdx(\"p\", null, \"First, make sure your MySQL still works. Ensure you have a usable database for use\\nby the PDO builtin class for PHP.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mysql\\n$ -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" create database mytodo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# Create the database\"), \"\\n$ -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" show databases \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# Ensure it appears\"), \"\\n$ -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"exit\")))), mdx(\"p\", null, \"Alright, now lets dive in.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"php\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-php\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token php language-php\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token delimiter important\"\n  }), \"<?php\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"try\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"$pdo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"PDO\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token single-quoted-string string\"\n  }), \"'mysql:host=127.0.0.1;dbname=mytodos'\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token single-quoted-string string\"\n  }), \"'root'\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token single-quoted-string string\"\n  }), \"'Medic12!'\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"catch\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"PDOException \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"$e\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"die\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token single-quoted-string string\"\n  }), \"'could not connect.'\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"require\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token single-quoted-string string\"\n  }), \"'index.view.php'\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"))))), mdx(\"br\", null), mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"fields":{"slug":"/making-ems-helper/introduction/"},"frontmatter":{"title":"Making EMS Helper - Introduction"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Making EMS Helper - Introduction\",\n  \"date\": \"2019-12-05T05:07:36\",\n  \"description\": \"This is the beginning of EMS Helper. A service meant to provide people with the ability to quickly locate the closest appropriate hospital.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Tech Stack\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ruby on Rails v6.0.1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ruby 2.6.3\")), mdx(\"h3\", null, \"Explanation\"), mdx(\"p\", null, \"I am most familiar with Ruby on Rails and therefore felt I would be most\\nproductive using Ruby on Rails for this project\"), mdx(\"h2\", null, \"Deployment\"), mdx(\"p\", null, \"I still have not decided between a self host option like Linode / DigitalOcean\\nor letting Heroku handle it for me. As this is a small personal project, and I would\\nlike to get a feel for DevOps I will most likely be self hosting using DigitalOcean / Linode\\ncombined with Docker containers.\"), mdx(\"h2\", null, \"Scope\"), mdx(\"p\", null, \"I plan for this to be very limited scope. Very simply, I plan to have a database\\nof every hospital. Each hospital will have an address and series of boolean\\nvalues as to its capabilities. The biggest challenge will be\\naggregating the appropriate data.\"), mdx(\"h2\", null, \"Data aggregation\"), mdx(\"p\", null, \"Data aggregation seems to be the biggest challenge, thankfully someone has already\\nsomewhat solved this problem.\", mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hifld-geoplatform.opendata.arcgis.com/datasets/hospitals\"\n  }), \"https://hifld-geoplatform.opendata.arcgis.com/datasets/hospitals\"), \"\\nThe Homeland Infrastructure Foundation has aggregated all hospitals in the 50 states\\nvia each individual state department. They even have an easy to use API as well\\nas the added bonus of Trauma levels.\"), mdx(\"p\", null, \"Unfortunately, they do not have things such as Stroke Centers, Cath labs, and various\\npoint of entry capabilites. I will most likely be creating a scraper using Nokogiri to get this information from\\neach individual states respective website.\"), mdx(\"p\", null, \"In addition, I plan to have a form for users to submit for review the addition of a new\\nhospital. I will most likely have to add a sign in system at some point\\nshould this project gain any traction.\"), mdx(\"h2\", null, \"Geocoding\"), mdx(\"p\", null, \"What is geocoding? Geocoding and geolocation a way of quantifying a longitude\\nand latitude location for any given location.\", mdx(\"br\", null), \"\\nGeocoding and geolocation will be the basis of using a user\\u2019s current location and searching the radius\\nfor the closest appropriate facility. This is a big part of this project\", mdx(\"br\", null)), mdx(\"p\", null, \"Again, this is another solved problem. Initially I had thought Google Maps was the only option,\\non further review there is a lovely RubyGem called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/alexreisner/geocoder\"\n  }), \"Geocoder\"), \"\\nwhich aggregates multiple APIs. I have not dug into what service it would call out to\\nas currently this is a tightly scoped project with no plans of hitting API request limits.\"), mdx(\"h2\", null, \"Database backups\"), mdx(\"p\", null, \"I have not settled on any particular service for database backups yet.\\nIt is a consideration I have and it is worth noting. The database plans to be fairly\\nstatic, however, it\\u2019s always good to be prepared.\"), mdx(\"p\", null, \"As of now, the easiest option seems to set up a cron job to backup the database using\\n\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"pg_dump\"), \" and then sending that file to a remote server maybe like an AWS S3 bucket?\"), mdx(\"p\", null, \"Alternatively, I found this github repo \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/fastmonkeys/stellar\"\n  }), \"https://github.com/fastmonkeys/stellar\"), \"\\nwhich appears to be a faster alternative to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"pg_dump\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"pg_restore\"), \". I still have not\\nsettled on a good option but as this fleshes out it will become important\"), mdx(\"h2\", null, \"Error Tracking\"), mdx(\"p\", null, \"Sentry. Need I say more? Sentry is great its raved about, I may even integrate\\nwith LogRocket. Again, future problem, not needed right away.\"), mdx(\"h2\", null, \"CI / CD Pipeline\"), mdx(\"p\", null, \"Yes, its a small project, but following best practices is not a bad thing.\\nCurrently, I plan on using github actions as my CI / CD. Setting up Jenkins / Travis / CircleCI\\nseems like more headache than using an integrated option.\"), mdx(\"h2\", null, \"Using docker-compose\"), mdx(\"p\", null, \"As part of any good CI / CD pipeline, ideally I should be using Docker / containerization.\\nI have setup my docker-compose and Dockerfile in my repo to be used to provide a reproducible\\nenvironment. Unfortunately, I feel docker local development needs a little work,\\nbut it definitely has its place in a CI / CD pipeline for sure as well as providing\\na starting point for new users.\"), mdx(\"h2\", null, \"Donations!\"), mdx(\"p\", null, \"Its important to make sure that this can at least be self sustainable. I plan to\\ncreate a donations page which integrates with Stripe / Paypal to allow people to keep\\nthe lights on!\"), mdx(\"h2\", null, \"Closing thoughts\"), mdx(\"p\", null, \"EMS Helper plans to be a free service which will take donations in order to keep the service running. I currently do not have plans to make it a paid service. In addition, you can follow along with my progress on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/ems_helper/tree/development\"\n  }), \"development branch on Github.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}