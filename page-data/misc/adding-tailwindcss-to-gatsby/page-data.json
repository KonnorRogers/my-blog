{"componentChunkName":"component---src-templates-blog-post-js","path":"/misc/adding-tailwindcss-to-gatsby/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"ce615bdd-1e26-5986-8c3f-daf85702914f","excerpt":"Prerequisites Node (preferably 8+, I used 11.15.0) \nNpm (I used 6.7.0) \nGit (Gatsby requires Git to pull in starters) Note to windows users I wrote thisâ€¦","frontmatter":{"title":"Adding tailwindcss to a Gatsby project","date":"January 20, 2020"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding tailwindcss to a Gatsby project\",\n  \"date\": \"2020-01-20T02:26:43\",\n  \"description\": \"Details on how to add tailwindcss to a Gatsby project.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Prerequisites\"), mdx(\"p\", null, \"Node (preferably 8+, I used 11.15.0)\", mdx(\"br\", null), \"\\nNpm (I used 6.7.0)\", mdx(\"br\", null), \"\\nGit (Gatsby requires Git to pull in starters)\", mdx(\"br\", null)), mdx(\"h2\", null, \"Note to windows users\"), mdx(\"p\", null, \"I wrote this tutorial with intent for Unix based users. Whenever you see the\\ncommand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"touch\"), \" it just means create a file and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mkdir\"), \" means create a directory (folder).\\nAlso, I wrote filepaths with Unix based OS\\u2019es in mind.\"), mdx(\"h2\", null, \"TLDR\"), mdx(\"p\", null, \"For the full tutorial below \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#full-tutorial\"\n  }), \"Click here\")), mdx(\"h3\", null, \"For new projects\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --global gatsby-cli\\ngatsby new tailwind-gatsby-project\\ncd tailwind-gatsby-project\\n\")), mdx(\"h3\", null, \"For new or existing projects\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install gatsby-plugin-postcss\\nnpm install --save-dev tailwindcss\\nnpx tailwind init\\n\\ntouch postcss.config.js\\nmkdir src/styles\\ntouch src/styles/tailwind.css\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"1. Add gatsby-postcss-plugin to `./gatsby-config.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./gatsby-config.js\\nmodule.exports = {\\n  // Above code omitted for brevity\\n  plugins: [\\n    `gatsby-plugin-react-helmet`,\\n    {\\n      resolve: `gatsby-source-filesystem`,\\n      options: {\\n        name: `images`,\\n        path: `${__dirname}/src/images`,\\n      },\\n    },\\n    `gatsby-plugin-postcss`,\\n    // Below code omitted for brevity\\n  ],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"2. Add the following values to `./postcss.config.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./postcss.config.js\\n\\nconst tailwindcss = require(`tailwindcss`)\\n\\nmodule.exports = {\\n  plugins: [tailwindcss(`./tailwind.config.js`), require(\\\"autoprefixer\\\")],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"3. Add tailwindcss directives to `./src/styles/tailwind.css`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* ./src/styles/tailwind.css */\\n@tailwind base\\n@tailwind utilities;\\n@tailwind components;\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"4. Add tailwindcss globally by importing it in `gatsby-browser.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./gatsby-browser.js\\n\\nimport \\\"./src/styles/tailwind.css\\\"\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"5. Add a tailwind style to a an item in `./src/pages/index.js` to test that its working\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./src/pages/index.js\\n\\n// Above code omitted for brevity\\n<h1 className=\\\"bg-red-500\\\">Hi people</h1>\\n// Below code omitted for brevity\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"6. Start up your server\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"gatsby develop\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"7. Navigate to `localhost:8000` to see if Tailwind is working. That's it!\"), mdx(\"h2\", {\n    id: \"full-tutorial\"\n  }, \" Full tutorial\"), mdx(\"p\", null, \"If you already have a Gatsby project feel free to skip ahead to the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#adding-to-an-existing-project\"\n  }), \"Adding to an existing project section\")), mdx(\"strong\", null, \"1. First, start by creating a new Gatsby project. The easiest way to do so is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --global gatsby-cli\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"2. Then to create a new project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"gatsby new tailwind-gatsby-project\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"This will create a new Gatsby project called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tailwind-gatsby-project\")), mdx(\"strong\", null, \"3. Now, navigate into the project directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd tailwind-gatsby-project\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Make sure running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby develop\"), \" works before moving on.\"), mdx(\"h2\", {\n    id: \"adding-to-an-existing-project\"\n  }, \" Adding to an existing project\"), mdx(\"strong\", null, \"4. Add [gatsby-plugin-postcss](https://www.gatsbyjs.org/packages/gatsby-plugin-postcss/) package\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install gatsby-plugin-postcss\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"5. Add gatsby-postcss-plugin to `gatsby-config.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./gatsby-config.js\\nmodule.exports = {\\n  // Above code omitted for brevity\\n  plugins: [\\n    `gatsby-plugin-react-helmet`,\\n    {\\n      resolve: `gatsby-source-filesystem`,\\n      options: {\\n        name: `images`,\\n        path: `${__dirname}/src/images`,\\n      },\\n    },\\n    `gatsby-plugin-postcss`,\\n    // Below code omitted for brevity\\n  ],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"6. Create a `postcss.config.js` file in the root directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch postcss.config.js\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"7. Add the following content to `postcss.config.js`:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./postcss.config.js\\n\\nconst tailwindcss = require(`tailwindcss`)\\n\\nmodule.exports = {\\n  plugins: [tailwindcss(`./tailwind.config.js`), require(\\\"autoprefixer\\\")],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"8. Add the [TailwindCSS](https://tailwindcss.com/docs/installation) package\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev tailwindcss\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"9. Create a directory called in `styles` in the `src` directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir src/styles\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"10. Create a stylesheet called `tailwind.css` in the `src/styles` directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch src/styles/tailwind.css\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"11. Add the following content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* ./src/styles/tailwind.css */\\n\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"12. To add tailwind styles globally, import it in `gatsby-browser.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import \\\"./src/styles/tailwind.css\\\"\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Everything should now be working! However, we currently have no way of telling.\\nLets add a tailwind style to the index page.\"), mdx(\"strong\", null, \"13. Add a tailwind style to the `\", mdx(\"h1\", null), \"` tag in `src/pages/index.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./src/pages/index.js\\n\\n// Above code omitted for brevity\\n<h1 className=\\\"bg-red-500\\\">Hi people</h1>\\n// Below code omitted for brevity\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"14. Run `gatsby-develop`\"), mdx(\"p\", null, \"You should now see a red background for the text that says \\u201CHi people\\u201D. This\\nlets you know tailwind is working as expected! Hope this worked for you getting\\nTailwindCSS setup in Gatsby.\"), mdx(\"p\", null, \"Make sure if you still have the server from earlier running to shut it down and\\nrestart it.\"), mdx(\"h2\", null, \"Links\"), mdx(\"h3\", null, \"My github repo using Tailwind and Gatsby\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/tailwind-gatsby-project\"\n  }), \"Reference Repository\")), mdx(\"h3\", null, \"Gatsby\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org\"\n  }), \"Gatsby\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/tailwind-css/\"\n  }), \"Gatsby + Tailwind tutorial\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/tutorial/part-two/#creating-global-styles-with-standard-css-files\"\n  }), \"Using CSS in Gatsby\"), mdx(\"br\", null)), mdx(\"h3\", null, \"Tailwind\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tailwindcss.com/\"\n  }), \"TailwindCSS\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tailwindcss.com/docs/installation\"\n  }), \"TailwindCSS Installation\"), mdx(\"br\", null)));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/misc/adding-tailwindcss-to-gatsby/","previous":{"id":"7e6cba62-2c61-51c7-9250-ca7d7a3445b1","fields":{"slug":"/javascript/setting-up-gatsby-with-docker/"},"frontmatter":{"title":"Setting up a Gatsby project with Docker"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Setting up a Gatsby project with Docker\",\n  \"date\": \"2020-01-16T16:55:01\",\n  \"description\": \"How to setup a new gatsby project with docker within the current directory of your project\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Quick start\"), mdx(\"p\", null, \"First create a new directory (or use an existing directory, this method will NOT\\ncreate a new git directory for you)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir my-new-gatsby-project\\ncd my-new-gatsby-project\\ntouch Dockerfile.dev docker-compose.yml package.json yarn.lock\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Next step, we must fill in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file.\"), mdx(\"p\", null, \"There are 2 ways to handle this. You can either run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn init or npm init\"), \" if you have\\nyarn / npm installed on your computer.\"), mdx(\"p\", null, \"However, if you do not have npm / yarn it is fine. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" just needs\\nsome values to get Docker to run appropriately. Run the command below to fill in\\na temporary \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"// ./package.json\\n\\n{\\n  \\\"name\\\": \\\"docker-with-gatsby\\\",\\n  \\\"description\\\": \\\"An example repo for setting up Gatsby with Docker\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"repository\\\": \\\"git@github.com:ParamagicDev/docker-with-gatsby.git\\\",\\n  \\\"author\\\": \\\"paramagicdev <konnor5456@gmail.com>\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"private\\\": true\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Then, we\\u2019ll fill in the Dockerfile.dev with the following values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\"\n  }), \"# ./Dockerfile.dev\\n\\nFROM node:12.14.0-slim\\n\\nRUN apt update && apt upgrade -y && \\\\\\n    apt install gcc g++ make python git libc6-dev build-essential libpng-dev \\\\\\n    libjpeg-dev libvips-dev libvips musl-dev node-gyp pngquant webp -y\\n\\nRUN yarn global add gatsby-cli\\n\\n# The port gatsby runs on\\nEXPOSE 8000\\n\\nWORKDIR /myapp\\nCOPY ./package.json /myapp\\nCOPY ./yarn.lock /myapp\\n\\nRUN yarn install && yarn cache clean\\nCOPY . /myapp\\nCMD [\\\"gatsby\\\", \\\"develop\\\", \\\"-H\\\", \\\"0.0.0.0\\\" ]\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"After finishing with the Dockerfile, well build a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" to bring\\neverything together. Technically, you could run the whole project without docker-compose\\nbut it makes commands a lot more verbose by having to include volumes and ports\\nand various other things. Docker-compose simply streamlines the process.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# ./docker-compose.yml\\n\\nversion: \\\"3\\\"\\nservices:\\n  web:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.dev\\n    ports:\\n      - \\\"8000:8000\\\"\\n    volumes:\\n      - /myapp/node_modules\\n      - .:/myapp\\n    environment:\\n      - NODE_ENV=development\\n      - GATSBY_WEBPACK_PUBLICPATH=/\\n\")), mdx(\"p\", null, \"Your file structure should at least contain the following when running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tree .\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \".\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 Dockerfile.dev\\n\\u251C\\u2500\\u2500 package.json\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/docker-with-gatsby/tree/initial-docker-setup\"\n  }), \"Reference Repository Commit\")), mdx(\"p\", null, \"After copying the contents of the files above into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile.dev\"), \"\\nrespectively, then run the following commands:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Unfortunately, yarn does not have a similar command to npx\\ndocker-compose run --rm web npx degit https://github.com/gatsbyjs/gatsby-starter-default . --force\\n\")), mdx(\"p\", null, \"Your gatsby project is now ready to dev on! Simply run the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose up --build\\n\")), mdx(\"p\", null, \"Navigate to localhost:8000 in your web browser, and your project should be running!\"), mdx(\"h3\", null, \"Additional info\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up --build\"), \" command is only needed when rebuilding, IE:\\nAdding packages, removing packages, etc.\"), mdx(\"p\", null, \"If you have only changed files that do not need a full rebuild, you can run\\nsubsequent instances of docker-compose with simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up\")), mdx(\"h4\", null, \"Using yarn\"), mdx(\"p\", null, \"If you are planning on using yarn instead of npm like I have above, make sure to remove\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package-lock.json\"), \" generated by degit when pulling in the gatsby starter\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"rm package-lock.json\\n\")), mdx(\"p\", null, \"Otherwise, when installing packages yarn will complain about conflicting package\\nmanagers.\"), mdx(\"h4\", null, \"Updating packages\"), mdx(\"p\", null, \"To update packages you can either do a straight upgrade or an interactive upgrade\\nas follows.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Interactive upgrade\\ndocker-compose run --rm web yarn upgrade-interactive\\n\\n# Non-interactive\\ndocker-compose run --rm web yarn upgrade\\n\")), mdx(\"p\", null, \"If you\\u2019re not currently inside a git repo and would like to use git, make sure to\\nrun a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git init\"), \" from the root directory\"), mdx(\"h2\", null, \"Bonus content - Adding \", mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"https://www.docz.site\"\n  }), \"Docz\")), mdx(\"p\", null, \"Alright, now when I initially tried this I did not realize Docz had released a v2.\\nMake sure you are targetting v2. There are 2 different ways to create a project\\nwith Docz.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The first way is similar to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"create-react-app\"), \". If you have node installed,\\nyou can run the following command:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npx create-docz-app my-docz-app\\n# or\\nyarn create docz-app my-docz-app\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The alternative way is if you followed the steps above to create a barebones\\nGatsby project.\")), mdx(\"p\", null, \"After following the steps above, your project should look like this:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/docker-with-gatsby\"\n  }), \"Gatsby Initial Setup\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"tree .\\n\\n.\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 Dockerfile.dev\\n\\u251C\\u2500\\u2500 gatsby-browser.js\\n\\u251C\\u2500\\u2500 gatsby-config.js\\n\\u251C\\u2500\\u2500 gatsby-node.js\\n\\u251C\\u2500\\u2500 gatsby-ssr.js\\n\\u251C\\u2500\\u2500 LICENSE\\n\\u251C\\u2500\\u2500 node_modules\\n\\u251C\\u2500\\u2500 package.json\\n\\u251C\\u2500\\u2500 package-lock.json\\n\\u251C\\u2500\\u2500 public\\n\\u251C\\u2500\\u2500 README.md\\n\\u251C\\u2500\\u2500 src\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, \"Next, run the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add docz\\n\")), mdx(\"p\", null, \"There are many ways to use the new docz but because the project I\\u2019m making is specifically\\nfor documentation and won\\u2019t be using anything else, all my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".mdx\"), \" files will be in the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/pages\"), \" directory because this is how Gatsby provides routing.\"), mdx(\"p\", null, \"Additionally, you must add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-theme-doz\"), \" plugin in both your\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./gatsby-config.js\"), \" and to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./package.json\"), \" file like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web yarn add gatsby-theme-docz\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Then, you must add it to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./gatsby-config.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"module.exports = {\\n  plugins: [\\\"gatsby-theme-docz\\\"],\\n}\\n\")), mdx(\"p\", null, \"Hope this helped you with Gatsby, Docz, or general Docker setup!\\nGood luck out there!\"), mdx(\"h2\", null, \"Issues\"), mdx(\"p\", null, \"When running the docker process, it runs as root. As a result, on Linux the files\\ncreated by Degit will be owned by the root user. Run the following to fix\\nany permissions errors from the root directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo chown -R \\\"$USER\\\":\\\"$USER\\\" .\\n\")), mdx(\"p\", null, \"Originally, this tutorial used an Alpine based docker images. Theres a lot of\\ncompatibility issues with the image processing library \\u2018sharp\\u2019. As a result,\\nI decided to use a Debian based Docker image for an easier build process.\"), mdx(\"p\", null, \"I also ran into issues with using Node 13.6.0. It kept saying sharp was not self registering.\\nThere appears to be many compatibility issues with sharp so I wanted to keep this\\nas close to my host machine as possible.\"), mdx(\"h2\", null, \"Links\"), mdx(\"h3\", null, \"Gatsby\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gatsbyjs.org\"\n  }), \"Gatsby Home\")), mdx(\"br\", null), \"[Gatsby Starter Github page](https://github.com/gatsbyjs/gatsby-starter-default)\", mdx(\"br\", null), mdx(\"h3\", null, \"Degit\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I actually learned about Degit when browsing the Svelte documentation\"), mdx(\"br\", null)), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Rich-Harris/degit\"\n  }), \"Degit Source Code\")), mdx(\"br\", null), mdx(\"h3\", null, \"Docz\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.docz.site\"\n  }), \"Docz Homepage\")), mdx(\"br\", null), \"[Docz Getting Started](https://www.docz.site/docs/getting-started)\");\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"e2690796-bcd3-5074-984e-3a63d8e09919","fields":{"slug":"/javascript/adding-emotion-typescript-and-jest/"},"frontmatter":{"title":"Adding Emotion, Typescript, and Jest to Gatsby"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding Emotion, Typescript, and Jest to Gatsby\",\n  \"date\": \"2020-03-05T21:17:08\",\n  \"description\": \"A detailed description of adding emotion, typescript, jest, and react-testing-library.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#\"\n  }), \"Purpose\")), mdx(\"p\", null, \"The purpose of this is to detail how to add Emotion, Typescript, Jest,\\nand React-testing-library to an existing project.\"), mdx(\"h3\", {\n    id: \"table-of-contents\"\n  }, mdx(\"a\", {\n    href: \"#table-of-contents\"\n  }, \"Table of Contents\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"h4\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#guide-start\"\n  }), \"Step by Step additions\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-typescript\"\n  }), \"Adding Typescript\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-eslint\"\n  }), \"Adding ESLint\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-emotion\"\n  }), \"Adding Emotion\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-emotion-testing\"\n  }), \"Adding Emotion Snapshot Testing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-jest\"\n  }), \"Adding Jest\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adding-rtl\"\n  }), \"Adding React-testing-library\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"h4\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#quick-start\"\n  }), \"Quick start\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#i-know-what-im-doing\"\n  }), \"I know what I\\u2019m doing, lets do it quick\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"h4\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#resources\"\n  }), \"Resources\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#jest\"\n  }), \"Jest\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#rtl\"\n  }), \"React-Testing-Library\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#typescript\"\n  }), \"Typescript\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#emotion\"\n  }), \"Emotion\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#eslint\"\n  }), \"ESLint\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#starter-repo\"\n  }), \"Starter Repo\"))))), mdx(\"p\", null, \"I will be going through adding the above items based on using the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/starters/gatsbyjs/gatsby-starter-default/\"\n  }), \"Gatsby Default Starter\")), mdx(\"p\", null, \"This is essentially a guide to adding the above technologies to an existing Gatsby\\nproject.\"), mdx(\"h3\", {\n    id: \"adding-typescript\"\n  }, mdx(\"a\", {\n    href: \"#adding-typescript\"\n  }, \"Adding Typescript\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev typescript\\n\")), mdx(\"p\", null, \"Typescript is now in your project! However, typescript on its own does not do much.\"), mdx(\"p\", null, \"In addition, we must now add typescript to Gatsby.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install gatsby-plugin-typescript\\n\")), mdx(\"p\", null, \"Now lets add it to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// gatsby-config.js\\nmodules.exports = {\\n  // Above code omitted\\n  plugins: [\\n    // Other plugins\\n    \\\"gatsby-plugin-typescript\\\",\\n  ],\\n}\\n\")), mdx(\"p\", null, \"Lets now configure ESLint to work with typescript\\nto lint our files.\"), mdx(\"h3\", {\n    id: \"adding-eslint\"\n  }, mdx(\"a\", {\n    href: \"#adding-eslint\"\n  }, \"Adding ESLint\")), mdx(\"p\", null, \"The Gatsby default comes with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".prettierrc\"), \" file defined.\\nIt does not however come with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc.js\"), \" defined in the root directory.\\nSo, lets add it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// .eslintrc.js\\nmodule.exports = {\\n  root: true,\\n  env: {\\n    node: true,\\n    browser: true,\\n    es6: true,\\n  },\\n  parser: \\\"@typescript-eslint/parser\\\",\\n  globals: {\\n    Atomics: \\\"readonly\\\",\\n    SharedArrayBuffer: \\\"readonly\\\",\\n  },\\n  parserOptions: {\\n    ecmaFeatures: {\\n      jsx: true,\\n    },\\n    ecmaVersion: 2018,\\n    sourceType: \\\"module\\\",\\n  },\\n  rules: {\\n    \\\"prettier/prettier\\\": \\\"error\\\",\\n    indent: [\\\"error\\\", 2],\\n    \\\"linebreak-style\\\": [\\\"error\\\", \\\"unix\\\"],\\n    camelcase: \\\"off\\\",\\n    \\\"@typescript-eslint/camelcase\\\": [\\\"error\\\", { properties: \\\"never\\\" }],\\n    \\\"react/prop-types\\\": \\\"off\\\",\\n  },\\n  plugins: [\\\"@typescript-eslint\\\", \\\"prettier\\\", \\\"react\\\", \\\"jest\\\"],\\n  extends: [\\n    \\\"eslint:recommended\\\",\\n    \\\"plugin:@typescript-eslint/eslint-recommended\\\",\\n    \\\"plugin:@typescript-eslint/recommended\\\",\\n    \\\"plugin:react/recommended\\\",\\n    \\\"plugin:jest/recommended\\\",\\n  ],\\n  settings: {\\n    react: {\\n      version: \\\"detect\\\",\\n    },\\n    \\\"import/resolver\\\": {\\n      alias: [\\n        [\\\"~components\\\", \\\"./src/components\\\"],\\n        [\\\"~\\\", \\\"./src/\\\"],\\n      ],\\n    },\\n  },\\n}\\n\")), mdx(\"p\", null, \"Add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintignore\"), \" with the following config:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// .eslintignore\\nnode_modules\\ndist\\ncoverage\\ngatsby-*\\n\")), mdx(\"p\", null, \"We will also have to define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsconfig.json\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// tsconfig.json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"target\\\": \\\"esnext\\\",\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"lib\\\": [\\\"dom\\\", \\\"esnext\\\"],\\n    \\\"strict\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"isolatedModules\\\": false,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"noUnusedLocals\\\": false,\\n    \\\"allowJs\\\": true,\\n    \\\"baseUrl\\\": \\\".\\\",\\n    \\\"paths\\\": {\\n      \\\"~*\\\": [\\\"src/*\\\"],\\n      \\\"~components/*\\\": [\\\"src/components/*\\\"]\\n    }\\n  },\\n  \\\"exclude\\\": [\\\"node_modules\\\", \\\"public\\\", \\\".cache\\\", \\\"gatsby*\\\"]\\n}\\n\")), mdx(\"p\", null, \"Next, install the packages required to get ESlint to work.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev eslint @typescript-eslint/parser \\\\\\n@typescript-eslint/eslint-plugin eslint-plugin-jest eslint-plugin-react \\\\\\neslint-plugin-prettier eslint-import-resolver-alias\\n\")), mdx(\"p\", null, \"We save these as dev dependencies because they are not needed for runtime files.\"), mdx(\"p\", null, \"Now, typescript should be working in your editor of choice using ESLint.\"), mdx(\"p\", null, \"To confirm its working from the command line, let\\u2019s add some scripts to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// package.json\\n{\\n  // Above code omitted\\n  scripts: {\\n    // Other scripts\\n    \\\"lint\\\": \\\"eslint . --ext .js,.jsx,.ts,.tsx\\\",\\n    \\\"type-check\\\": \\\"tsc --noEmit\\\",\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now we can run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm run type-check\\nnpm run lint # runs eslint\\n\")), mdx(\"p\", null, \"So now, we are able to change our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \" files to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tsx\"), \" files. I won\\u2019t go over it here,\\nbut I will have the corrected \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tsx\"), \" files in my gatsby starter.\"), mdx(\"h3\", {\n    id: \"adding-emotion\"\n  }, mdx(\"a\", {\n    href: \"#adding-emotion\"\n  }, \"Adding Emotion\")), mdx(\"p\", null, \"What is emotion? Emotion is a CSS-in-JS solution similar to styled components.\"), mdx(\"p\", null, \"I used emotion in a previous project and enjoyed using it, so I wanted to add it to this starter.\"), mdx(\"p\", null, \"As a bonus, css-in-js snapshot testing is great for looking for style changes when we add Jest later.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install gatsby-plugin-emotion @emotion/core @emotion/styled\\n\")), mdx(\"p\", null, \"After this, add the following to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// gatsby-config.js\\nmodule.exports = {\\n  // ...\\n  plugins: [\\n    // ...additional plugins\\n    `gatsby-plugin-emotion`,\\n  ],\\n}\\n\")), mdx(\"p\", null, \"Now, you\\u2019re all set to add emotion to your files. Again, I won\\u2019t go over that here, but the updated files will be in my starter.\"), mdx(\"h2\", {\n    id: \"adding-jest\"\n  }, mdx(\"a\", {\n    href: \"#adding-jest\"\n  }, \"Adding Jest\")), mdx(\"p\", null, \"Now, lets add unit testing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev \\\\\\n@types/jest @types/node jest ts-jest \\\\\\nbabel-jest react-test-renderer \\\\\\nbabel-preset-gatsby identity-obj-proxy\\n\")), mdx(\"p\", null, \"Just a quick note, ts-jest runs typechecking which jest does not run by default.\"), mdx(\"p\", null, \"Add a testing scripts to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// package.json\\nmodule.exports {\\n  // ...code above omitted\\n  scripts: {\\n    // ... Above scripts omitted\\n    \\\"test\\\": \\\"jest\\\",\\n    \\\"test:watch\\\": \\\"jest --watch\\\",\\n    \\\"test:watchAll\\\": \\\"jest --watchAll\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"Alright, now lets actually make jest work in Gatsby.\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.config.js\"), \" file and add the following content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// jest.config.js\\nmodule.exports = {\\n  transform: {\\n    \\\"^.+\\\\\\\\.[jt]sx?$\\\": `<rootDir>/jest-preprocess.js`,\\n  },\\n  moduleNameMapper: {\\n    \\\".+\\\\\\\\.(css|styl|less|sass|scss)$\\\": `identity-obj-proxy`,\\n    \\\".+\\\\\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\\\": `<rootDir>/__mocks__/file-mock.js`,\\n    \\\"~(.*)$\\\": \\\"<rootDir>/src/$1\\\",\\n  },\\n  testPathIgnorePatterns: [`node_modules`, `\\\\\\\\.cache`, `<rootDir>.*/public`],\\n  transformIgnorePatterns: [`node_modules/(?!(gatsby)/)`],\\n  globals: {\\n    __PATH_PREFIX__: ``,\\n  },\\n  testURL: `http://localhost`,\\n  setupFiles: [`<rootDir>/loadershim.js`],\\n}\\n\")), mdx(\"p\", null, \"Now create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest-preprocess.js\"), \" with the following content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// jest-preprocess.js\\nconst babelOptions = {\\n  presets: [\\\"babel-preset-gatsby\\\", \\\"@babel/preset-typescript\\\"],\\n}\\n\\nmodule.exports = require(\\\"babel-jest\\\").createTransformer(babelOptions)\\n\")), mdx(\"p\", null, \"Now, we need to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__mocks__\"), \" directory with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"file-mock.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// __mocks__/file-mock.js\\nmodule.exports = \\\"test-file-stub\\\"\\n\")), mdx(\"p\", null, \"We\\u2019ll also add a gatsby mock file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__mocks__/gatsby.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// __mocks__/gatsby.js\\nconst React = require(\\\"react\\\")\\nconst gatsby = jest.requireActual(\\\"gatsby\\\")\\n\\nmodule.exports = {\\n  ...gatsby,\\n  graphql: jest.fn(),\\n  Link: jest.fn().mockImplementation(\\n    // these props are invalid for an `a` tag\\n    ({\\n      activeClassName,\\n      activeStyle,\\n      getProps,\\n      innerRef,\\n      partiallyActive,\\n      ref,\\n      replace,\\n      to,\\n      ...rest\\n    }) =>\\n      React.createElement(\\\"a\\\", {\\n        ...rest,\\n        href: to,\\n      })\\n  ),\\n  StaticQuery: jest.fn(),\\n  useStaticQuery: jest.fn(),\\n}\\n\")), mdx(\"p\", null, \"Then we add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loadershim.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// loadershim.js\\nglobal.___loader = {\\n  enqueue: jest.fn(),\\n}\\n\")), mdx(\"h3\", {\n    id: \"adding-emotion-testing\"\n  }, mdx(\"a\", {\n    href: \"#adding-emotion-testing\"\n  }, \"Adding Emotion Snapshot Testing\")), mdx(\"p\", null, \"By default, jest does not know how to serialize the css provided by Emotion. Lets change this\\nso we can have meaningful snapshot testing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev jest-emotion babel-plugin-emotion\\n\")), mdx(\"p\", null, \"Now, we must add this to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest-preprocess.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// jest-preprocess.js\\nconst babelOptions = {\\n  presets: [\\n    \\\"babel-preset-gatsby\\\",\\n    \\\"@emotion/babel-preset-css-prop\\\",\\n    \\\"@babel/preset-typescript\\\",\\n  ],\\n  plugins: [\\\"emotion\\\"],\\n}\\n\\nmodule.exports = require(\\\"babel-jest\\\").createTransformer(babelOptions)\\n\")), mdx(\"p\", null, \"Now we must create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup-test-env.js\"), \" file to be able to add the snapshot serialization.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// setup-test-env.js\\nimport { createSerializer } from \\\"jest-emotion\\\"\\nimport * as emotion from \\\"@emotion/core\\\"\\n\\nexpect.addSnapshotSerializer(createSerializer(emotion))\\n\")), mdx(\"p\", null, \"Finally, tell your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.config.js\"), \" to setup this file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// jest.config.js\\nmodules.exports = {\\n  // Above code omitted\\n  jest: {\\n    setupFilesAfterEnv: [`<rootDir>/setup-test-env.js`],\\n  },\\n  // Below code omitted\\n}\\n\")), mdx(\"p\", null, \"Phew, that was a lot of work simply to add testing. No wonder why no one bothers\\ntesting anything! you could stop here if you\\u2019d like, but I really enjoy\\nworking with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/testing-library/react-testing-library\"\n  }), \"React-Testing-Library\"), \" So lets add that next.\"), mdx(\"h3\", {\n    id: \"adding-rtl\"\n  }, mdx(\"a\", {\n    href: \"#adding-rtl\"\n  }, \"Adding React-Testing-Library\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev react-testing @testing-library/react \\\\\\n@testing-library/jest-dom @types/testing-library__react\\n\")), mdx(\"p\", null, \"Now add the line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import \\\"@testing-library/jest-dom/extend-expect\\\"\"), \" to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup-test-env.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// setup-test-env.js\\nimport { createSerializer } from \\\"jest-emotion\\\"\\nimport * as emotion from \\\"@emotion/core\\\"\\nimport \\\"@testing-library/jest-dom/extend-expect\\\"\\n\\nexpect.addSnapshotSerializer(createSerializer(emotion))\\n\")), mdx(\"p\", null, \"Writing the first test\"), mdx(\"h3\", {\n    id: \"first-test\"\n  }, mdx(\"a\", {\n    href: \"#first-test\"\n  }, \"Writing your first test\")), mdx(\"p\", null, \"There are many ways to add tests, I prefer having a top level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir __tests__\\n\")), mdx(\"p\", null, \"In this directory is where i can add integration tests, unit tests etc.\"), mdx(\"p\", null, \"Below is an example of one of my tested components in my starter. Just a note, i do use import\\naliases so it wont be a relative path for importing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// __tests__/components/header.test.tsx\\nimport React from \\\"react\\\"\\nimport { render } from \\\"@testing-library/react\\\"\\nimport Header from \\\"~components/header\\\"\\n\\ndescribe(\\\"Unit testing\\\", () => {\\n  test(\\\"Should render a header with the given testid\\\", () => {\\n    const { getByTestId } = render(\\n      <Header siteTitle=\\\"test-title\\\" className=\\\"header\\\" data-testid=\\\"header\\\" />\\n    )\\n\\n    const header = getByTestId(\\\"header\\\")\\n    expect(header).toHaveClass(\\\"header\\\")\\n    expect(header).toHaveTextContent(\\\"test-title\\\")\\n  })\\n})\\n\\ndescribe(\\\"Snapshot testing\\\", () => {\\n  test(\\\"Should render a header without error\\\", () => {\\n    const { asFragment } = render(\\n      <Header siteTitle=\\\"test-title\\\" className=\\\"header\\\" data-testid=\\\"header\\\" />\\n    )\\n\\n    expect(asFragment()).toMatchSnapshot()\\n  })\\n\\n  test(\\\"Renders a header without a siteTitle defined\\\", () => {\\n    const { asFragment } = render(<Header />)\\n\\n    expect(asFragment()).toMatchSnapshot()\\n  })\\n})\\n\")), mdx(\"p\", null, \"And that\\u2019s it! You should be up and running using Jest / React-testing-library.\\nThis was much longer than expected so I may add another post about adding Cypress for E2E testing.\"), mdx(\"h3\", {\n    id: \"quick-start\"\n  }, mdx(\"a\", {\n    href: \"#quick-start\"\n  }, \"Quick Start\")), mdx(\"p\", null, \"If you\\u2019ve done this before, if you know what you\\u2019re doing, and feel confident,\\nbelow is the quick guide as to everything covered above. I don\\u2019t recommend this\\nif you don\\u2019t have prior experience implementing Gatsby, Typescript, Emotion, and Jest.\\nProceed at your own risk.\"), mdx(\"h4\", {\n    id: \"i-know-what-im-doing\"\n  }, mdx(\"a\", {\n    href: \"#i-know-what-im-doing\"\n  }, \"I know what I'm doing - Let's do this\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Create directories\\nmkdir -p __tests__/components __mocks__/\\n\\n# Create files\\ntouch jest.config.js jest-preprocess.js loadershim.js __mocks__/file-mock.js \\\\\\nsetup-test-env.js .eslintrc.js .eslintignore  __mocks__/gatsby.js\\n\\n# add development packages\\nnpm install --save-dev typescript eslint @typescript-eslint/parser \\\\\\n@typescript-eslint/eslint-plugin eslint-plugin-jest eslint-plugin-react \\\\\\neslint-plugin-prettier eslint-import-resolver-alias @types/jest @types/node \\\\\\njest ts-jest babel-jest react-test-renderer babel-preset-gatsby \\\\\\nidentity-obj-proxy jest-emotion babel-plugin-emotion \\\\\\nreact-testing @testing-library/react @testing-library/jest-dom @types/testing-library__react\\n\\n# add runtime packages\\nnpm install gatsby-plugin-typescript gatsby-plugin-emotion @emotion/core @emotion/styled\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// package.json\\n{\\n  // Above code omitted\\n  scripts: {\\n    // Other scripts\\n    \\\"lint\\\": \\\"eslint . --ext .js,.jsx,.ts,.tsx\\\",\\n    \\\"type-check\\\": \\\"tsc --noEmit\\\",\\n    \\\"test\\\": \\\"jest\\\",\\n    \\\"test:watch\\\": \\\"jest --watch\\\",\\n    \\\"test:watchAll\\\": \\\"jest --watchAll\\\"\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// .eslintrc.js\\nmodule.exports = {\\n  root: true,\\n  env: {\\n    node: true,\\n    browser: true,\\n    es6: true,\\n  },\\n  parser: \\\"@typescript-eslint/parser\\\",\\n  globals: {\\n    Atomics: \\\"readonly\\\",\\n    SharedArrayBuffer: \\\"readonly\\\",\\n  },\\n  parserOptions: {\\n    ecmaFeatures: {\\n      jsx: true,\\n    },\\n    ecmaVersion: 2018,\\n    sourceType: \\\"module\\\",\\n  },\\n  rules: {\\n    \\\"prettier/prettier\\\": \\\"error\\\",\\n    indent: [\\\"error\\\", 2],\\n    \\\"linebreak-style\\\": [\\\"error\\\", \\\"unix\\\"],\\n    camelcase: \\\"off\\\",\\n    \\\"@typescript-eslint/camelcase\\\": [\\\"error\\\", { properties: \\\"never\\\" }],\\n    \\\"react/prop-types\\\": \\\"off\\\",\\n  },\\n  plugins: [\\\"@typescript-eslint\\\", \\\"prettier\\\", \\\"react\\\", \\\"jest\\\"],\\n  extends: [\\n    \\\"eslint:recommended\\\",\\n    \\\"plugin:@typescript-eslint/eslint-recommended\\\",\\n    \\\"plugin:@typescript-eslint/recommended\\\",\\n    \\\"plugin:react/recommended\\\",\\n    \\\"plugin:jest/recommended\\\",\\n  ],\\n  settings: {\\n    react: {\\n      version: \\\"detect\\\",\\n    },\\n    \\\"import/resolver\\\": {\\n      alias: [\\n        [\\\"~components\\\", \\\"./src/components\\\"],\\n        [\\\"~\\\", \\\"./src/\\\"],\\n      ],\\n    },\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// .eslintignore\\nnode_modules\\ndist\\ncoverage\\ngatsby-*\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// gatsby-config.js\\nmodule.exports = {\\n  // ...\\n  plugins: [\\n    // ...additional plugins\\n    \\\"gatsby-plugin-typescript\\\",\\n    \\\"gatsby-plugin-emotion\\\",\\n  ],\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// loadershim.js\\nglobal.___loader = {\\n  enqueue: jest.fn(),\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// jest-preprocess.js\\nconst babelOptions = {\\n  presets: [\\n    \\\"babel-preset-gatsby\\\",\\n    \\\"@emotion/babel-preset-css-prop\\\",\\n    \\\"@babel/preset-typescript\\\",\\n  ],\\n  plugins: [\\\"emotion\\\"],\\n}\\n\\nmodule.exports = require(\\\"babel-jest\\\").createTransformer(babelOptions)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// setup-test-env.js\\nimport { createSerializer } from \\\"jest-emotion\\\"\\nimport * as emotion from \\\"@emotion/core\\\"\\nimport \\\"@testing-library/jest-dom/extend-expect\\\"\\n\\nexpect.addSnapshotSerializer(createSerializer(emotion))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// jest.config.js\\nmodule.exports = {\\n  transform: {\\n    \\\"^.+\\\\\\\\.[jt]sx?$\\\": `<rootDir>/jest-preprocess.js`,\\n  },\\n  moduleNameMapper: {\\n    \\\".+\\\\\\\\.(css|styl|less|sass|scss)$\\\": `identity-obj-proxy`,\\n    \\\".+\\\\\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\\\": `<rootDir>/__mocks__/file-mock.js`,\\n    \\\"~(.*)$\\\": \\\"<rootDir>/src/$1\\\",\\n  },\\n  testPathIgnorePatterns: [`node_modules`, `\\\\\\\\.cache`, `<rootDir>.*/public`],\\n  transformIgnorePatterns: [`node_modules/(?!(gatsby)/)`],\\n  globals: {\\n    __PATH_PREFIX__: ``,\\n  },\\n  testURL: `http://localhost`,\\n  setupFiles: [`<rootDir>/loadershim.js`],\\n  setupFilesAfterEnv: [\\\"<rootDir>/setup-test-env.js\\\"],\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// __mocks__/file-mock.js\\nmodule.exports = \\\"test-file-stub\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// __mocks__/gatsby.js\\nconst React = require(\\\"react\\\")\\nconst gatsby = jest.requireActual(\\\"gatsby\\\")\\n\\nmodule.exports = {\\n  ...gatsby,\\n  graphql: jest.fn(),\\n  Link: jest.fn().mockImplementation(\\n    // these props are invalid for an `a` tag\\n    ({\\n      activeClassName,\\n      activeStyle,\\n      getProps,\\n      innerRef,\\n      partiallyActive,\\n      ref,\\n      replace,\\n      to,\\n      ...rest\\n    }) =>\\n      React.createElement(\\\"a\\\", {\\n        ...rest,\\n        href: to,\\n      })\\n  ),\\n  StaticQuery: jest.fn(),\\n  useStaticQuery: jest.fn(),\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// tsconfig.json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"target\\\": \\\"esnext\\\",\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"lib\\\": [\\\"dom\\\", \\\"esnext\\\"],\\n    \\\"strict\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"isolatedModules\\\": false,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"noUnusedLocals\\\": false,\\n    \\\"allowJs\\\": true,\\n    \\\"baseUrl\\\": \\\".\\\",\\n    \\\"paths\\\": {\\n      \\\"~*\\\": [\\\"src/*\\\"],\\n      \\\"~components/*\\\": [\\\"src/components/*\\\"]\\n    }\\n  },\\n  \\\"exclude\\\": [\\\"node_modules\\\", \\\"public\\\", \\\".cache\\\", \\\"gatsby*\\\"]\\n}\\n\")), mdx(\"h3\", {\n    id: \"resources\"\n  }, mdx(\"a\", {\n    href: \"#resources\"\n  }, \"Useful Resources / Resources used\")), mdx(\"h4\", {\n    id: \"jest\"\n  }, mdx(\"a\", {\n    href: \"#jest\"\n  }, \"Jest\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://jestjs.io/\"\n  }), \"http://jestjs.io/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/unit-testing/\"\n  }), \"https://www.gatsbyjs.org/docs/unit-testing/\"))), mdx(\"h4\", {\n    id: \"rtl\"\n  }, mdx(\"a\", {\n    href: \"#rtl\"\n  }, \"React-Testing-Library\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/testing-react-components/\"\n  }), \"https://www.gatsbyjs.org/docs/testing-react-components/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/testing-css-in-js/\"\n  }), \"https://www.gatsbyjs.org/docs/testing-css-in-js/\"))), mdx(\"h4\", {\n    id: \"typescript\"\n  }, mdx(\"a\", {\n    href: \"#typescript\"\n  }, \"Typescript\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/\"\n  }), \"https://www.typescriptlang.org/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/packages/gatsby-plugin-typescript/\"\n  }), \"https://www.gatsbyjs.org/packages/gatsby-plugin-typescript/\"))), mdx(\"h4\", {\n    id: \"emotion\"\n  }, mdx(\"a\", {\n    href: \"#emotion\"\n  }, \"Emotion\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://emotion.sh/docs/introduction\"\n  }), \"https://emotion.sh/docs/introduction\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/emotion/\"\n  }), \"https://www.gatsbyjs.org/docs/emotion/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/emotion/\"\n  }), \"https://www.gatsbyjs.org/packages/gatsby-plugin-emotion/\"))), mdx(\"h4\", {\n    id: \"eslint\"\n  }, mdx(\"a\", {\n    href: \"#eslint\"\n  }, \"Eslint\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/README.md\"\n  }), \"https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/README.md\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/prettier/eslint-plugin-prettier\"\n  }), \"https://github.com/prettier/eslint-plugin-prettier\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://eslint.org/\"\n  }), \"https://eslint.org/\"))), mdx(\"p\", null, \"These are not all the links I used, there was a lot of googling and stackoverflow involved,\\nbut this is a pretty good starting point. Hope this helped! Good luck out there!\"), mdx(\"p\", null, \"Also, here\\u2019s the starter I created in the process of all this it has some additions not covered here.\"), mdx(\"h4\", {\n    id: \"starter-repo\"\n  }, mdx(\"a\", {\n    href: \"https://github.com/ParamagicDev/gatsby-starter-emotion-typescript-and-tests\"\n  }, \"Starter Repository\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}