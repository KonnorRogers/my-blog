{"componentChunkName":"component---src-templates-blog-post-js","path":"/misc/easy-png-optimization/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"a7463750-a509-5232-97c5-c1c45be5f830","excerpt":"First step...install  pngquant If you're on MacOS, simply do: The next step is to run pngquant on all your files you wish to optimize. For example, if I have myâ€¦","frontmatter":{"title":"PNG optimization from the command line","date":"May 04, 2021"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PNG optimization from the command line\",\n  \"date\": \"2021-05-04T09:43:02\",\n  \"description\": \"Optimize your pngs from the command line using pngquant and bash\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    id: \"installation\"\n  }, mdx(\"a\", {\n    href: \"#installation\"\n  }, \"Installation\")), mdx(\"p\", null, \"First step\\u2026install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pngquant.org/\"\n  }), \"pngquant\")), mdx(\"p\", null, \"If you\\u2019re on MacOS, simply do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"brew install pngquant\\n\")), mdx(\"h2\", {\n    id: \"commands\"\n  }, mdx(\"a\", {\n    href: \"#commands\"\n  }, \"Running pngquant\")), mdx(\"p\", null, \"The next step is to run pngquant on all your files you wish to optimize.\"), mdx(\"p\", null, \"For example, if I have my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".png\"), \" files in my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app/assets/images\"), \"\\ndirectory, I would do the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd app/assets/images\\n\\n# Grab all png's by recursing through current directory.\\n# Quality and speed can be adjusted to personal needs.\\n# this is what I use.\\npngquant ./**/*.png -quality 65-80 -speed 1\\n\")), mdx(\"p\", null, \"This will generate a bunch of files with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-fs8.png\"), \" suffix.\"), mdx(\"p\", null, \"Im sure theres a way to have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pngquant\"), \" overwrite your files, but this\\nlets me do an easy comparison of before / after sizes. Then I\\u2019ll rename\\nthe newly optimized files to overwrite their original file.\"), mdx(\"h2\", {\n    id: \"bash-command\"\n  }, mdx(\"a\", {\n    href: \"#bash-command\"\n  }, \"Bash Command\")), mdx(\"p\", null, \"This is the command I use to rewrite all my newly optimized images to\\noverwrite their parent. Use with caution :)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"for FILE in ./**/*-fs8.png; do original=${FILE%%-fs8.png}; mv \\\"$FILE\\\" \\\"$original.png\\\"; done\\n\")), mdx(\"h2\", {\n    id: \"pulling-it-all-together\"\n  }, mdx(\"a\", {\n    href: \"#pulling-it-all-together\"\n  }, \"Pulling it all together\")), mdx(\"p\", null, \"Quick easy command to do it all at once.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pngquant ./**/*.png -quality 65-80 -speed 1\\nfor FILE in ./**/*-fs8.png; do original=${FILE%%-fs8.png}; mv \\\"$FILE\\\" \\\"$original.png\\\"; done\\n\")), mdx(\"p\", null, \"By using this method, I\\nmanaged to get my ~2-4mb PNGs in a site I\\u2019m working on down to\\n~100-400kb.\"), mdx(\"p\", null, \"Thats it! May your png\\u2019s be forever optimized!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/misc/easy-png-optimization/","previous":{"id":"5efaa91c-5181-560d-9916-4d4c948c758a","fields":{"slug":"/rails/how-do-default-url-options-work/"},"frontmatter":{"title":"How do default_url_options work in Rails?"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How do default_url_options work in Rails?\",\n  \"date\": \"2021-04-03T20:07:42\",\n  \"description\": \"A quick down and dirty guide to the totally bizarre default_url_options API in Rails.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    id: \"default-url-options\"\n  }, mdx(\"a\", {\n    href: \"#default-url-options\"\n  }, \"`default_url_options`\")), mdx(\"p\", null, \"I\\u2019m sure you\\u2019ve all been bitten by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_url_options\"), \" API in\\nRails. You either couldnt get it to work, or just moved on. Or, you just\\nthrew everything and the wall and saw what stuck.\"), mdx(\"h2\", {\n    id: \"how-it-works\"\n  }, mdx(\"a\", {\n    href: \"#how-it-works\"\n  }, \"How it works\")), mdx(\"p\", null, \"Currently, there are 4 different config options for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_url_options\"), \" as far as I can tell.\\nThis doesnt include defining \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_url_options\"), \" as a method inside of your routes file, controller, or mailer.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rb\"\n  }), \"Rails.application.default_url_options\\nRails.application.routes.default_url_options\\n\\nRails.application.config.action_controller.default_url_options\\nRails.application.config.action_mailer.default_url_options\\n\")), mdx(\"h2\", {\n    id: \"whats-the-difference\"\n  }, mdx(\"a\", {\n    href: \"#whats-the-difference\"\n  }, \"So? Whats the difference?\")), mdx(\"p\", null, \"Well the first two options are the same thing. They reference the same variable.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"bundle exec rails console\\n\\nRails.application.default_url_options\\n# => {}\\n\\nRails.application.routes.default_url_options\\n# => {}\\n\")), mdx(\"p\", null, \"When one is updated, the other is updated.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"bundle exec rails console\\n\\nRails.application.default_url_options[:host] = \\\"0.0.0.0\\\"\\n# => {host: \\\"0.0.0.0\\\"}\\n\\nRails.application.routes.default_url_options\\n# => {:host => \\\"0.0.0.0\\\"}\\n\\nRails.application.routes.default_url_options[:host] = \\\"1.2.3.4\\\"\\n# => {:host => \\\"1.2.3.4\\\"}\\n\\nRails.application.default_url_options\\n# => {:host => \\\"1.2.3.4\\\"}\\n\")), mdx(\"p\", null, \"So, to recap, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rails.application.default_url_options\"), \" is the same as\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rails.application.routes.default_url_options\")), mdx(\"p\", null, \"By default, they are both hashes that can be modified in place. Easy.\"), mdx(\"h2\", {\n    id: \"action-controller-mailbox\"\n  }, mdx(\"a\", {\n    href: \"#action-controller-mailbox\"\n  }, \"Action Controller / Action Mailbox\")), mdx(\"p\", null, \"Alright heres where things get weird.\"), mdx(\"p\", null, \"Lets just open up a console and see what happens.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"bundle exec rails console\\n\\nRails.application.config.action_mailer\\n# => ActiveSupport::OrderedOptions\\n\\nRails.application.config.action_controller\\n# => ActiveSupport::OrderedOptions\\n\\nRails.application.config.action_mailer.default_url_options\\n# => nil\\n\\nRails.application.config.action_controller.default_url_options\\n# => nil\\n\")), mdx(\"p\", null, \"So by default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rails.application.config.action_mailer\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rails.application.config.action_controller\"), \" return nil if the\\nenvironments havent been set for them. Okay\\u2026cool.\"), mdx(\"p\", null, \"The reason is that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActiveSupport::OrderedOptions\"), \" is essentially a\\nmixed hash / instance variable configuration object. This means if the value isnt set, itll\\nreturn nil.\"), mdx(\"p\", null, \"When setting your config, you want to give\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action_(mailer|controller).default_url_options\"), \" a full hash if it hasnt\\nbeen set. If it has been set already, you can modify it in place like a\\nnormal Hash.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"bundle exec rails console\\n\\nRails.application.config.action_controller.default_url_options = {host:\\n\\\"0.0.0.0\\\", port: 4569}\\n# => {:host => \\\"0.0.0.0\\\", :port => 4569}\\n\\nRails.application.config.action_mailer.default_url_options = {}\\nRails.application.config.action_mailer.default_url_options[:host] =\\n\\\"0.0.0.0\\\"\\n# => {:host => \\\"0.0.0.0\\\"}\\n\")), mdx(\"h2\", {\n    id: \"bring-it-around-town\"\n  }, mdx(\"a\", {\n    href: \"#bring-it-around-town\"\n  }, \"Bringing it all together\")), mdx(\"p\", null, \"Alright, now for the meat and potatoes now that we\\u2019ve gotten definitions\\nout of the way.\"), mdx(\"p\", null, \"Setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rails.application.default_url_options\"), \" will only affect calls\\nmade from the Rails router.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"bundle exec rails console\\n\\nRails.application.default_url_options = {host: \\\"0.0.0.0\\\"}\\nRails.application.routes.url_helpers.url_for(User.first)\\n# => http://0.0.0.0/users/1\\n\")), mdx(\"p\", null, \"However, if we were to go into our actual running app and click on a\\nbutton that uses: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"users_url(User.first)\"), \" the hostname will not be what\\nwe set. The same goes for out \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActionMailer\"), \", the hostname wont be set\\nproperly. To remedy this, we have to set those as well.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rb\"\n  }), \"Rails.application.config.action_controller = {host: \\\"0.0.0.0\\\"}\\nRails.application.config.action_mailer = {host: \\\"0.0.0.0\\\"}\\n\")), mdx(\"p\", null, \"Now, your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action_controller\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action_mailer\"), \" will both have the\\nnew hostname.\"), mdx(\"p\", null, \"To put it in simpler terms, heres roughly what were doing:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rails.application.default_url_options\"), \" affects the Rails router.\\nYou will use this when interacting directly with the router.\\nIE: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url_for()\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rails.application.config.action_(mailer|controller)\"), \" affects the actual\\nbrowser route generations when you use either a Controller or\\nMailer.\\nIE: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"users_url(Path.first)\")), mdx(\"h2\", {\n    id: \"links\"\n  }, mdx(\"a\", {\n    href: \"#links\"\n  }, \"Links\")), mdx(\"p\", null, \"Honestly, I couldnt find anything about this in the Rails docs. I found\\na few open / closed issues like this one:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rspec/rspec-rails/issues/1275\"\n  }), \"https://github.com/rspec/rspec-rails/issues/1275\")), mdx(\"p\", null, \"But for the most part this was all done in the Rails console.\"), mdx(\"p\", null, \"I\\u2019m sure I may have gotten something wrong or missed something. But,\\nthis is my understand of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_url_options\"), \" configuration. Good\\nluck, and hopefully you dont have to waste as much time as I did hunting\\ndown bugs with this.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":null}}}