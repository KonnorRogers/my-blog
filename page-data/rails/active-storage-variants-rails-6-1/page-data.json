{"componentChunkName":"component---src-templates-blog-post-js","path":"/rails/active-storage-variants-rails-6-1/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"6d93ea9c-b4fb-5338-b406-f6c3dbf4ff12","excerpt":"The Error! Upgrading to Rails 6.1 and encountering the following error? ActiveRecord::NotNullViolation (PG::NotNullViolation: ERROR: null value\nin columnâ€¦","frontmatter":{"title":"Active Storage Variants with Rails 6.1","date":"February 24, 2021"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Active Storage Variants with Rails 6.1\",\n  \"date\": \"2021-02-24T14:12:29\",\n  \"description\": \"receiving the following error with ActiveStorage Variants with Rails 6.1? ActiveRecord::NotNullViolation (PG::NotNullViolation: ERROR:  null value in column 'record_id' of relation 'active_storage_attachments' violates not-null constraint) Let me help!\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"The Error!\"), mdx(\"p\", null, \"Upgrading to Rails 6.1 and encountering the following error?\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"ActiveRecord::NotNullViolation (PG::NotNullViolation: ERROR: null value\\nin column \\u201Crecord_id\\u201D of relation \\u201Cactive_storage_attachments\\u201D violates\\nnot-null constraint)\")), mdx(\"p\", null, \"Let me save you a couple hours!\"), mdx(\"p\", null, \"Lets back up a step. Are you using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t.uuid :record_id\"), \" (is your\\nrecord_id for ActiveStorage a uuid?)\"), mdx(\"p\", null, \"If you\\u2019re not sure, you can check your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db/schema.rb\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rb\",\n    \"metastring\": \"title=db/schema.rb\",\n    \"title\": \"db/schema.rb\"\n  }), \"  create_table \\\"active_storage_attachments\\\", force: :cascade do |t|\\n    # ...\\n    t.uuid \\\"record_id\\\", null: false\\n    # ...\\n  end\\n\")), mdx(\"p\", null, \"If yes, keep reading. If not, sorry, this wont be much help.\"), mdx(\"h2\", null, \"Using UUID for record_id, cool I was too\"), mdx(\"p\", null, \"Alright now that we\\u2019ve located the source how do we fix it?\"), mdx(\"p\", null, \"When you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rails app:update\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rails active_storage:update\"), \" it will\\ncreate 2 migrations for you. In particular we want to look at the one\\ngenerating the the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"active_storage_variant_records\"), \". The file should look\\nsomething like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rb\",\n    \"metastring\": \"title=db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\",\n    \"title\": \"db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\"\n  }), \"class CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]\\n  def change\\n    create_table :active_storage_variant_records do |t|\\n      t.belongs_to :blob, null: false, index: false\\n      t.string :variation_digest, null: false\\n\\n      t.index %i[ blob_id variation_digest ], name: \\\"index_active_storage_variant_records_uniqueness\\\", unique: true\\n      t.foreign_key :active_storage_blobs, column: :blob_id\\n    end\\n  end\\nend\\n\")), mdx(\"p\", null, \"From here the fix is just to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"uuid\"), \" constraint for the id like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\",\n    \"title\": \"db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\"\n  }), \"class CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]\\n  def change\\n-    create_table :active_storage_variant_records do |t|\\n+    create_table :active_storage_variant_records, id: :uuid do |t|\\n     # ...\\n  end\\nend\\n\")), mdx(\"p\", null, \"Now rollback your migrations, rerun your migrations, and onward to\\nvictory!!\"), mdx(\"h2\", null, \"Links\"), mdx(\"h3\", null, \"Active Storage docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://edgeguides.rubyonrails.org/active_storage_overview.html#setup\"\n  }), \"https://edgeguides.rubyonrails.org/active_storage_overview.html#setup\"))), mdx(\"h3\", null, \"Rails 6.1 migration docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Release notes:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://edgeguides.rubyonrails.org/6_1_release_notes.html\"\n  }), \"https://edgeguides.rubyonrails.org/6_1_release_notes.html\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Upgrade guide: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://guides.rubyonrails.org/upgrading_ruby_on_rails.html\"\n  }), \"https://guides.rubyonrails.org/upgrading_ruby_on_rails.html\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/rails/active-storage-variants-rails-6-1/","previous":{"id":"349d4e47-476d-53fa-9ba9-295fb58c331d","fields":{"slug":"/misc/bundlers-and-beyond/"},"frontmatter":{"title":"Webpack, Rollup, Parcel, Snowpack, and beyond"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Webpack, Rollup, Parcel, Snowpack, and beyond\",\n  \"date\": \"2020-09-29T15:32:30\",\n  \"description\": \"A brief comparison between popular frontend bundlers. I will walk through my thoughts and feelings related to each bundler\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    id: \"is-not\"\n  }, mdx(\"a\", {\n    href: \"#is-not\"\n  }, \"What this post is not\")), mdx(\"p\", null, \"This post will not get into bundle sizes, compilation times, and the\\nnitty gritty of each bundler. But why? I wanna see the numbers!! The\\nissue is each bundler uses different loaders based on the file type. Not\\nall loaders are created equally and frankly, it would require a lot of\\neffort to go through each individual loader for each bundler and create\\nbenchmarks. Instead, this post is a brief high-level overview of\\ndifferent frontend bundlers and the general problems they try to solve.\"), mdx(\"h2\", {\n    id: \"history\"\n  }, mdx(\"a\", {\n    href: \"#history\"\n  }, \"History\")), mdx(\"p\", null, \"Why do we need bundlers? Browser-based Javascript prior to ES6\\n(introduced in 2015) had no way of\\nimporting a file natively. Instead you either chained \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tags,\\nor you had one massive Javascript file you would ship to the browser.\\nFor example you may have the following in your HTML.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<script src=\\\"https://code.jquery.com/jquery-3.5.1.min.js\\\"></script>\\n<script src=\\\"/dist/my-awesome-script.js\\\"></script>\\n\")), mdx(\"p\", null, \"Now we get into the issue of, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my-awesome-script.js\"), \" depends on\\njQuery to load, what happens if loading the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jQuery\"), \" script fails? Is\\nmy site now broken? You can quickly see why this is an issue. It gets\\nworse when you also realize that you cant break up your Javascript files\\ninto smaller more manageable files.\"), mdx(\"h2\", {\n    id: \"solution\"\n  }, mdx(\"a\", {\n    href: \"#solution\"\n  }, \"The solution\")), mdx(\"p\", null, \"As far as I can tell \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/\"\n  }), \"Webpack\"), \" was the first\\nfrontend bundler on the scene. It appeared in 2015, around the same time as\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://browserify.org/\"\n  }), \"Browserify\"), \". Webpack\\u2019s goal was simple, allow\\nfor assets and javascript to be made more atomic yet still bundled\\nnicely for production. Since Webpack was released there have been many\\nmore frontend bundlers released IE: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://parceljs.org/\"\n  }), \"Parcel\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rollupjs.org/guide/en/\"\n  }), \"Rollup\"), \", and most recently there have\\nbeen a number of ES Module based \\u201Cbundlers\\u201D (still not sure bundler is\\nthe right term) released such as\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.snowpack.dev/\"\n  }), \"Snowpack\"), \" and\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vitejs/vite\"\n  }), \"Vite\"), \".\"), mdx(\"h2\", {\n    id: \"bundlers\"\n  }, mdx(\"a\", {\n    href: \"#bundlers\"\n  }, \"Bundlers\")), mdx(\"p\", null, \"There are currently 3 major traditional frontend bundlers that most\\npeople talk about. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org\"\n  }), \"Webpack\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rollupks.org\"\n  }), \"Rollup\"), \", and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://parceljs.org\"\n  }), \"Parcel\"), \".\"), mdx(\"h3\", {\n    id: \"choosing\"\n  }, mdx(\"a\", {\n    href: \"#choosing\"\n  }, \"Choosing the right one for you\")), mdx(\"h4\", {\n    id: \"webpack\"\n  }, mdx(\"a\", {\n    href: \"#webpack\"\n  }, \"Webpack\")), mdx(\"p\", null, \"\\u201CWebpack is for websites\\u201D, Webpack is the oldest of the 3 bundlers.\\nWebpack, in my opinion, is also the most complicated to setup of the 3\\nbundlers. This isn\\u2019t a knock against Webpack, it\\u2019s a super powerful tool,\\nbut it is also quite complex. The reason people say this is that historically\\nWebpack was used for websites, but theres no reason you can\\u2019t use it for\\nan NPM package.\"), mdx(\"h4\", {\n    id: \"rollup\"\n  }, mdx(\"a\", {\n    href: \"#rollup\"\n  }, \"Rollup\")), mdx(\"p\", null, \"\\u201CRollup is for libraries\\u201D, Rollup is significantly more minimal than\\nWebpack, Rollup doesnt even include a dev server! Rollup was released\\nshortly after Webpack, based on my search around 2016. When it was first\\nreleased it had minimal support for assets such as CSS, images, etc.\\nHowever, nowadays Rollup is just as full featured as Webpack. There\\u2019s no\\nreason you can\\u2019t use it for websites.\"), mdx(\"h4\", {\n    id: \"parcel\"\n  }, mdx(\"a\", {\n    href: \"#parcel\"\n  }, \"Parcel\")), mdx(\"p\", null, \"Parcel is the newest of the 3 appearing at the beginning of 2018. Parcel\\nstates it is a \\u201CBlazing fast, zero configuration web application\\nbundler\\u201D. Now I have the least experience with Parcel, however, my\\nexperience with Parcel has been nothing short of awesome. It holds true\\nto its promise. It even supports both HTML and JS entrypoints. A lot of\\nthe issues people had with Parcel initially when it was first released\\nwas the size of its bundles. They have made great strides to be on par\\nwith Rollup and Webpack.\"), mdx(\"h3\", {\n    id: \"ok\"\n  }, mdx(\"a\", {\n    href: \"#ok\"\n  }, \"OK...So what is right for me?\")), mdx(\"p\", null, \"Try all 3, see which one you like best. They honestly all accomplish the\\nsame task and can do roughly the same thing. As of Webpack 4, ESM is\\nnatively supported. Assets are fully supported by Rollup. Parcel bundle\\nsizes are significantly smaller than they used to be. Seriously, just\\ntry them. The only caveat is that as far as I can tell Parcel is only\\nfor web apps and does not support bundling for NPM.\"), mdx(\"h2\", {\n    id: \"new-stuff\"\n  }, mdx(\"a\", {\n    href: \"#new-stuff\"\n  }, \"A new challenger approaches\")), mdx(\"p\", null, \"ESM-based frontend \\u201Cbundlers\\u2026compilers?\\u201D, I don\\u2019t know what to call\\nthem\\u2026  are the cool new thing in the web dev world. They independently\\nbuild each file in parallel getting rid of the traditional compilation\\nstep that people complain about with traditional bundlers.\"), mdx(\"p\", null, \"The current issue with compilation is it can be quite slow, especially\\nwhen you stop to consider changing 1 file can trigger a rebuild of your\\nentire bundle including babel transforms, postcss builds, and everything\\nin between.\"), mdx(\"p\", null, \"The new ESM-based build tools like Snowpack and Vite leverage the ES6\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import / export\"), \" syntax to be able to provide blazing fast unbundled\\ndevelopment environments to increase productivity. This means the\\ncompilation step is gone! No more waiting for bundles to regenerate.\"), mdx(\"p\", null, \"Everything is independent. There is no massive recompilation on a single\\nfile change. It also more closely mimics a browser environment which all\\nevergreen browsers (Chrome, Edge, Firefox) fully support ESM-based\\nimport / export syntax. And with the advent of HTTP/2 protocols, the\\nissue of multiple waterfall network requests may soon be a thing of the\\npast for assets.\"), mdx(\"p\", null, \"Right now adoption is quite fast even though ESM-based compilers are fairly new.\\nThey have gained a significant amount of traction in the web\\ndevelopment community.\"), mdx(\"p\", null, \"In fact, I\\u2019m currently working on\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/paramagicdev/snowpacker\"\n  }), \"Snowpacker\"), \", a Ruby on\\nRails integration with Snowpack to bring unbundled development\\nenvironments to the Rails world. The project is not quite ready for\\nrelease yet, but significant strides have been made and a release should\\nbe on the horizon.\"), mdx(\"h2\", {\n    id: \"summary\"\n  }, mdx(\"a\", {\n    href: \"#summary\"\n  }, \"Summary\")), mdx(\"p\", null, \"Parcel, Webpack, and Rollup are all great. Use whichever one you want.\\nHistorically Webpack was for websites due to its full feature set,\\nRollup was for libraries due to lack of asset handling and minimalism,\\nand Parcel was for prototypes due to large bundle sizes, but I feel all\\n3 statements above are no longer true due to vast improvements by all 3\\nlibraries, use whatever you are most comfortable with.\"), mdx(\"p\", null, \"ESM-based build tools like Vite and Snowpack are showing great promise\\nand appear to be the future of the frontend.\"), mdx(\"h2\", {\n    id: \"links\"\n  }, mdx(\"a\", {\n    href: \"#links\"\n  }, \"Links\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/\"\n  }), \"Webpack\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rollupjs.org/guide/en/\"\n  }), \"Rollup\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://parceljs.org/\"\n  }), \"Parcel\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vitejs/vite\"\n  }), \"Vite\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.snowpack.dev/\"\n  }), \"Snowpack\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://githubm.com/paramagicdev/snowpacker\"\n  }), \"Snowpacker\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":null}}}