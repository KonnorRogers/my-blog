{"componentChunkName":"component---src-templates-blog-post-js","path":"/rails/working-with-rails-timezones/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":null},"pageContext":{"slug":"/rails/working-with-rails-timezones/","previous":{"id":"6d93ea9c-b4fb-5338-b406-f6c3dbf4ff12","fields":{"slug":"/rails/active-storage-variants-rails-6-1/"},"frontmatter":{"title":"Active Storage Variants with Rails 6.1"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Active Storage Variants with Rails 6.1\",\n  \"date\": \"2021-02-24T14:12:29\",\n  \"description\": \"receiving the following error with ActiveStorage Variants with Rails 6.1? ActiveRecord::NotNullViolation (PG::NotNullViolation: ERROR:  null value in column 'record_id' of relation 'active_storage_attachments' violates not-null constraint) Let me help!\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    id: \"error\"\n  }, mdx(\"a\", {\n    href: \"#error\"\n  }, \"The Error!\")), mdx(\"p\", null, \"Upgrading to Rails 6.1 and encountering the following error?\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"ActiveRecord::NotNullViolation (PG::NotNullViolation: ERROR: null value\\nin column \\u201Crecord_id\\u201D of relation \\u201Cactive_storage_attachments\\u201D violates\\nnot-null constraint)\")), mdx(\"p\", null, \"Let me save you a couple hours!\"), mdx(\"p\", null, \"Lets back up a step. Are you using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t.uuid :record_id\"), \" (is your\\nrecord_id for ActiveStorage a uuid?)\"), mdx(\"p\", null, \"If you\\u2019re not sure, you can check your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db/schema.rb\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rb\",\n    \"metastring\": \"title=db/schema.rb\",\n    \"title\": \"db/schema.rb\"\n  }), \"  create_table \\\"active_storage_attachments\\\", force: :cascade do |t|\\n    # ...\\n    t.uuid \\\"record_id\\\", null: false\\n    # ...\\n  end\\n\")), mdx(\"p\", null, \"If yes, keep reading. If not, sorry, this wont be much help.\"), mdx(\"h2\", {\n    id: \"using-uuid-me-too\"\n  }, mdx(\"a\", {\n    href: \"#using-uuid-me-too\"\n  }, \"Using UUID for record_id, cool I was too\")), mdx(\"p\", null, \"Alright now that we\\u2019ve located the source how do we fix it?\"), mdx(\"p\", null, \"When you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rails app:update\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rails active_storage:update\"), \" it will\\ncreate 2 migrations for you. In particular we want to look at the one\\ngenerating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"active_storage_variant_records\"), \" table. The file should look\\nsomething like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rb\",\n    \"metastring\": \"title=db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\",\n    \"title\": \"db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\"\n  }), \"class CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]\\n  def change\\n    create_table :active_storage_variant_records do |t|\\n      t.belongs_to :blob, null: false, index: false\\n      t.string :variation_digest, null: false\\n\\n      t.index %i[ blob_id variation_digest ], name: \\\"index_active_storage_variant_records_uniqueness\\\", unique: true\\n      t.foreign_key :active_storage_blobs, column: :blob_id\\n    end\\n  end\\nend\\n\")), mdx(\"p\", null, \"From here the fix is just to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"uuid\"), \" constraint for the id like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\",\n    \"title\": \"db/migrate/xxxx_create_active_storage_variant_records.active_storage.rb\"\n  }), \"class CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]\\n  def change\\n-    create_table :active_storage_variant_records do |t|\\n+    create_table :active_storage_variant_records, id: :uuid do |t|\\n     # ...\\n  end\\nend\\n\")), mdx(\"p\", null, \"Now rollback your migrations, rerun your migrations, and onward to\\nvictory!!\"), mdx(\"h2\", {\n    id: \"links\"\n  }, mdx(\"a\", {\n    href: \"#links\"\n  }, \"Links\")), mdx(\"h3\", {\n    id: \"active-storage-docs\"\n  }, mdx(\"a\", {\n    href: \"#active-storage-docs\"\n  }, \"Active Storage docs\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://edgeguides.rubyonrails.org/active_storage_overview.html#setup\"\n  }), \"https://edgeguides.rubyonrails.org/active_storage_overview.html#setup\"))), mdx(\"h3\", {\n    id: \"rails-6-1-migration\"\n  }, mdx(\"a\", {\n    href: \"#rails-6-1-migration\"\n  }, \"Rails 6.1 migration docs\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Release notes:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://edgeguides.rubyonrails.org/6_1_release_notes.html\"\n  }), \"https://edgeguides.rubyonrails.org/6_1_release_notes.html\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Upgrade guide: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://guides.rubyonrails.org/upgrading_ruby_on_rails.html\"\n  }), \"https://guides.rubyonrails.org/upgrading_ruby_on_rails.html\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":null}}}