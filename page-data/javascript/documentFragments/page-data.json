{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/documentFragments/","webpackCompilationHash":"bc32d8919ac4f081d855","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"markdownRemark":{"id":"a1832d47-84cf-551b-a0aa-08e52cc1bf8e","excerpt":"DocumentFragment - Appending multiple children to one or multiple elements Relevant Links DocumentFragment API via MDN\nRelevant StackOverflow answer\nMy Github…","html":"<h2>DocumentFragment - Appending multiple children to one or multiple elements</h2>\n<h3>Relevant Links</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\">DocumentFragment API via MDN</a>\n<a href=\"https://stackoverflow.com/a/36798254\">Relevant StackOverflow answer</a>\n<a href=\"https://github.com/ParamagicDev/libraryBookJS\">My Github repository which uses DocumentFragment API</a></p>\n<h3>What is the DocumentFragment API?</h3>\n<p>Below is the description from MDN:<br></p>\n<blockquote>\n<p>The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn’t part of the active document tree structure, changes made to the fragment don’t affect the document, cause reflow, or incur any performance impact that can occur when changes are made.</p>\n</blockquote>\n<p><i>Key Takeaway:</i><br>\nThe key difference is that because the document fragment isn’t part of the active document tree structure, changes made to the fragment don’t affect the document, cause reflow, or incur any performance impact that can occur when changes are made.<br></p>\n<p>This means the DocumentFragment API is the go to way to append multiple elements\nthat do not need to be immediately rendered to the page.</p>\n<h3>Using the DocumentFragment API</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">const docFrag <span class=\"token operator\">=</span> new DocumentFragment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thats all it takes to make a document fragment!</p>\n<h3>Basic usage</h3>\n<h4>Typical way of appending children</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">const div1 <span class=\"token operator\">=</span> document.createElement<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconst div2 <span class=\"token operator\">=</span> document.createElement<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst div3 <span class=\"token operator\">=</span> document.createElement<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument.body.appendChild<span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument.body.appendChild<span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument.body.appendChild<span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Everytime you append a child to a rendered portion of the browser, you are rerendering the page with each <code class=\"language-text\">appendChild()</code> call. Lets look at how we could recreate the same functionality without causing performance issues.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// Create a docFrag to <span class=\"token function\">add</span> elements to\nconst docFrag <span class=\"token operator\">=</span> new DocumentFragment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconst div1 <span class=\"token operator\">=</span> document.createElement<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst div2 <span class=\"token operator\">=</span> document.createElement<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst div3 <span class=\"token operator\">=</span> document.createElement<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocFrag.appendChild<span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocFrag.appendChild<span class=\"token punctuation\">(</span>div2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocFrag.appendChild<span class=\"token punctuation\">(</span>div3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument.body.appendChild<span class=\"token punctuation\">(</span>docFrag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It requires 2 simple extra lines of code but will significantly change\na users browser experience. Especially if you are doing something like\nserver side rendering where you create many HTML elements via JS.\nThis method as far as I’m aware is implemented by the major front-end frameworks like React, Vue, Angular etc.</p>\n<h4>Closing thoughts</h4>\n<p>I hope you found this useful and next time you go to append some children\nyou reach for DocumentFragment. Its a simple and easy to understand API with so\nmany benefits. I was very happy with how approachable it was and it was\nvery easy to see the benefits of the API.</p>","frontmatter":{"title":"JS - Appending multiple children to an element","date":"September 29, 2019","description":"After searching and scouring the internet for the best way to append multiple children within the DOM at the same time, I came across the DocumentFragment API"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/documentFragments/","previous":{"fields":{"slug":"/javascript/introduction/"},"frontmatter":{"title":"JS - Introduction"}},"next":{"fields":{"slug":"/javascript/usingJestWithImportAndExport/"},"frontmatter":{"title":"JS - Using Jest with Import and Export statements"}}}}}