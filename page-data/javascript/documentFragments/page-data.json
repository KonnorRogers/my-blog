{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/documentFragments/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"853540aa-bfd3-5873-9235-eda103776a6d","excerpt":"DocumentFragment - Appending multiple children to one or multiple elements Relevant Links DocumentFragment API via MDN \n Relevant StackOverflow answer \n Myâ€¦","frontmatter":{"title":"JS - Appending multiple children to an element","date":"September 29, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS - Appending multiple children to an element\",\n  \"date\": \"2019-09-29T17:34:12\",\n  \"description\": \"After searching and scouring the internet for the best way to append multiple children within the DOM at the same time, I came across the DocumentFragment API\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"DocumentFragment - Appending multiple children to one or multiple elements\"), mdx(\"h3\", null, \"Relevant Links\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\"\n  }), \"DocumentFragment API via MDN\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/a/36798254\"\n  }), \"Relevant StackOverflow answer\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/libraryBookJS\"\n  }), \"My Github repository which uses DocumentFragment API\")), mdx(\"h3\", null, \"What is the DocumentFragment API?\"), mdx(\"p\", null, \"Below is the description from MDN:\", mdx(\"br\", null)), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn\\u2019t part of the active document tree structure, changes made to the fragment don\\u2019t affect the document, cause reflow, or incur any performance impact that can occur when changes are made.\")), mdx(\"i\", null, \"Key Takeaway:\"), mdx(\"br\", null), \"The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.\", mdx(\"br\", null), mdx(\"p\", null, \"This means the DocumentFragment API is the go to way to append multiple elements\\nthat do not need to be immediately rendered to the page.\"), mdx(\"h3\", null, \"Using the DocumentFragment API\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"const docFrag = new DocumentFragment();\\n\")), mdx(\"p\", null, \"Thats all it takes to make a document fragment!\"), mdx(\"h3\", null, \"Basic usage\"), mdx(\"h4\", null, \"Typical way of appending children\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"const div1 = document.createElement('div');\\n\\nconst div2 = document.createElement('div');\\nconst div3 = document.createElement('div');\\n\\ndocument.body.appendChild(div);\\ndocument.body.appendChild(p1);\\ndocument.body.appendChild(p2);\\n\")), mdx(\"p\", null, \"Everytime you append a child to a rendered portion of the browser, you are rerendering the page with each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"appendChild()\"), \" call. Lets look at how we could recreate the same functionality without causing performance issues.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"// Create a docFrag to add elements to\\nconst docFrag = new DocumentFragment();\\n\\nconst div1 = document.createElement('div');\\nconst div2 = document.createElement('div');\\nconst div3 = document.createElement('div');\\n\\ndocFrag.appendChild(div1);\\ndocFrag.appendChild(div2);\\ndocFrag.appendChild(div3);\\n\\ndocument.body.appendChild(docFrag);\\n\")), mdx(\"p\", null, \"It requires 2 simple extra lines of code but will significantly change\\na users browser experience. Especially if you are doing something like\\nserver side rendering where you create many HTML elements via JS.\\nThis method as far as I\\u2019m aware is implemented by the major front-end frameworks like React, Vue, Angular etc.\"), mdx(\"h4\", null, \"Closing thoughts\"), mdx(\"p\", null, \"I hope you found this useful and next time you go to append some children\\nyou reach for DocumentFragment. Its a simple and easy to understand API with so\\nmany benefits. I was very happy with how approachable it was and it was\\nvery easy to see the benefits of the API.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/javascript/documentFragments/","previous":{"id":"0bf04783-a44e-5a9c-aab6-f1cdc1425c53","fields":{"slug":"/javascript/introduction/"},"frontmatter":{"title":"JS - Introduction"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS - Introduction\",\n  \"date\": \"2019-09-29T17:31:23\",\n  \"description\": \"A basic introduction as to what this series will be about\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Purpose\"), mdx(\"p\", null, \"This is a collection of various things I have found while doing various projects\\nusing Javascript. This is not meant to be read in any order, rather its just random\\ntidbits and items I have come across while using Javascript.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"57eb847c-9288-5704-b054-d2ffeb5806b9","fields":{"slug":"/javascript/usingJestWithImportAndExport/"},"frontmatter":{"title":"JS - Using Jest with Import and Export statements"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS - Using Jest with Import and Export statements\",\n  \"date\": \"2019-10-02T18:20:55\",\n  \"description\": \"Using jest with import and export statements is not easy. I will detail how to use the ES6 based syntax in the following post.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Purpose\"), mdx(\"p\", null, \"When using new tools I like to create my own documentation of setup.\", mdx(\"br\", null), \"\\nIn this case we will be looking at: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io\"\n  }), \"Jest\"), mdx(\"br\", null)), mdx(\"p\", null, \"Jest is a simple testing framework for javascript that uses\\nvery similar syntax to RSpec. In fact, it even supports the \", \"*\", \".spec.js file extension.\\nI however, like to use the \", \"*\", \".test.js file, but you are free to do as you please.\"), mdx(\"h2\", null, \"Quick Start\"), mdx(\"p\", null, \"At the time of writing this, I am using Jest 24.9, Babel 7.6, and ESLint 6.5\"), mdx(\"p\", null, \"ESLint is not necessary for this Jest to properly use the import / export syntax,\\nhowever, I like it for using prettier within my work environment.\"), mdx(\"h3\", null, \"EDIT\"), mdx(\"p\", null, \"I realized I never included the use of Webpack for bundling everything! I added the command below and my webpack config\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# If its a new project\\nnpm init\\n\\n# install eslint, jest, and babel packages\\nnpm install --save-dev webpack webpack-cli webpack-dev-server jest babel-jest babel-loader @babel/core @babel/preset-env regenerator-runtime eslint eslint-plugin-jest\\n\\n# create a config file for jest and eslint\\nnpx jest --init\\nnpx eslint --init\\n\")), mdx(\"p\", null, \"Then modify eslint and jest config files accordingly.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS/blob/master/webpack.config.js\"\n  }), \"My webpack config\"), \"\\nRefer to webpack documentation for further instruction. I also have a previous writeup.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://paramagicdev.github.io/my-blog/javascript/webpackDevServerLiveReloading/\"\n  }), \"https://paramagicdev.github.io/my-blog/javascript/webpackDevServerLiveReloading/\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS/blob/master/jest.config.js\"\n  }), \"My Jest Config\"), \"\\nI just use the default from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx jest --init\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS/blob/master/.eslintrc.js\"\n  }), \"My ESLint Config\")), mdx(\"p\", null, \"I simply used the default from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx eslint --init\"), \" and chose the appropriate options for the project.\\nI added the following lines for use with Jest.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"module.exports = {\\n  // ...\\n  env: {\\n    \\\"jest/globals\\\": true,\\n  },\\n  extends: [\\\"plugins:jest/recommended\\\", \\\"eslint:recommended\\\"],\\n  plugins: [\\\"jest\\\"],\\n  // ...\\n}\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS/blob/master/babel.config.js\"\n  }), \"My Babel Config\"), \"\\nThere appears to be no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx babel --init\"), \" so you must generate your own config file.\\nI generated my using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/docs/en/getting-started#using-babel\"\n  }), \"Docs\"), \"\\nand it worked right out of the box.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// babel.config.js\\nmodule.exports = {\\n  presets: [\\n    [\\n      \\\"@babel/preset-env\\\",\\n      {\\n        targets: {\\n          node: \\\"current\\\",\\n        },\\n      },\\n    ],\\n  ],\\n}\\n\")), mdx(\"p\", null, \"Now, all your tests will go into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__/\"), \" directory and you can name them\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.test.js\"), \" and you\\u2019re ready to rock and roll.\"), mdx(\"h2\", null, \"The longer, more in depth guide\"), mdx(\"p\", null, \"As with all projects using javascript, start with creating your package.json.\", mdx(\"br\", null)), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm init\\n\")), mdx(\"p\", null, \"After filling in the appropriate fields, you will have a package.json and package-lock.json\\nready to go. Alternatively you can use yarn, and I actually prefer yarn for many reasons\\nthat I will not get into in this guide.\"), mdx(\"h3\", null, \"Installing Jest\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/docs/en/22.x/getting-started.html\"\n  }), \"Jest Getting Started\"), mdx(\"br\", null)), mdx(\"p\", null, \"Jest\\u2019s documentation is quite good. And I quite enjoyed reading it, I recommend you check it out\", mdx(\"br\", null)), mdx(\"p\", null, \"To start run the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev jest\\n\")), mdx(\"p\", null, \"That\\u2019s it! You\\u2019re done! Technically this is all you need to run Jest. However,\\nif you\\u2019re using a non-Node based project IE: browser based project using ES6 imports,\\nJest will quickly get in the way.\"), mdx(\"p\", null, \"Also, as a quick note, if you go into your jest config, the file it searches for tests\\nis the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__\"), \" directory. The getting started pages doesn\\u2019t mention this, but\\nif you\\u2019re like me, you like to use a seperate tests directory.\"), mdx(\"h3\", null, \"Installing Babel\"), mdx(\"p\", null, \"Jest uses the Node syntax of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module.exports = <variable>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require('<file>')\"), \",\\nit will not support the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \" statements of ES6.\"), mdx(\"p\", null, \"Luckily, people way smarter than me already thought of this,\\nso there is a babel transpiler for this.\"), mdx(\"p\", null, \"To use this transpiler, you can install the following for use with Jest.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev babel-jest @babel/core @babel/preset-env regenerator-runtime\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babel-jest\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/core\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-env\"), \" are technically the only required\\npackages. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regenerator-runtime\"), \" according to the documentation is not needed with\\nNPM versions > 3/4 or Yarn. However, I included it just in case someone is using\\na different package manager.\"), mdx(\"h4\", null, \"Adding a babel config\"), mdx(\"p\", null, \"The next step is to add a Babel config.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS/blob/master/babel.config.js\"\n  }), \"My Babel Config\"), \"\\nThere appears to be no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx babel --init\"), \" so you must generate your own config file.\\nI generated my using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/docs/en/getting-started#using-babel\"\n  }), \"Docs\"), \"\\nand it worked right out of the box.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// babel.config.js\\nmodule.exports = {\\n  presets: [\\n    [\\n      \\\"@babel/preset-env\\\",\\n      {\\n        targets: {\\n          node: \\\"current\\\",\\n        },\\n      },\\n    ],\\n  ],\\n}\\n\")), mdx(\"p\", null, \"After adding this to the root of your project, you should be ready to start using\\nimport / export statements wherever you want!\"), mdx(\"h4\", null, \"Ok, so how does this all work?\"), mdx(\"p\", null, \"Well, based on what I have read it\\u2019s super simple.\\nLet\\u2019s take what the documentation uses.\\nGiven the following file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// src/sum.js\\nexport default function sum(a, b) {\\n  return a + b\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// __tests__/sum.test.js\\n\\nimport sum from \\\"../src/sum.js\\\"\\n\\ntest(\\\"adds 1 + 2 to equal 3\\\", () => {\\n  expect(sum(1, 2)).toBe(3)\\n})\\n\")), mdx(\"p\", null, \"So why does this work?\"), mdx(\"p\", null, \"Well, Babel essentially takes your import statement: \", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import sum from \\\"../src/sum.js\\\";\"), \" \", mdx(\"br\", null), \"\\nAnd turns it into\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const sum = require('../src/sum.js');\")), mdx(\"p\", null, \"And takes your export statement: \", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export default function sum(a, b) {\"), mdx(\"br\", null), \"\\nand turns it into\", mdx(\"br\", null)), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function sum(a, b) {\\n...code omitted for brevity\\n}\\nmodule.exports = sum\\n\")), mdx(\"p\", null, \"There are key differences when looking at import / export vs module.exports / require\\nif you dig further and look at the specs. I won\\u2019t get into the differences here, but\\nthere is a reason import / export statements are currently only experimental in NodeJS.\"), mdx(\"p\", null, \"Technically, you could stop here, but I like to use ESLint to both lint and enforce code style.\\nIf you don\\u2019t tell ESLint about Jest, it will throw up many warnings. So, lets fix that.\"), mdx(\"h3\", null, \"Installing ESLint\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev eslint eslint-plugin-jest\\nnpx eslint --init\\n\")), mdx(\"p\", null, \"This will generate a eslint config file for you once you choose from the command line\\noptions.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS/blob/master/.eslintrc.js\"\n  }), \"My ESLint Config\")), mdx(\"p\", null, \"I added the following lines for use with Jest in my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"module.exports = {\\n  // ...\\n  env: {\\n    \\\"jest/globals\\\": true,\\n  },\\n  extends: [\\\"plugins:jest/recommended\\\", \\\"eslint:recommended\\\"],\\n  plugins: [\\\"jest\\\"],\\n  // ...\\n}\\n\")), mdx(\"h3\", null, \"Closing thoughts\"), mdx(\"p\", null, \"Setting up Jest for the first time took a bit of work, but I got it all working to\\nmy liking and used it for testing in my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS\"\n  }), \"TicTacToe project\"), \".\\nThis was meant more so as a guide to myself, but if you found this helpful, feel free\\nto share with your friends.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}