{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/setting-up-gatsby-with-docker/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"6bdca5a4-4540-5a4b-87fd-483e2121a88c","excerpt":"Quick start First create a new directory (or use an existing directory, this method will NOT\ncreate a new git directory for you) Next step, we must fill in theâ€¦","frontmatter":{"title":"Setting up a Gatsby project with Docker","date":"January 16, 2020"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Setting up a Gatsby project with Docker\",\n  \"date\": \"2020-01-16T16:55:01\",\n  \"description\": \"How to setup a new gatsby project with docker within the current directory of your project\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Quick start\"), mdx(\"p\", null, \"First create a new directory (or use an existing directory, this method will NOT\\ncreate a new git directory for you)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir my-new-gatsby-project\\ncd my-new-gatsby-project\\ntouch Dockerfile.dev docker-compose.yml package.json yarn.lock\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Next step, we must fill in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file.\"), mdx(\"p\", null, \"There are 2 ways to handle this. You can either run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn init or npm init\"), \" if you have\\nyarn / npm installed on your computer.\"), mdx(\"p\", null, \"However, if you do not have npm / yarn it is fine. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" just needs\\nsome values to get Docker to run appropriately. Run the command below to fill in\\na temporary \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"// ./package.json\\n\\n{\\n  \\\"name\\\": \\\"docker-with-gatsby\\\",\\n  \\\"description\\\": \\\"An example repo for setting up Gatsby with Docker\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"repository\\\": \\\"git@github.com:ParamagicDev/docker-with-gatsby.git\\\",\\n  \\\"author\\\": \\\"paramagicdev <konnor5456@gmail.com>\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"private\\\": true\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Then, we\\u2019ll fill in the Dockerfile.dev with the following values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\"\n  }), \"# ./Dockerfile.dev\\n\\nFROM node:12.14.0-slim\\n\\nRUN apt update && apt upgrade -y && \\\\\\n    apt install gcc g++ make python git libc6-dev build-essential libpng-dev \\\\\\n    libjpeg-dev libvips-dev libvips musl-dev node-gyp pngquant webp -y\\n\\nRUN yarn global add gatsby-cli\\n\\n# The port gatsby runs on\\nEXPOSE 8000\\n\\nWORKDIR /myapp\\nCOPY ./package.json /myapp\\nCOPY ./yarn.lock /myapp\\n\\nRUN yarn install && yarn cache clean\\nCOPY . /myapp\\nCMD [\\\"gatsby\\\", \\\"develop\\\", \\\"-H\\\", \\\"0.0.0.0\\\" ]\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"After finishing with the Dockerfile, well build a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" to bring\\neverything together. Technically, you could run the whole project without docker-compose\\nbut it makes commands a lot more verbose by having to include volumes and ports\\nand various other things. Docker-compose simply streamlines the process.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# ./docker-compose.yml\\n\\nversion: \\\"3\\\"\\nservices:\\n  web:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.dev\\n    ports:\\n      - \\\"8000:8000\\\"\\n    volumes:\\n      - /myapp/node_modules\\n      - .:/myapp\\n    environment:\\n      - NODE_ENV=development\\n      - GATSBY_WEBPACK_PUBLICPATH=/\\n\")), mdx(\"p\", null, \"Your file structure should at least contain the following when running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tree .\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \".\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 Dockerfile.dev\\n\\u251C\\u2500\\u2500 package.json\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/docker-with-gatsby/tree/initial-docker-setup\"\n  }), \"Reference Repository Commit\")), mdx(\"p\", null, \"After copying the contents of the files above into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile.dev\"), \"\\nrespectively, then run the following commands:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Unfortunately, yarn does not have a similar command to npx\\ndocker-compose run --rm web npx degit https://github.com/gatsbyjs/gatsby-starter-default . --force\\n\")), mdx(\"p\", null, \"Your gatsby project is now ready to dev on! Simply run the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose up --build\\n\")), mdx(\"p\", null, \"Navigate to localhost:8000 in your web browser, and your project should be running!\"), mdx(\"h3\", null, \"Additional info\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up --build\"), \" command is only needed when rebuilding, IE:\\nAdding packages, removing packages, etc.\"), mdx(\"p\", null, \"If you have only changed files that do not need a full rebuild, you can run\\nsubsequent instances of docker-compose with simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up\")), mdx(\"h4\", null, \"Using yarn\"), mdx(\"p\", null, \"If you are planning on using yarn instead of npm like I have above, make sure to remove\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package-lock.json\"), \" generated by degit when pulling in the gatsby starter\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"rm package-lock.json\\n\")), mdx(\"p\", null, \"Otherwise, when installing packages yarn will complain about conflicting package\\nmanagers.\"), mdx(\"h4\", null, \"Updating packages\"), mdx(\"p\", null, \"To update packages you can either do a straight upgrade or an interactive upgrade\\nas follows.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Interactive upgrade\\ndocker-compose run --rm web yarn upgrade-interactive\\n\\n# Non-interactive\\ndocker-compose run --rm web yarn upgrade\\n\")), mdx(\"p\", null, \"If you\\u2019re not currently inside a git repo and would like to use git, make sure to\\nrun a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git init\"), \" from the root directory\"), mdx(\"h2\", null, \"Bonus content - Adding \", mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"https://www.docz.site\"\n  }), \"Docz\")), mdx(\"p\", null, \"Alright, now when I initially tried this I did not realize Docz had released a v2.\\nMake sure you are targetting v2. There are 2 different ways to create a project\\nwith Docz.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The first way is similar to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"create-react-app\"), \". If you have node installed,\\nyou can run the following command:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npx create-docz-app my-docz-app\\n# or\\nyarn create docz-app my-docz-app\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The alternative way is if you followed the steps above to create a barebones\\nGatsby project.\")), mdx(\"p\", null, \"After following the steps above, your project should look like this:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/docker-with-gatsby\"\n  }), \"Gatsby Initial Setup\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"tree .\\n\\n.\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 Dockerfile.dev\\n\\u251C\\u2500\\u2500 gatsby-browser.js\\n\\u251C\\u2500\\u2500 gatsby-config.js\\n\\u251C\\u2500\\u2500 gatsby-node.js\\n\\u251C\\u2500\\u2500 gatsby-ssr.js\\n\\u251C\\u2500\\u2500 LICENSE\\n\\u251C\\u2500\\u2500 node_modules\\n\\u251C\\u2500\\u2500 package.json\\n\\u251C\\u2500\\u2500 package-lock.json\\n\\u251C\\u2500\\u2500 public\\n\\u251C\\u2500\\u2500 README.md\\n\\u251C\\u2500\\u2500 src\\n\\u2514\\u2500\\u2500 yarn.lock\\n\")), mdx(\"p\", null, \"Next, run the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add docz\\n\")), mdx(\"p\", null, \"There are many ways to use the new docz but because the project I\\u2019m making is specifically\\nfor documentation and won\\u2019t be using anything else, all my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".mdx\"), \" files will be in the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/pages\"), \" directory because this is how Gatsby provides routing.\"), mdx(\"p\", null, \"Additionally, you must add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-theme-doz\"), \" plugin in both your\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./gatsby-config.js\"), \" and to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./package.json\"), \" file like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose run --rm web yarn add gatsby-theme-docz\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Then, you must add it to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./gatsby-config.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"module.exports = {\\n  plugins: [\\\"gatsby-theme-docz\\\"],\\n}\\n\")), mdx(\"p\", null, \"Hope this helped you with Gatsby, Docz, or general Docker setup!\\nGood luck out there!\"), mdx(\"h2\", null, \"Issues\"), mdx(\"p\", null, \"When running the docker process, it runs as root. As a result, on Linux the files\\ncreated by Degit will be owned by the root user. Run the following to fix\\nany permissions errors from the root directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo chown -R \\\"$USER\\\":\\\"$USER\\\" .\\n\")), mdx(\"p\", null, \"Originally, this tutorial used an Alpine based docker images. Theres a lot of\\ncompatibility issues with the image processing library \\u2018sharp\\u2019. As a result,\\nI decided to use a Debian based Docker image for an easier build process.\"), mdx(\"p\", null, \"I also ran into issues with using Node 13.6.0. It kept saying sharp was not self registering.\\nThere appears to be many compatibility issues with sharp so I wanted to keep this\\nas close to my host machine as possible.\"), mdx(\"h2\", null, \"Links\"), mdx(\"h3\", null, \"Gatsby\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gatsbyjs.org\"\n  }), \"Gatsby Home\")), mdx(\"br\", null), \"[Gatsby Starter Github page](https://github.com/gatsbyjs/gatsby-starter-default)\", mdx(\"br\", null), mdx(\"h3\", null, \"Degit\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I actually learned about Degit when browsing the Svelte documentation\"), mdx(\"br\", null)), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Rich-Harris/degit\"\n  }), \"Degit Source Code\")), mdx(\"br\", null), mdx(\"h3\", null, \"Docz\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.docz.site\"\n  }), \"Docz Homepage\")), mdx(\"br\", null), \"[Docz Getting Started](https://www.docz.site/docs/getting-started)\");\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/javascript/setting-up-gatsby-with-docker/","previous":{"id":"542a0281-501f-50a1-ae48-a2a5467b9804","fields":{"slug":"/making-ems-helper/hiccups/"},"frontmatter":{"title":"Making EMS Helper - Hiccups"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Making EMS Helper - Hiccups\",\n  \"date\": \"2019-12-18T20:48:45\",\n  \"description\": \"Detailing a few of the issues faced when attempting to populate the database.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Aggregating the data\"), mdx(\"p\", null, \"Unfortunately, as detailed in my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://paramagicdev.github.io/my-blog/making-ems-helper/introduction\"\n  }), \"previous post\"), \"\\npopulating the database will not be as easy as expected. Upon further inspection,\\nthe database provided at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hifld-geoplatform.opendata.arcgis.com/datasets/hospitals/geoservice\"\n  }), \"https://hifld-geoplatform.opendata.arcgis.com/datasets/hospitals/geoservice\"), \" does not have a complete dataset. For example,\\nit only includes Westerly Hospital and the VA - Medical Center. As a result, I had to rethink\\nhow to aggregate the data.\"), mdx(\"h2\", null, \"Using Wikipedia\"), mdx(\"p\", null, \"Wikipedia appears to have a semi-complete list. May be best to look into this as a means\\nto populate the database. They also appear to have a semi complete list of trauma centers.\\nNo mention of PCI facilities is made on Wikipedia nor stroke centers.\"), mdx(\"h2\", null, \"Moving forward\"), mdx(\"p\", null, \"Unfortunately, it appearst this projects is more data aggregation heavy than it is\\ntechnically challenging. The time required to make the project work would be enormous.\"), mdx(\"p\", null, \"Either on my part of getting the data myself or by using community involvement\\nand filtering in new locations. It just doesn\\u2019t seem feasible at this time.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"3fbc68fd-fc5c-5e24-9000-863ffbe825c2","fields":{"slug":"/misc/adding-tailwindcss-to-gatsby/"},"frontmatter":{"title":"Adding tailwindcss to a Gatsby project"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding tailwindcss to a Gatsby project\",\n  \"date\": \"2020-01-20T02:26:43\",\n  \"description\": \"Details on how to add tailwindcss to a Gatsby project.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Prerequisites\"), mdx(\"p\", null, \"Node (preferably 8+, I used 11.15.0)\", mdx(\"br\", null), \"\\nNpm (I used 6.7.0)\", mdx(\"br\", null), \"\\nGit (Gatsby requires Git to pull in starters)\", mdx(\"br\", null)), mdx(\"h2\", null, \"Note to windows users\"), mdx(\"p\", null, \"I wrote this tutorial with intent for Unix based users. Whenever you see the\\ncommand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"touch\"), \" it just means create a file and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mkdir\"), \" means create a directory (folder).\\nAlso, I wrote filepaths with Unix based OS\\u2019es in mind.\"), mdx(\"h2\", null, \"TLDR\"), mdx(\"p\", null, \"For the full tutorial below \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#full-tutorial\"\n  }), \"Click here\")), mdx(\"h3\", null, \"For new projects\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --global gatsby-cli\\ngatsby new tailwind-gatsby-project\\ncd tailwind-gatsby-project\\n\")), mdx(\"h3\", null, \"For new or existing projects\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install gatsby-plugin-postcss\\nnpm install --save-dev tailwindcss\\nnpx tailwind init\\n\\ntouch postcss.config.js\\nmkdir src/styles\\ntouch src/styles/tailwind.css\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"1. Add gatsby-postcss-plugin to `./gatsby-config.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./gatsby-config.js\\nmodule.exports = {\\n  // Above code omitted for brevity\\n  plugins: [\\n    `gatsby-plugin-react-helmet`,\\n    {\\n      resolve: `gatsby-source-filesystem`,\\n      options: {\\n        name: `images`,\\n        path: `${__dirname}/src/images`,\\n      },\\n    },\\n    `gatsby-plugin-postcss`,\\n    // Below code omitted for brevity\\n  ],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"2. Add the following values to `./postcss.config.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./postcss.config.js\\n\\nconst tailwindcss = require(`tailwindcss`)\\n\\nmodule.exports = {\\n  plugins: [tailwindcss(`./tailwind.config.js`), require(\\\"autoprefixer\\\")],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"3. Add tailwindcss directives to `./src/styles/tailwind.css`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* ./src/styles/tailwind.css */\\n@tailwind base\\n@tailwind utilities;\\n@tailwind components;\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"4. Add tailwindcss globally by importing it in `gatsby-browser.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./gatsby-browser.js\\n\\nimport \\\"./src/styles/tailwind.css\\\"\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"5. Add a tailwind style to a an item in `./src/pages/index.js` to test that its working\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./src/pages/index.js\\n\\n// Above code omitted for brevity\\n<h1 className=\\\"bg-red-500\\\">Hi people</h1>\\n// Below code omitted for brevity\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"6. Start up your server\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"gatsby develop\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"7. Navigate to `localhost:8000` to see if Tailwind is working. That's it!\"), mdx(\"h2\", {\n    id: \"full-tutorial\"\n  }, \" Full tutorial\"), mdx(\"p\", null, \"If you already have a Gatsby project feel free to skip ahead to the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#adding-to-an-existing-project\"\n  }), \"Adding to an existing project section\")), mdx(\"strong\", null, \"1. First, start by creating a new Gatsby project. The easiest way to do so is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --global gatsby-cli\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"2. Then to create a new project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"gatsby new tailwind-gatsby-project\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"This will create a new Gatsby project called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tailwind-gatsby-project\")), mdx(\"strong\", null, \"3. Now, navigate into the project directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd tailwind-gatsby-project\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Make sure running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby develop\"), \" works before moving on.\"), mdx(\"h2\", {\n    id: \"adding-to-an-existing-project\"\n  }, \" Adding to an existing project\"), mdx(\"strong\", null, \"4. Add [gatsby-plugin-postcss](https://www.gatsbyjs.org/packages/gatsby-plugin-postcss/) package\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install gatsby-plugin-postcss\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"5. Add gatsby-postcss-plugin to `gatsby-config.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./gatsby-config.js\\nmodule.exports = {\\n  // Above code omitted for brevity\\n  plugins: [\\n    `gatsby-plugin-react-helmet`,\\n    {\\n      resolve: `gatsby-source-filesystem`,\\n      options: {\\n        name: `images`,\\n        path: `${__dirname}/src/images`,\\n      },\\n    },\\n    `gatsby-plugin-postcss`,\\n    // Below code omitted for brevity\\n  ],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"6. Create a `postcss.config.js` file in the root directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch postcss.config.js\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"7. Add the following content to `postcss.config.js`:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./postcss.config.js\\n\\nconst tailwindcss = require(`tailwindcss`)\\n\\nmodule.exports = {\\n  plugins: [tailwindcss(`./tailwind.config.js`), require(\\\"autoprefixer\\\")],\\n}\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"8. Add the [TailwindCSS](https://tailwindcss.com/docs/installation) package\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev tailwindcss\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"9. Create a directory called in `styles` in the `src` directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir src/styles\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"10. Create a stylesheet called `tailwind.css` in the `src/styles` directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch src/styles/tailwind.css\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"11. Add the following content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* ./src/styles/tailwind.css */\\n\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"12. To add tailwind styles globally, import it in `gatsby-browser.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import \\\"./src/styles/tailwind.css\\\"\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Everything should now be working! However, we currently have no way of telling.\\nLets add a tailwind style to the index page.\"), mdx(\"strong\", null, \"13. Add a tailwind style to the `\", mdx(\"h1\", null), \"` tag in `src/pages/index.js`\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// ./src/pages/index.js\\n\\n// Above code omitted for brevity\\n<h1 className=\\\"bg-red-500\\\">Hi people</h1>\\n// Below code omitted for brevity\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"14. Run `gatsby-develop`\"), mdx(\"p\", null, \"You should now see a red background for the text that says \\u201CHi people\\u201D. This\\nlets you know tailwind is working as expected! Hope this worked for you getting\\nTailwindCSS setup in Gatsby.\"), mdx(\"p\", null, \"Make sure if you still have the server from earlier running to shut it down and\\nrestart it.\"), mdx(\"h2\", null, \"Links\"), mdx(\"h3\", null, \"My github repo using Tailwind and Gatsby\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/tailwind-gatsby-project\"\n  }), \"Reference Repository\")), mdx(\"h3\", null, \"Gatsby\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org\"\n  }), \"Gatsby\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/tailwind-css/\"\n  }), \"Gatsby + Tailwind tutorial\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/tutorial/part-two/#creating-global-styles-with-standard-css-files\"\n  }), \"Using CSS in Gatsby\"), mdx(\"br\", null)), mdx(\"h3\", null, \"Tailwind\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tailwindcss.com/\"\n  }), \"TailwindCSS\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tailwindcss.com/docs/installation\"\n  }), \"TailwindCSS Installation\"), mdx(\"br\", null)));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}