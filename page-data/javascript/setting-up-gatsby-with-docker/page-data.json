{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/setting-up-gatsby-with-docker/","webpackCompilationHash":"bb9977c46939fab67bad","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"markdownRemark":{"id":"e6b6c916-b0aa-5bb1-94d9-df1f78419856","excerpt":"Quick start First create a new directory (or use an existing directory, this method will NOT\ncreate a new git directory for you) Next step, we must fill in the…","html":"<h2>Quick start</h2>\n<p>First create a new directory (or use an existing directory, this method will NOT\ncreate a new git directory for you)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> my-new-gatsby-project\n<span class=\"token builtin class-name\">cd</span> my-new-gatsby-project\n<span class=\"token function\">touch</span> Dockerfile.dev docker-compose.yml package.json yarn.lock</code></pre></div>\n</br>\n<p>Next step, we must fill in the <code class=\"language-text\">package.json</code> file.</p>\n<p>There are 2 ways to handle this. You can either run <code class=\"language-text\">yarn init or npm init</code> if you have\nyarn / npm installed on your computer.</p>\n<p>However, if you do not have npm / yarn it is fine. The <code class=\"language-text\">package.json</code> just needs\nsome values to get Docker to run appropriately. Run the command below to fill in\na temporary <code class=\"language-text\">package.json</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ./package.json</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docker-with-gatsby\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An example repo for setting up Gatsby with Docker\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git@github.com:ParamagicDev/docker-with-gatsby.git\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"paramagicdev &lt;konnor5456@gmail.com>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<p>Then, we’ll fill in the Dockerfile.dev with the following values.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># ./Dockerfile.dev</span>\n\n<span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>12.14.0<span class=\"token punctuation\">-</span>slim\n\n<span class=\"token keyword\">RUN</span> apt update &amp;&amp; apt upgrade <span class=\"token punctuation\">-</span>y &amp;&amp; \\\n    apt install gcc g++ make python git libc6<span class=\"token punctuation\">-</span>dev build<span class=\"token punctuation\">-</span>essential libpng<span class=\"token punctuation\">-</span>dev \\\n    libjpeg<span class=\"token punctuation\">-</span>dev libvips<span class=\"token punctuation\">-</span>dev libvips musl<span class=\"token punctuation\">-</span>dev node<span class=\"token punctuation\">-</span>gyp pngquant webp <span class=\"token punctuation\">-</span>y\n\n<span class=\"token keyword\">RUN</span> yarn global add gatsby<span class=\"token punctuation\">-</span>cli\n\n<span class=\"token comment\"># The port gatsby runs on</span>\n<span class=\"token keyword\">EXPOSE</span> 8000\n\n<span class=\"token keyword\">WORKDIR</span> /myapp\n<span class=\"token keyword\">COPY</span> ./package.json /myapp\n<span class=\"token keyword\">COPY</span> ./yarn.lock /myapp\n\n<span class=\"token keyword\">RUN</span> yarn install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>force &amp;&amp; yarn cache clean\n<span class=\"token keyword\">COPY</span> . /myapp\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"gatsby\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"develop\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-H\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0.0.0.0\"</span> <span class=\"token punctuation\">]</span></code></pre></div>\n</br>\n<p>After finishing with the Dockerfile, well build a <code class=\"language-text\">docker-compose.yml</code> to bring\neverything together. Technically, you could run the whole project without docker-compose\nbut it makes commands a lot more verbose by having to include volumes and ports\nand various other things. Docker-compose simply streamlines the process.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># ./docker-compose.yml</span>\n\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> Dockerfile.dev\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8000:8000\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /myapp/node_modules\n      <span class=\"token punctuation\">-</span> .<span class=\"token punctuation\">:</span>/myapp\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> NODE_ENV=development\n      <span class=\"token punctuation\">-</span> GATSBY_WEBPACK_PUBLICPATH=/</code></pre></div>\n<p>Your file structure should at least contain the following when running <code class=\"language-text\">tree .</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── docker-compose.yml\n├── Dockerfile.dev\n├── package.json\n└── yarn.lock</code></pre></div>\n<p><a href=\"https://github.com/ParamagicDev/docker-with-gatsby/tree/initial-docker-setup\">Reference Repository Commit</a></p>\n<p>After copying the contents of the files above into <code class=\"language-text\">docker-compose.yml</code> &#x26; <code class=\"language-text\">Dockerfile.dev</code>\nrespectively, then run the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Unfortunately, yarn does not have a similar command to npx</span>\ndocker-compose run --rm web npx degit https://github.com/gatsbyjs/gatsby-starter-default <span class=\"token builtin class-name\">.</span> --force</code></pre></div>\n<p>Your gatsby project is now ready to dev on! Simply run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose up --build</code></pre></div>\n<p>Navigate to localhost:8000 in your web browser, and your project should be running!</p>\n<h3>Additional info</h3>\n<p>The <code class=\"language-text\">docker-compose up --build</code> command is only needed when rebuilding, IE:\nAdding packages, removing packages, etc.</p>\n<p>If you have only changed files that do not need a full rebuild, you can run\nsubsequent instances of docker-compose with simple <code class=\"language-text\">docker-compose up</code></p>\n<h4>Using yarn</h4>\n<p>If you are planning on using yarn instead of npm like I have above, make sure to remove\nthe <code class=\"language-text\">package-lock.json</code> generated by degit when pulling in the gatsby starter</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> package-lock.json</code></pre></div>\n<p>Otherwise, when installing packages yarn will complain about conflicting package\nmanagers.</p>\n<h4>Updating packages</h4>\n<p>To update packages you can either do a straight upgrade or an interactive upgrade\nas follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Interactive upgrade</span>\ndocker-compose run --rm web <span class=\"token function\">yarn</span> upgrade-interactive\n\n<span class=\"token comment\"># Non-interactive</span>\ndocker-compose run --rm web <span class=\"token function\">yarn</span> upgrade</code></pre></div>\n<p>If you’re not currently inside a git repo and would like to use git, make sure to\nrun a <code class=\"language-text\">git init</code> from the root directory</p>\n<h2>Bonus content - Adding <a href=\"https://www.docz.site\">Docz</a></h2>\n<p>Alright, now when I initially tried this I did not realize Docz had released a v2.\nMake sure you are targetting v2. There are 2 different ways to create a project\nwith Docz.</p>\n<ol>\n<li>The first way is similar to <code class=\"language-text\">create-react-app</code>. If you have node installed,\nyou can run the following command:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-docz-app my-docz-app\n<span class=\"token comment\"># or</span>\n<span class=\"token function\">yarn</span> create docz-app my-docz-app</code></pre></div>\n<ol start=\"2\">\n<li>The alternative way is if you followed the steps above to create a barebones\nGatsby project.</li>\n</ol>\n<p>After following the steps above, your project should look like this:</p>\n<p><a href=\"https://github.com/ParamagicDev/docker-with-gatsby\">Gatsby Initial Setup</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tree <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token builtin class-name\">.</span>\n├── docker-compose.yml\n├── Dockerfile.dev\n├── gatsby-browser.js\n├── gatsby-config.js\n├── gatsby-node.js\n├── gatsby-ssr.js\n├── LICENSE\n├── node_modules\n├── package.json\n├── package-lock.json\n├── public\n├── README.md\n├── src\n└── yarn.lock</code></pre></div>\n<p>Next, run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> docz</code></pre></div>\n<p>There are many ways to use the new docz but because the project I’m making is specifically\nfor documentation and won’t be using anything else, all my <code class=\"language-text\">.mdx</code> files will be in the\n<code class=\"language-text\">src/pages</code> directory because this is how Gatsby provides routing.</p>\n<p>Hope this helped you with Gatsby, Docz, or general Docker setup!\nGood luck out there!</p>\n<h2>Issues</h2>\n<p>When running the docker process, it runs as root. As a result, on Linux the files\ncreated by Degit will be owned by the root user. Run the following to fix\nany permissions errors from the root directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -R <span class=\"token string\">\"<span class=\"token environment constant\">$USER</span>\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"<span class=\"token environment constant\">$USER</span>\"</span> <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>Originally, this tutorial used an Alpine based docker images. Theres a lot of\ncompatibility issues with the image processing library ‘sharp’. As a result,\nI decided to use a Debian based Docker image for an easier build process.</p>\n<p>I also ran into issues with using Node 13.6.0. It kept saying sharp was not self registering.\nThere appears to be many compatibility issues with sharp so I wanted to keep this\nas close to my host machine as possible.</p>\n<h2>Links</h2>\n<h3>Gatsby</h3>\n<p><a href=\"https://gatsbyjs.org\">Gatsby Home</a>\n</br>\n<a href=\"https://github.com/gatsbyjs/gatsby-starter-default\">Gatsby Starter Github page</a>\n</br></p>\n<h3>Degit</h3>\n<blockquote>\n<p>I actually learned about Degit when browsing the Svelte documentation\n</br></p>\n</blockquote>\n<p><a href=\"https://github.com/Rich-Harris/degit\">Degit Source Code</a>\n</br></p>\n<h3>Docz</h3>\n<p><a href=\"https://www.docz.site\">Docz Homepage</a>\n</br>\n<a href=\"https://www.docz.site/docs/getting-started\">Docz Getting Started</a></p>","frontmatter":{"title":"Setting up a Gatsby project with Docker","date":"January 16, 2020","description":"How to setup a new gatsby project with docker within the current directory of your project"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/setting-up-gatsby-with-docker/","previous":{"fields":{"slug":"/making-ems-helper/hiccups/"},"frontmatter":{"title":"Making EMS Helper - Hiccups"}},"next":null}}}