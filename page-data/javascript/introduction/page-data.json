{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/introduction/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"0bf04783-a44e-5a9c-aab6-f1cdc1425c53","excerpt":"Purpose This is a collection of various things I have found while doing various projects\nusing Javascript. This is not meant to be read in any order, rather itsâ€¦","frontmatter":{"title":"JS - Introduction","date":"September 29, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS - Introduction\",\n  \"date\": \"2019-09-29T17:31:23\",\n  \"description\": \"A basic introduction as to what this series will be about\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Purpose\"), mdx(\"p\", null, \"This is a collection of various things I have found while doing various projects\\nusing Javascript. This is not meant to be read in any order, rather its just random\\ntidbits and items I have come across while using Javascript.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/javascript/introduction/","previous":{"id":"3769da86-6554-532d-818e-28b6bad10c43","fields":{"slug":"/learning-php/part7/"},"frontmatter":{"title":"PHP for beginners - Part 7 - Classes?...Like school?"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PHP for beginners - Part 7 - Classes?...Like school?\",\n  \"date\": \"2019-08-26T06:31:03\",\n  \"description\": \"Lets look into classes in PHP. Classes are the building blocks of Object Oriented Programming\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 7\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/12\"\n  }), \"Chapter 12 - Classes 101\")), mdx(\"h3\", null, \"Chapter 12 - Classes 101\"), mdx(\"p\", null, \"What is a class? Well, according to Wikipedia, this is what a programming class is:\", mdx(\"br\", null), \"\\nIn object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods)\"), mdx(\"p\", null, \"What does that mean? A class is very simply a way of packaging variables and functions\\nwithin a template to be reused or extended.\"), mdx(\"p\", null, \"Yea but what does that mean? Its kind of hard to wrap your head around, but lets\\ndive into what classes do in PHP and how to make them. This will better help you\\nunderstand what\\u2019s going on.\"), mdx(\"h4\", null, \"Syntax\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"class Task {\\n\\n}\\n\")), mdx(\"p\", null, \"Wow thats it? Yes, technically this is all a class needs, however this isnt very\\ndynamic, so lets extend it a little.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"class Task {\\n  protected $description;\\n\\n  public function __construct($description) {\\n    $this->$description;\\n  }\\n}\\n\")), mdx(\"p\", null, \"This is a very basic example and intro to classes.\\nLets break it down now.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class Task\"), \" Define the class name\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"protected $description;\"), \" initialize the variable \\\\$description\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public function __construct($description)\"), \" This is a special \\u2018constructor\\u2019 function.\", mdx(\"br\", null), \"\\nThis means that when a class is \\u2018instantiated\\u2019, to run the following code. Or in other\\nwords when you create a \\u2018new\\u2019 class, do the run the following code.\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$this->$description;\"), \" ahhhh yes. The magical \\u2019\\\\$this\\u2019. In some languages it may just\\nbe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \". This is a tough term to wrap your head around so let\\u2019s keep it simple.\", mdx(\"br\", null)), mdx(\"p\", null, \"In this case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$this\"), \" means, for THIS instance of Task, set the value provided in the constructor to\\nthis instance\\u2019s \\\\$description variable\", mdx(\"br\", null)), mdx(\"p\", null, \"So what the heck does that above statment even mean? Well let\\u2019s continue on. Examples\\nexplain this better than I can. Lets instantiate a the class Task now.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"$task = new Task('I am a description');\\nvar_dump($task);\\n\")), mdx(\"p\", null, \"This will very simply provide a nice human readable version of task displayed in\\nthe web browser of your choice.\"), mdx(\"p\", null, \"Okay, this is great and all, but we can\\u2019t do anything with this right now.\"), mdx(\"p\", null, \"You could try\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"$task = new Task('I am a description');\\nvar_dump($task->$description);\\n\")), mdx(\"p\", null, \"But you\\u2019ll get an access error. So let\\u2019s talk about getters and setters.\\nA getter simply \\u2018gets\\u2019 a value from a class and a setter \\u2018sets\\u2019 a value in a class.\\nGetters and setters are part of a OOP term called \\u2018encapsulation\\u2019. Don\\u2019t worry about\\nwhat that means for now, just know that it may come up in the future.\\nNot very useful, but lets see how it works.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"class Task {\\n  protected $description;\\n\\n  public function __construct($description){\\n    $this->$description;\\n  }\\n\\n  public function getDescription(){\\n    return $this->description;\\n  }\\n\\n  public function setDescription($description){\\n    $this->description = $description;\\n  }\\n}\\n\\n$task = new Task(\\\"Go to the store\\\");\\n\")), mdx(\"br\", null), \"The above defines the class Task. Now lets see how we would access values.\", mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// ...above code omitted for brevity\\n\\n// Accessing the value of $task->description\\nvar_dump($task->getDescription();\\n\\n// Changes the value of $task->description to the new description\\n$task->setDescription(\\\"Go to grandma's house\\\");\\nvar_dump($task->getDescription();\\n// Will now var_dump \\\"Go to grandma's house\\\" instead of \\\"go to store\\\"\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Now what if we want to make multiple tasks and store them in an array?\\nSimple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// ...above code omitted for brevity\\n$tasks = [\\n  new Task(\\\"Go to store\\\"),\\n  new Task(\\\"Go to grandma's house\\\"),\\n  new Task(\\\"Go home\\\")\\n];\\n\\nvar_dump($tasks);\\n\")), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, \"[Follow along with my repo](https://github.com/ParamagicDev/php-for-beginners)\", mdx(\"br\", null)), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"853540aa-bfd3-5873-9235-eda103776a6d","fields":{"slug":"/javascript/documentFragments/"},"frontmatter":{"title":"JS - Appending multiple children to an element"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS - Appending multiple children to an element\",\n  \"date\": \"2019-09-29T17:34:12\",\n  \"description\": \"After searching and scouring the internet for the best way to append multiple children within the DOM at the same time, I came across the DocumentFragment API\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"DocumentFragment - Appending multiple children to one or multiple elements\"), mdx(\"h3\", null, \"Relevant Links\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\"\n  }), \"DocumentFragment API via MDN\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/a/36798254\"\n  }), \"Relevant StackOverflow answer\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/libraryBookJS\"\n  }), \"My Github repository which uses DocumentFragment API\")), mdx(\"h3\", null, \"What is the DocumentFragment API?\"), mdx(\"p\", null, \"Below is the description from MDN:\", mdx(\"br\", null)), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn\\u2019t part of the active document tree structure, changes made to the fragment don\\u2019t affect the document, cause reflow, or incur any performance impact that can occur when changes are made.\")), mdx(\"i\", null, \"Key Takeaway:\"), mdx(\"br\", null), \"The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.\", mdx(\"br\", null), mdx(\"p\", null, \"This means the DocumentFragment API is the go to way to append multiple elements\\nthat do not need to be immediately rendered to the page.\"), mdx(\"h3\", null, \"Using the DocumentFragment API\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"const docFrag = new DocumentFragment();\\n\")), mdx(\"p\", null, \"Thats all it takes to make a document fragment!\"), mdx(\"h3\", null, \"Basic usage\"), mdx(\"h4\", null, \"Typical way of appending children\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"const div1 = document.createElement('div');\\n\\nconst div2 = document.createElement('div');\\nconst div3 = document.createElement('div');\\n\\ndocument.body.appendChild(div);\\ndocument.body.appendChild(p1);\\ndocument.body.appendChild(p2);\\n\")), mdx(\"p\", null, \"Everytime you append a child to a rendered portion of the browser, you are rerendering the page with each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"appendChild()\"), \" call. Lets look at how we could recreate the same functionality without causing performance issues.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"// Create a docFrag to add elements to\\nconst docFrag = new DocumentFragment();\\n\\nconst div1 = document.createElement('div');\\nconst div2 = document.createElement('div');\\nconst div3 = document.createElement('div');\\n\\ndocFrag.appendChild(div1);\\ndocFrag.appendChild(div2);\\ndocFrag.appendChild(div3);\\n\\ndocument.body.appendChild(docFrag);\\n\")), mdx(\"p\", null, \"It requires 2 simple extra lines of code but will significantly change\\na users browser experience. Especially if you are doing something like\\nserver side rendering where you create many HTML elements via JS.\\nThis method as far as I\\u2019m aware is implemented by the major front-end frameworks like React, Vue, Angular etc.\"), mdx(\"h4\", null, \"Closing thoughts\"), mdx(\"p\", null, \"I hope you found this useful and next time you go to append some children\\nyou reach for DocumentFragment. Its a simple and easy to understand API with so\\nmany benefits. I was very happy with how approachable it was and it was\\nvery easy to see the benefits of the API.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}