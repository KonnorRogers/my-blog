{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/tailwindWebpackPostCSS/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"5150c2c2-5573-521b-8621-7a06da7c177c","excerpt":"At the time of writing, this works using Tailwind v1.1.2 Reference Repository File structure CLI Commands Configuration files This is the default from tailwindâ€¦","frontmatter":{"title":"How to setup TailwindCSS with PostCSS and Webpack","date":"October 11, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to setup TailwindCSS with PostCSS and Webpack\",\n  \"date\": \"2019-10-11T02:59:29\",\n  \"description\": \"I will detail how to setup TailwindCSS with PostCSS and Webpack. I will do the bare minimum setup to get it working without many plugins.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"At the time of writing, this works using Tailwind v1.1.2\"), mdx(\"h2\", null, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"https://github.com/paramagicdev/tailwind-example\"\n  }), \"Reference Repository\")), mdx(\"h3\", null, \"File structure\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-project\"\n  }), \"- current_directory/\\n| dist/\\n  |-- index.html\\n| src/\\n  |-- index.js\\n  |-- styles.css\\n| package-lock.json\\n| package.json\\n| postcss.config.js\\n| README.md\\n| tailwind.config.js\\n| webpack.config.js\\n\")), mdx(\"h3\", null, \"CLI Commands\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm init # if new project\\n\\n# install packages\\nnpm install --save-dev \\\\\\nwebpack webpack-cli webpack-dev-server  \\\\\\npostcss tailwindcss \\\\\\npostcss-loader css-loader style-loader \\\\\\n\\n# Setup config files\\n&& npx tailwind init \\\\\\n&& touch webpack.config.js \\\\\\n&& touch postcss.config.js\\n\")), mdx(\"h3\", null, \"Configuration files\"), mdx(\"p\", null, \"This is the default from tailwind\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// tailwind.config.js\\nmodule.exports = {\\n  theme: {\\n    extend: {},\\n  },\\n  variants: {},\\n  plugins: [],\\n}\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"If you don\\u2019t want to use webpack-dev-server you don\\u2019t have to. Personally, I like\\nit for live-reloading in my browser. All I can really say about this is just pay\\nattention to paths and make sure you check the webpack documentation. They do\\na far better job of explaining what is going on here.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// webpack.config.js\\nconst path = require(\\\"path\\\")\\n\\nmodule.exports = {\\n  entry: \\\"./src/index.js\\\",\\n  output: {\\n    path: path.resolve(__dirname, \\\"dist\\\"),\\n    filename: \\\"bundle.js\\\",\\n  },\\n\\n  module: {\\n    rules: [\\n      {\\n        test: /\\\\.css$/,\\n        use: [\\n          \\\"style-loader\\\",\\n          { loader: \\\"css-loader\\\", options: { importLoaders: 1 } },\\n          \\\"postcss-loader\\\",\\n        ],\\n      },\\n    ],\\n  },\\n\\n  // Optional for webpack-dev-server\\n  devServer: {\\n    watchContentBase: true,\\n    contentBase: path.resolve(__dirname, \\\"dist\\\"),\\n    open: true,\\n  },\\n}\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Feel free to add PurgeCSS, postcss-nested, postcss-import, etc here.\\nFor the simplicity of this guide, I will not include it here.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// postcss.config.js\\nmodule.exports = {\\n  plugins: [\\n    require(\\\"tailwindcss\\\")(\\\"./tailwind.config.js\\\"),\\n    require(\\\"autoprefixer\\\"),\\n  ],\\n}\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Use basic tailwind directives, this is where you would import your own\\ncomponents, utilities, and base css.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/styles.css */\\n\\n@tailwind base;\\n\\n@tailwind components;\\n\\n@tailwind utilities;\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"b\", null, \" This is incredibly important \"), mdx(\"p\", null, \"If you do not import \\u2018./styles.css\\u2019 the tailwind directives will not run\\nand everything you just did above will not even run.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// src/index.js\\nimport \\\"./styles.css\\\"\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Just a simple html template to play around with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<!-- dist/index.html -->\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <title>Title</title>\\n  </head>\\n  <body>\\n    <div class=\\\"text-red-500\\\">Test Input</div>\\n\\n    <!-- Where webpack will output to -->\\n    <script src=\\\"bundle.js\\\"></script>\\n  </body>\\n</html>\\n\")), mdx(\"p\", null, \"Below are commands to run your newly set up repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npx webpack-dev-server # This will let you view it on localhost with live-reload\\nnpx webpack # Will build the project\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// package.json\\n{\\n  // ...\\n  \\\"scripts\\\": {\\n    \\\"dev:watch\\\": \\\"webpack-dev-server --mode=development --config webpack.config.js\\\",\\n    \\\"dev:build\\\": \\\"webpack --mode=development --config webpack.config.js\\\"\\n  }\\n  // ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm run dev:watch\\nnpm run dev:build\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"This should get you up and running with tailwindCSS in a development environment.\\nI don\\u2019t recommend this for production particularly because it does not have PurgeCSS.\\nThis is meant more as a quick reference to start a project. I also recommend digging\\ndeeper into webpacks documentation as well as PostCSS to get a better idea on how\\nto use both.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/javascript/tailwindWebpackPostCSS/","previous":{"id":"cf5673cd-e3da-5f77-ad7c-168094c9239d","fields":{"slug":"/javascript/webpackDevServerLiveReloading/"},"frontmatter":{"title":"JS - How to configure webpack-dev-server live-reloading"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS - How to configure webpack-dev-server live-reloading\",\n  \"date\": \"2019-10-10T23:05:07\",\n  \"description\": \"In this post, I will go over how to configure webpack and webpack-dev-server to allow for live-reloading similar to live-server\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Quick Start\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/paramagicdev/TicTacToeJS\"\n  }), \"Reference Repository\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm init # if it's a new project\\n\\nnpm install webpack webpack-cli webpack-dev-server\\n\")), mdx(\"p\", null, \"Add the following configuration in your root directory and it will allow for\\nlive reloading as well as automatically opening the default browser\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/paramagicdev/TicTacToeJS/blob/master/webpack.config.js\"\n  }), \"Reference Webpack Config\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// webpack.config.js\\nconst path = require(\\\"path\\\")\\n\\nmodule.exports = {\\n  entry: \\\"./src/index.js\\\",\\n  output: {\\n    path: path.resolve(__dirname, \\\"dist\\\"),\\n    filename: \\\"bundle.js\\\",\\n  },\\n\\n  devServer: {\\n    open: true,\\n    publicPath: \\\"\\\",\\n    contentBase: path.resolve(__dirname, \\\"dist\\\"),\\n    watchContentBase: true,\\n    compress: true,\\n  },\\n}\\n\")), mdx(\"p\", null, \"Then running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx webpack-dev-server\"), \" will automatically open the default web\\nbrowser and allow automatic browser refreshing on file changes.\"), mdx(\"h2\", null, \"In depth explanation\"), mdx(\"p\", null, \"Alright, so there\\u2019s a few assumptions when creating this configuration.\"), mdx(\"h3\", null, \"File structure:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-project\"\n  }), \"dist/\\n|-- style.css\\n|-- index.html\\nsrc/\\n|-- index.js\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"// dist/index.html\\n<html lang=\\\"en\\\">\\n  <head></head>\\n  <body>\\n    <!-- Name of your webpack bundle -->\\n    <script src=\\\"./bundle.js\\\"></script>\\n  </body>\\n</html>\\n\")), mdx(\"p\", null, \"It is important that the script you source, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script src=\\\"./bundle.js></script>\\\"\"), \"\\nis the same path as what is output by webpack in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webpack.config.js\"), \" file\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// Resolves to './dist/bundle.js'\\n  output: {\\n    path: path.resolve(__dirname, \\\"dist\\\"),\\n    filename: \\\"bundle.js\\\",\\n  },\\n\")), mdx(\"p\", null, \"This is important because webpack-dev-server saves your new bundle into memory\\nand does not actually build a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundle.js\"), \" in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dist/\"), \" directory.\"), mdx(\"h3\", null, \"DevServer configuration\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// webpack.config.js\\n\\nmodule.exports = {\\n  // Above code omitted for brevity\\n  devServer: {\\n    open: true, // Tells webpack-dev-server to open your default browser\\n    publicPath: \\\"\\\", // Where your webpack bundle will be sent to\\n    contentBase: path.resolve(__dirname, \\\"dist\\\"), // Where your static files are, ie: index.html\\n    watchContentBase: true, // Enable live-reloading\\n    compress: true, // no real significance here\\n  },\\n}\\n\")), mdx(\"p\", null, \"Alright, lets go through line by line\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open: true\"), \" : Tells webpack-dev-server to automatically open the browser to the\\npath provided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contentBase\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publicPath: \\\"\\\"\"), \" : This tells webpack where to send the bundle to. In this case, just set it to the current directory. This is prepended to\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"output: {\\n  path: path.resolve(__dirname, 'dist'),\\n  filename: 'bundle.js',\\n}\\n\")), mdx(\"p\", null, \"So if publicPath was set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"dist/\\\"\"), \", then in that case, your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundle.js\"), \" file\\nwould be in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./dist/dist/bundle.js\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./dist/bundle.js\"), \". Yes, it\\u2019s confusing. I know, it tripped me up for a while.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contentBase: path.resolve(__dirname, \\\"dist\\\")\"), \" : This tells webpack-dev-server\\nwhat files to watch. This should be where your static files are. IE: index.html,\\nstyle.css, etc.., basically, anything that webpack does not touch when bundling.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"watchContentBase: true\"), \" : This enables live-reloading, this auto-refreshes\\nthe browser.\"))), mdx(\"p\", null, \"In my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/TicTacToeJS\"\n  }), \"Tic Tac Toe Repo\"), \" I see\\nthe following output:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\u2139 \\uFF62wds\\uFF63: Project is running at http://localhost:8080/\\n\\u2139 \\uFF62wds\\uFF63: webpack output is served from /\\n\\u2139 \\uFF62wds\\uFF63: Content not from webpack is served from /home/krog/odin-project/javascript/TicTacToeJS/dist\\n### Below code omitted\\n\")), mdx(\"p\", null, \"This is telling me, if I open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080\"), \" it will automatically\\ndisplay \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'/index.html'\"), \" for me. Webpack output is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/bundle.js\"), \" Both files\\nwill have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dist/\"), \" prepended to them because that is the directory that we are opening.\"), mdx(\"p\", null, \"Yes. I know. Confusing.\", mdx(\"br\", null), mdx(\"br\", null), \"\\nPlay around with my repo, play with the config.\\nRead the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/configuration/dev-server/\"\n  }), \"webpack-dev-server documentation\"), \". Eventually it will click. Best of luck learning webpack!\", mdx(\"br\", null), mdx(\"br\", null), \"\\nIf you have any questions feel free to email me: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"mailto:Konnor7414@gmail.com\"\n  }), \"Konnor7414@gmail.com\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"920c8465-2cbb-50bf-9f0b-04742be289ff","fields":{"slug":"/learning-php/part8/"},"frontmatter":{"title":"PHP for Beginners - Part 8 - What the heck is PDO?"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PHP for Beginners - Part 8 - What the heck is PDO?\",\n  \"date\": \"2019-11-23T13:02:49\",\n  \"description\": \"Lets learn about PDO and why its important.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Okay, lets continue where we left off with MySQL prior to learning classes.\"), mdx(\"p\", null, \"First, make sure your MySQL still works. Ensure you have a usable database for use\\nby the PDO builtin class for PHP.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mysql\\n$ -> create database mytodo; # Create the database\\n$ -> show databases # Ensure it appears\\n$ -> exit\\n\")), mdx(\"p\", null, \"Alright, now lets dive in.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n\\n<?php\\n\\ntry {\\n  $pdo = new PDO('mysql:host=127.0.0.1;dbname=mytodos', 'root', 'Medic12!');\\n} catch(PDOException $e) {\\n  die('could not connect.');\\n}\\n\\nrequire 'index.view.php';\\n\")), mdx(\"br\", null), mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}