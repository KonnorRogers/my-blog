{"componentChunkName":"component---src-templates-blog-post-js","path":"/learning-php/part3/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"5051fe12-774d-5d10-980c-1fc5aee7c70c","excerpt":"Part 3 Laracasts main site \n Laracasts - PHP for beginners Chapters covered: Chapter 6 - Understanding Arrays \n Chapter 7 - Associative Arrays Chapterâ€¦","frontmatter":{"title":"Learning PHP - Part 3 - Arrays, Arrays, and more Arrays","date":"August 18, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 3 - Arrays, Arrays, and more Arrays\",\n  \"date\": \"2019-08-18T19:27:44\",\n  \"description\": \"Lets dive deep into arrays and associative arrays\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 3\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/6\"\n  }), \"Chapter 6 - Understanding Arrays\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/7\"\n  }), \"Chapter 7 - Associative Arrays\"), mdx(\"br\", null)), mdx(\"h2\", null, \"Chapter 6 - Understanding Arrays\"), mdx(\"h3\", null, \"Looping through an array\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$names = ['Bob', 'Billy', 'Jimmy'];\\n\\nforeach ($names as $name) {\\n  echo $name . ', ';\\n};\\n\\n// Outputs: Bob, Billy, Jimmy,\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Alright, now lets break it out to the view and create a list:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$names = ['Bob', 'Billy', 'Jimmy'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<ul>\\n  <?php\\n    foreach ($names as $name) {\\n      echo \\\"<li>$name</li>\\\";\\n    }\\n  ?>\\n\\n  <-- Alternative syntax -->\\n  <?php foreach ($names as $name) : ?>\\n    <!-- PHP parsing has stopped, drop to HTML -->\\n    <li>\\n      <!-- Start parsing PHP -->\\n      <?= $name ?>\\n      <!-- End parsing PHP -->\\n    </li>\\n  <!-- End the loop by parsing PHP again -->\\n  <?php endforeach; ?>\\n</ul>\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"This will produce the following:\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bob\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"billy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jimmy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bob\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"billy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jimmy\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Chapter 7 - Associative Arrays\"), mdx(\"p\", null, \"These appear to me to be similar to a ruby hash so here we go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\nrequire 'index.view.php';\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<!-- Above html omitted for brevity -->\\n<ul>\\n  <?php foreach ($person as $key => $feature) : ?>\\n    <li>\\n      <strong><?= $key; ?>: </strong><?= $feature; ?>\\n    </li>\\n  <?php endforeach; ?>\\n</ul>\\n<!-- Below html omitted for brevity -->\\n\")), mdx(\"p\", null, \"This will produce the following:\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", null, \"age: \"), \"23\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", null, \"hair: \"), \"blonde\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", null, \"career: \"), \"web developer\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Pushing to Arrays\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// Pushing to associative arrays\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\n$person['name'] = 'Bob';\\n// Appends bob to $person\\n\\n// Pushing to non-associative arrays\\n$animals = ['dog', 'cat'];\\n\\n$animals[] = 'zebra';\\n// Appends 'zebra' to $animals\\n\")), mdx(\"h3\", null, \"Printing Arrays\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\n$person['name'] = 'Bob';\\n\\n// Will convert the array to a string then print it\\nvar_dump($person);\\n\\n// Will stop parsing after this function, will still print $person\\ndie(var_dump($person));\\n\\n// Wont get evaluated because of die();\\nrequire 'index.view.php'\\n\")), mdx(\"h3\", null, \"Removing an item from an associative array\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// associative array\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\n// Remove hair\\nunset($person['hair']);\\n\\n/* $person = [\\n    'age' => 23,\\n    'career' => 'web developer'\\n    ]\\n*/\\n\")), mdx(\"h3\", null, \"Homework\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// homework.php\\n<?php\\n\\n$task = [\\n  'title' => 'Renew registration',\\n  'due_date' => 'tomorrow',\\n  'assigned_to' => 'Konnor',\\n  'completed' => True\\n];\\n\")), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, \"[Follow along with my repo](https://github.com/ParamagicDev/php-for-beginners)\", mdx(\"br\", null)), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/learning-php/part3/","previous":{"id":"068d29c8-9adf-5fd5-a0b4-5de969a10849","fields":{"slug":"/learning-php/part2/"},"frontmatter":{"title":"Learning PHP - Part 2 - Lets get coding!"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 2 - Lets get coding!\",\n  \"date\": \"2019-08-18T04:03:54\",\n  \"description\": \"Learn php with me! Part 2\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 2\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/2\"\n  }), \"Chapter 2 - Install a code editor\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/3\"\n  }), \"Chapter 3 - Variables\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/4\"\n  }), \"Chapter 4 - PHP and HTML\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/5\"\n  }), \"Chapter 5 - Seperation of PHP logic\")), mdx(\"h2\", null, \"Hello World\"), mdx(\"p\", null, \"Are you really learning a new program if you don\\u2019t create a simple hello world?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// hello-world.php\\n<?php\\n\\necho 'Hello World';\\n\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"In a terminal run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"php hello-world.php\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Should echo \\u2018Hello World\\u2019 to the command line.\"), mdx(\"strong\", null, \"Note: \"), \" Also of note, when in a plain php file, without the closing ?> it is best practice due to parsing errors if you add extra lines after ?>\", mdx(\"p\", null, \"Easy win after the nightmare install process.\"), mdx(\"h2\", null, \"Variables\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$name = 'Konnor Rogers';\\n\\n// Concats $name onto 'Hello'\\necho 'Hello' . $name;\\n\\n// Or\\necho \\\"Hello {$name}\\\";\\n\")), mdx(\"br\", null), mdx(\"h2\", null, \"HTML + PHP\"), mdx(\"p\", null, \"Pulling in parameters\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// pulls in the 'name' parameter\\n$name = htmlspecialchars($_GET['name']);\\n\\necho \\\"Hello, \\\" . $name;\\n// localhost:8888/?name=konnor #=> Hello, Konnor\\n\")), mdx(\"br\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"htmlspecialchars();\"), \" Will convert special characters as the name suggests so\\npeople cannot inject malicious links, scripts, etc\"), mdx(\"h2\", null, \"Seperating php logic\"), mdx(\"p\", null, \"In a small low level MVC framework, this is a microcosm of a view.\\nindex.view.php is essentially a template to be rendered, and index.php provides\\nany necessary variables to be rendered. For example: \", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$greeting\"), \" may be the result of a database call. You want that to be done server\\nside without concern for the actual way it is being rendered.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$greeting = 'Hello World';\\n\\n// pulls in the view defined below\\nrequire 'index.view.php';\\n// Optionally, you can use: include 'index.view.php';\\n// Read the note below about the difference\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"Note: \"), \" After perusing some documentation, `include` and `require` do essentially the same thing. They pull in variables and other data @ the level it is called. The only difference is the following:\", mdx(\"br\", null), \"`include` \", mdx(\"em\", null, \"will not cause\"), \" a compilation error if the file does not exist or is unreadable. It will only send a compilation warning.\", mdx(\"br\", null), \"`require` \", mdx(\"em\", null, \"will cause\"), \" a compilation error if the file does not exist or is unreadable\", mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <meta charset=\\\"UTF-8\\\">\\n  <title>Document</title>\\n  <style>\\n    header {\\n      background: #e3e3e3;\\n      padding: 2rem;\\n      text-align: center;\\n    }\\n  </style>\\n  </head>\\n  <body>\\n    <header>\\n      <h1><?= $greeting; ?></h1>\\n    </header>\\n  </body>\\n</html>\\n\")), mdx(\"br\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<?= ?> is the same as <?php echo \\\"string\\\" ?>\")), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, \"[Follow along with my repo](https://github.com/ParamagicDev/php-for-beginners)\"), mdx(\"br\", null), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"d88a3ca7-5bc2-508b-bc95-1a6909f09490","fields":{"slug":"/learning-php/part4/"},"frontmatter":{"title":"Learning PHP - Part 4 - Lets get conditional"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 4 - Lets get conditional\",\n  \"date\": \"2019-08-19T00:28:06\",\n  \"description\": \"Dealing with conditionals and booleans\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 4\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/8\"\n  }), \"Chapter 8 - Booleans\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/9\"\n  }), \"Chapter 9 - Conditionals\")), mdx(\"h2\", null, \"Chapter 8 - Booleans\"), mdx(\"p\", null, \"I diverged from laracasts here. I didn\\u2019t want to make\\nmultiple \\\\<li\", \">\", \" tags, so I used a conditional which is\\nin the next chapter. The code is as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<!-- Above HTML omitted for brevity -->\\n<ul>\\n  <?php foreach ($task as $key => $value) : ?>\\n    <li>\\n      <strong><?= ucwords($key); ?>: </strong>\\n        <?php if ($key == 'completed') {\\n          $value = ($value) ? 'Completed' : 'Incomplete';\\n        }; ?>\\n      <?= $value; ?>\\n    </li>\\n  <?php endforeach; ?>\\n</ul>\\n<!-- Below HTML omitted for brevity -->\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Yes, I know it looks like a lot but lets highlight the keypart:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<?php if ($key == 'completed') {\\n  $value = ($value) ? 'Completed' : 'Incomplete';\\n}; ?>\\n\")), mdx(\"strong\", null, \"Line 1: \"), \" \", mdx(\"pre\", null, \"<?php if (\\\\$key == 'completed')\"), mdx(\"p\", null, \"If the current key equal to the string \\u2018completed\\u2019, then move to\\nthe next line, if it\\u2019s not equal to \\u2018completed\\u2019, then move past\\nthe curly braces.\"), mdx(\"strong\", null, \"Line 2: \"), \" `$value = ($value) ? 'Completed' : 'Incomplete';`\", mdx(\"br\", null), \"set $value equal to 'Completed' if TRUE set $value equal to 'Incomplete' if FALSE 'Incomplete'\", mdx(\"br\", null), \"This is called the \\\"ternary operator\\\" should you want to read more\", mdx(\"br\", null), mdx(\"strong\", null, \"Line 3: \"), \" `}; ?\\\\>`\", mdx(\"br\", null), \"End the block, continue to the end\", mdx(\"strong\", null, mdx(\"em\", null, \"Note: \")), mdx(\"br\", null), \" I cannot find any definitive documentation as to whether to use:\", mdx(\"br\", null), \"`True vs TRUE vs true`\", mdx(\"br\", null), \"`False vs FALSE vs false`\", mdx(\"br\", null), \"All of the above are booleans.\", mdx(\"p\", null, \"I found this article \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.php-fig.org/psr/psr-12/#25-keywords-and-types\"\n  }), \"PHP The Right Way Keyword & Type\")), mdx(\"p\", null, \"This suggests to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" for booleans\"), mdx(\"h2\", null, \"Chapter 9 - Conditionals\"), mdx(\"p\", null, \"Plain if statement in php:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<?php\\n\\nif (condition) {\\n  do stuff\\n} else {\\n  do other stuff\\n};\\n\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"If statements that drop down to plain html to make it more readable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<!-- more HTML -->\\n\\n<?php if (condition) : ?>\\n  <p><strong>Words</strong></p>\\n<?php else : ?>\\n  <h1>Do other stuff</h1>\\n<?php endif; ?>\\n\\n<!-- more HTML -->\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Checking if something is NOT true:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<?php\\n\\n$boolean = true\\nif (! $boolean){\\n  // Will run if the value of $boolean == false\\n} else {\\n  // Will run if the value of $boolean == true\\n}\\n\")), mdx(\"p\", null, \"This is called the \\u201CBANG\\u201D operator.\"), mdx(\"p\", null, \"This is all I got for chapter 9. Lets move to chapter 10.\"), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, mdx(\"a\", {\n    href: \"https://github.com/ParamagicDev/php-for-beginners)\"\n  }, \"Follow along with my repo\"), mdx(\"br\", null)), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\")), mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null), \"[PHP The Right Way](https://phptherightway.com)\");\n}\n;\nMDXContent.isMDXComponent = true;"}}}}