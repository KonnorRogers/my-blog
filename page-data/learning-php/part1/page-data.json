{"componentChunkName":"component---src-templates-blog-post-js","path":"/learning-php/part1/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"bb399c4b-0646-5b84-82d8-ce954342fc0e","excerpt":"Purpose To document my trials & tribulations with learning PHP through laracasts.\nThis is the article will cover the 1st step from Laracasts. Part 1 Laracastsâ€¦","frontmatter":{"title":"Learning PHP - Part 1 - Lets Compile PHP!","date":"August 18, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 1 - Lets Compile PHP!\",\n  \"date\": \"2019-08-18\",\n  \"description\": \"Compiling PHP with PHPENV is not easy, come enjoy my frustrations in this task.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Purpose\"), mdx(\"p\", null, \"To document my trials & tribulations with learning PHP through laracasts.\\nThis is the article will cover the 1st step from Laracasts.\"), mdx(\"h2\", null, \"Part 1\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\"), mdx(\"br\", null)), mdx(\"h2\", null, \"Chapters\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/1\"\n  }), \"Chapter 1 - Installing PHP\")), mdx(\"h2\", null, \"Installing PHP\"), mdx(\"p\", null, \"Originally, I installed PHP the usual way.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"sudo apt install -y php\\nphp -v\\n# PHP php-7.2.x ...\\n\")), mdx(\"p\", null, \"Okay sweet its installed\\u2026hmmm I wonder if anyone else uses an environment manager\\nlike I do Ruby.\"), mdx(\"p\", null, \"So with very little effort I found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/phpenv/phpenv\"\n  }), \"phpenv\"), \"! Aha! Awesome good stuff. \", mdx(\"br\", null), \"\\nThe documentation linked to an easier to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/phpenv/phpenv-installer\"\n  }), \"phpenv-installer\"), \".\\nOk cool. I have a ton of packages from when I compiled Ruby. Piece of cake.\\nI have my handy dandy vps-cli gem packages I\\u2019m good to go! Okay, here we go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"curl -L https://raw.githubusercontent.com/phpenv/phpenv-installer/master/bin/phpenv-installer \\\\\\n    | bash\\n# phpenv does its thing. Tells me to add it to my .zshrc.\\n# Being the compliant monkey I am, I do it.\\n\\nphpenv install \\\"7.3.8\\\"\\n# configure: error reinstall BZip2\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Yea sure, no problem whatever, I\\u2019ll google, find the package easy peezy.\", mdx(\"br\", null)), mdx(\"p\", null, \"I was dead wrong. I struggled with multiple compilation errors for about ~1hour.\\nAbout 10 compilation errors later and adding multiple packages to my VpsCli gem,\\n(Which I really need to fix. I plan to, but different problem for a different day),\\nI was finally able to compile using phpenv.\"), mdx(\"p\", null, \"After a lot of blood sweat and tears, I finally managed to compile php.\", mdx(\"br\", null), \"\\nHere are all the .deb packages I used on Ubuntu 18.10\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"module VpsCli\\n  class Packages\\n    # ...above code omitted for brevity\\n    LIBS = %w[libssl-dev libcurl4-openssl-dev libxml2-dev\\n              re2c libbz2-dev libjpeg-turbo8-dev libpng-dev\\n              libzip-dev libtidy-dev libxslt-dev automake libtool autoconf\\n              flex bison libkrb5-dev libonig-dev].freeze\\n    # ...below code omitted for brevity\\n  end\\nend\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \" \", \"In ruby land heres how I would handle it with a quick pry session:\", \" \"), mdx(\"br\", null), \"```bash gem install vps_cli gem install pry\", mdx(\"p\", null, \"pry\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"require \\u2018vps_cli\\u2019\\nrequire \\u2018rake\\u2019\\npkgs = VpsCli::Packages::LIBS.join(\\u2019 \\u2019)\\nRake.sh(\\u201Csudo apt install -y #{pkgs}\\u201D)\\nexit\")), mdx(\"p\", null, \"phpenv install \\u201C7.3.8\\u201D # SUCCESS!\\nphpenv global \\u201C7.3.8\\u201D\\nphp -v\"), mdx(\"h1\", null, \"PHP 7.3.8 \\u2026\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/vps_cli/blob/master/lib/vps_cli/packages.rb\"\n  }), \"Link to VpsCli repository - lib/vps_cli/packages.rb\"), mdx(\"br\", null), mdx(\"br\", null), \"\\nYes, I know the codebase needs some TLC to get it to where I want it to be.\\nI wrote it ~6-8months ago. Maybe I\\u2019ll rewrite it in PHP?! Who knows! But continue\\non this Laracasts PHP journey with me!\"), mdx(\"h2\", null, \"What I learned\"), mdx(\"p\", null, \"Maybe next time I should stick to a simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt install -y php\"), \"\\u2026\", mdx(\"br\", null), \"\\nBUT! On the off chance I need a different PHP version I\\u2019m all set!\\nNow, let\\u2019s start building!\"), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, mdx(\"a\", {\n    href: \"https://github.com/ParamagicDev/php-for-beginners\"\n  }, \"Follow along with my repo\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"PHP for beginners\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/phpenv/phpenv\"\n  }), \"PHPENV github\"), \" \", mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/phpenv/phpenv-installer\"\n  }), \"PHPENV-INSTALLER - github\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/learning-php/part1/","previous":{"id":"b9b52a72-c728-5a06-b150-3b062b14a079","fields":{"slug":"/my-second-post/"},"frontmatter":{"title":"My Second Post!"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"My Second Post!\",\n  \"date\": \"2015-05-06T23:46:37.121Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Wow! I love blogging so much already.\"), mdx(\"p\", null, \"Did you know that \\u201Cdespite its name, salted duck eggs can also be made from\\nchicken eggs, though the taste and texture will be somewhat different, and the\\negg yolk will be less rich.\\u201D?\\n(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://en.wikipedia.org/wiki/Salted_duck_egg\"\n  }), \"Wikipedia Link\"), \")\"), mdx(\"p\", null, \"Yeah, I didn\\u2019t either.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"068d29c8-9adf-5fd5-a0b4-5de969a10849","fields":{"slug":"/learning-php/part2/"},"frontmatter":{"title":"Learning PHP - Part 2 - Lets get coding!"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 2 - Lets get coding!\",\n  \"date\": \"2019-08-18T04:03:54\",\n  \"description\": \"Learn php with me! Part 2\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 2\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/2\"\n  }), \"Chapter 2 - Install a code editor\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/3\"\n  }), \"Chapter 3 - Variables\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/4\"\n  }), \"Chapter 4 - PHP and HTML\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/5\"\n  }), \"Chapter 5 - Seperation of PHP logic\")), mdx(\"h2\", null, \"Hello World\"), mdx(\"p\", null, \"Are you really learning a new program if you don\\u2019t create a simple hello world?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// hello-world.php\\n<?php\\n\\necho 'Hello World';\\n\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"In a terminal run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"php hello-world.php\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Should echo \\u2018Hello World\\u2019 to the command line.\"), mdx(\"strong\", null, \"Note: \"), \" Also of note, when in a plain php file, without the closing ?> it is best practice due to parsing errors if you add extra lines after ?>\", mdx(\"p\", null, \"Easy win after the nightmare install process.\"), mdx(\"h2\", null, \"Variables\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$name = 'Konnor Rogers';\\n\\n// Concats $name onto 'Hello'\\necho 'Hello' . $name;\\n\\n// Or\\necho \\\"Hello {$name}\\\";\\n\")), mdx(\"br\", null), mdx(\"h2\", null, \"HTML + PHP\"), mdx(\"p\", null, \"Pulling in parameters\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// pulls in the 'name' parameter\\n$name = htmlspecialchars($_GET['name']);\\n\\necho \\\"Hello, \\\" . $name;\\n// localhost:8888/?name=konnor #=> Hello, Konnor\\n\")), mdx(\"br\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"htmlspecialchars();\"), \" Will convert special characters as the name suggests so\\npeople cannot inject malicious links, scripts, etc\"), mdx(\"h2\", null, \"Seperating php logic\"), mdx(\"p\", null, \"In a small low level MVC framework, this is a microcosm of a view.\\nindex.view.php is essentially a template to be rendered, and index.php provides\\nany necessary variables to be rendered. For example: \", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$greeting\"), \" may be the result of a database call. You want that to be done server\\nside without concern for the actual way it is being rendered.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$greeting = 'Hello World';\\n\\n// pulls in the view defined below\\nrequire 'index.view.php';\\n// Optionally, you can use: include 'index.view.php';\\n// Read the note below about the difference\\n\")), mdx(\"br\", null), mdx(\"strong\", null, \"Note: \"), \" After perusing some documentation, `include` and `require` do essentially the same thing. They pull in variables and other data @ the level it is called. The only difference is the following:\", mdx(\"br\", null), \"`include` \", mdx(\"em\", null, \"will not cause\"), \" a compilation error if the file does not exist or is unreadable. It will only send a compilation warning.\", mdx(\"br\", null), \"`require` \", mdx(\"em\", null, \"will cause\"), \" a compilation error if the file does not exist or is unreadable\", mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <meta charset=\\\"UTF-8\\\">\\n  <title>Document</title>\\n  <style>\\n    header {\\n      background: #e3e3e3;\\n      padding: 2rem;\\n      text-align: center;\\n    }\\n  </style>\\n  </head>\\n  <body>\\n    <header>\\n      <h1><?= $greeting; ?></h1>\\n    </header>\\n  </body>\\n</html>\\n\")), mdx(\"br\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<?= ?> is the same as <?php echo \\\"string\\\" ?>\")), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, \"[Follow along with my repo](https://github.com/ParamagicDev/php-for-beginners)\"), mdx(\"br\", null), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}