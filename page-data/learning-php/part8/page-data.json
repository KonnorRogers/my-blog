{"componentChunkName":"component---src-templates-blog-post-js","path":"/learning-php/part8/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"4d7e742f-bae7-5a4f-bab1-64fe7aa0dcdf","excerpt":"Okay, lets continue where we left off with MySQL prior to learning classes. First, make sure your MySQL still works. Ensure you have a usable database for useâ€¦","frontmatter":{"title":"PHP for Beginners - Part 8 - What the heck is PDO?","date":"November 23, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PHP for Beginners - Part 8 - What the heck is PDO?\",\n  \"date\": \"2019-11-23T13:02:49\",\n  \"description\": \"Lets learn about PDO and why its important.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Okay, lets continue where we left off with MySQL prior to learning classes.\"), mdx(\"p\", null, \"First, make sure your MySQL still works. Ensure you have a usable database for use\\nby the PDO builtin class for PHP.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mysql\\n$ -> create database mytodo; # Create the database\\n$ -> show databases # Ensure it appears\\n$ -> exit\\n\")), mdx(\"p\", null, \"Alright, now lets dive in.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n\\n<?php\\n\\ntry {\\n  $pdo = new PDO('mysql:host=127.0.0.1;dbname=mytodos', 'root', 'Medic12!');\\n} catch(PDOException $e) {\\n  die('could not connect.');\\n}\\n\\nrequire 'index.view.php';\\n\")), mdx(\"br\", null), mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/learning-php/part8/","previous":{"id":"ea029092-b0d9-5b08-aff7-87268c1f3840","fields":{"slug":"/javascript/tailwindWebpackPostCSS/"},"frontmatter":{"title":"How to setup TailwindCSS with PostCSS and Webpack"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to setup TailwindCSS with PostCSS and Webpack\",\n  \"date\": \"2019-10-11T02:59:29\",\n  \"description\": \"I will detail how to setup TailwindCSS with PostCSS and Webpack. I will do the bare minimum setup to get it working without many plugins.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"At the time of writing, this works using Tailwind v1.1.2\"), mdx(\"h2\", null, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"https://github.com/paramagicdev/tailwind-example\"\n  }), \"Reference Repository\")), mdx(\"h3\", null, \"File structure\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-project\"\n  }), \"- current_directory/\\n| dist/\\n  |-- index.html\\n| src/\\n  |-- index.js\\n  |-- styles.css\\n| package-lock.json\\n| package.json\\n| postcss.config.js\\n| README.md\\n| tailwind.config.js\\n| webpack.config.js\\n\")), mdx(\"h3\", null, \"CLI Commands\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm init # if new project\\n\\n# install packages\\nnpm install --save-dev \\\\\\nwebpack webpack-cli webpack-dev-server  \\\\\\npostcss tailwindcss \\\\\\npostcss-loader css-loader style-loader \\\\\\n\\n# Setup config files\\n&& npx tailwind init \\\\\\n&& touch webpack.config.js \\\\\\n&& touch postcss.config.js\\n\")), mdx(\"h3\", null, \"Configuration files\"), mdx(\"p\", null, \"This is the default from tailwind\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// tailwind.config.js\\nmodule.exports = {\\n  theme: {\\n    extend: {},\\n  },\\n  variants: {},\\n  plugins: [],\\n}\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"If you don\\u2019t want to use webpack-dev-server you don\\u2019t have to. Personally, I like\\nit for live-reloading in my browser. All I can really say about this is just pay\\nattention to paths and make sure you check the webpack documentation. They do\\na far better job of explaining what is going on here.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// webpack.config.js\\nconst path = require(\\\"path\\\")\\n\\nmodule.exports = {\\n  entry: \\\"./src/index.js\\\",\\n  output: {\\n    path: path.resolve(__dirname, \\\"dist\\\"),\\n    filename: \\\"bundle.js\\\",\\n  },\\n\\n  module: {\\n    rules: [\\n      {\\n        test: /\\\\.css$/,\\n        use: [\\n          \\\"style-loader\\\",\\n          { loader: \\\"css-loader\\\", options: { importLoaders: 1 } },\\n          \\\"postcss-loader\\\",\\n        ],\\n      },\\n    ],\\n  },\\n\\n  // Optional for webpack-dev-server\\n  devServer: {\\n    watchContentBase: true,\\n    contentBase: path.resolve(__dirname, \\\"dist\\\"),\\n    open: true,\\n  },\\n}\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Feel free to add PurgeCSS, postcss-nested, postcss-import, etc here.\\nFor the simplicity of this guide, I will not include it here.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// postcss.config.js\\nmodule.exports = {\\n  plugins: [\\n    require(\\\"tailwindcss\\\")(\\\"./tailwind.config.js\\\"),\\n    require(\\\"autoprefixer\\\"),\\n  ],\\n}\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Use basic tailwind directives, this is where you would import your own\\ncomponents, utilities, and base css.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/styles.css */\\n\\n@tailwind base;\\n\\n@tailwind components;\\n\\n@tailwind utilities;\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"b\", null, \" This is incredibly important \"), mdx(\"p\", null, \"If you do not import \\u2018./styles.css\\u2019 the tailwind directives will not run\\nand everything you just did above will not even run.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// src/index.js\\nimport \\\"./styles.css\\\"\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Just a simple html template to play around with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<!-- dist/index.html -->\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <title>Title</title>\\n  </head>\\n  <body>\\n    <div class=\\\"text-red-500\\\">Test Input</div>\\n\\n    <!-- Where webpack will output to -->\\n    <script src=\\\"bundle.js\\\"></script>\\n  </body>\\n</html>\\n\")), mdx(\"p\", null, \"Below are commands to run your newly set up repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npx webpack-dev-server # This will let you view it on localhost with live-reload\\nnpx webpack # Will build the project\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// package.json\\n{\\n  // ...\\n  \\\"scripts\\\": {\\n    \\\"dev:watch\\\": \\\"webpack-dev-server --mode=development --config webpack.config.js\\\",\\n    \\\"dev:build\\\": \\\"webpack --mode=development --config webpack.config.js\\\"\\n  }\\n  // ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm run dev:watch\\nnpm run dev:build\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"This should get you up and running with tailwindCSS in a development environment.\\nI don\\u2019t recommend this for production particularly because it does not have PurgeCSS.\\nThis is meant more as a quick reference to start a project. I also recommend digging\\ndeeper into webpacks documentation as well as PostCSS to get a better idea on how\\nto use both.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"0c925138-ba05-58f5-aeb3-6c078cb303f0","fields":{"slug":"/misc/postgresql-password-reset/"},"frontmatter":{"title":"PostgresQL - Setting up postgres on a local environment"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PostgresQL - Setting up postgres on a local environment\",\n  \"date\": \"2019-11-24T20:59:03\",\n  \"description\": \"I will detail a short and easy way to get PostgresQL running on a Ubuntu based machine for local development.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Purpose\"), mdx(\"p\", null, \"Setting up a database for the first time is never any fun. In this short post I will detail how I have come to setup PostgresQL for local development environments.\"), mdx(\"h3\", null, \"Quick Start\"), mdx(\"h4\", null, \"WARNING:\"), mdx(\"p\", null, \"This will change all instances of /etc/postgresql/\", \"*\", \"/main/pg_hba.conf auth options to \\u2018trust\\u2019 \", mdx(\"br\", null)), mdx(\"p\", null, \"Proceed with caution:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone https://github.com/ParamagicDev/config-files.git ~/paramagic-config-files\\ncd ~/paramagic-config-files\\n./scripts/postgres-setup.sh\\n./scripts/postgres-pass-reset.sh\\n\\npsql -U postgres\\n\\n# This will drop you into a postgres instance as the admin\\n$ alter user postgres with password 'YOUR SNAZZY PASSWORD';\\n$ \\\\q\\n\\n# This will make postgres require a password in order\\n# to be instantiated\\n./scripts/postgres-md5-require.sh\\n\")), mdx(\"h3\", null, \"Explanation\"), mdx(\"p\", null, \"Okay, I\\u2019m assuming you read the quick start, saw the warnings, and decided\\nto read a little more about whats happening in these scripts.\"), mdx(\"h4\", null, \"Installation scripts\"), mdx(\"h5\", null, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/tree/master/scripts\"\n  }), \"My PostgresQL scripts\")), mdx(\"p\", null, \"The contents of these scripts was partially stolen from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/docker-library/postgres/blob/4a82eb932030788572b637c8e138abb94401640c/12/Dockerfile\"\n  }), \"Official PostgresQL Dockerfile\")), mdx(\"p\", null, \"So what does this script do?\"), mdx(\"p\", null, \"Well first let me show you the contents.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/bash\\n\\n# postgres-setup.sh\\npg_user=\\\"postgres\\\"\\npg_dir=\\\"/var/lib/postgresql\\\"\\npg_data=\\\"/var/lib/postgresql/data\\\"\\n\\n# Installs postgresql\\nsudo apt update && sudo apt install \\\\\\n  postgresql postgresql-contrib postgresql-common libpq-dev -y\\n\\n# Creates the postgres user and postgres group\\nsudo groupadd \\\"$pg_user\\\"\\nsudo useradd -r -g \\\"$pg_user\\\" --home-dir=\\\"$pg_dir\\\" --shell=/bin/bash \\\"$pg_user\\\"\\n\\nsudo mkdir -p \\\"$pg_dir\\\"\\nsudo chown -R \\\"$pg_user\\\":\\\"$pg_user\\\" \\\"$pg_dir\\\"\\n\\nsudo mkdir -p \\\"$pg_dir\\\" && sudo chown -R \\\"$pg_user\\\":\\\"$pg_user\\\" \\\"$pg_dir\\\" && \\\\\\n  sudo chmod 2777 /var/run/postgresql\\n\\n\\n# this 777 will be replaced by 700 at runtime (allows semi-arbitrary \\\"--user\\\" values)\\nsudo mkdir -p \\\"$pg_data\\\" \\\\\\n  && sudo chown -R \\\"$pg_user\\\":\\\"$pg_user\\\" \\\"$pg_data\\\" \\\\\\n  && sudo chmod 777 \\\"$pg_data\\\"bash\\n\")), mdx(\"p\", null, \"Basically, this script says:\", mdx(\"br\", null)), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Download postgres from the apt repository (default debian based package manager)\"), mdx(\"br\", null)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then after downloading postgres, create a user for the postgres database named \\u201Cpostgres\\u201D\"), mdx(\"br\", null)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create the appropriate directories and change the read / write / execute properties of each directory based on the offical PostgresQL Dockerfile.\"), mdx(\"br\", null))), mdx(\"p\", null, \"In a nutshell, thats all that the script does.\"), mdx(\"p\", null, \"Now, you can try logging into the database from the command line.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"psql -U postgres\\n\")), mdx(\"p\", null, \"This probably will not work due to permissions set in a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pg_hba.conf\")), mdx(\"p\", null, \"For me, this file was located on my Ubuntu 18.10 & 19.04 machines in the location:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/postgresql/<version-number>/main/pg_hba.conf\")), mdx(\"p\", null, \"So heres where things get tricky. You may have previously setup a password youve forgotten, maybe theres something weird going on and you cant get into the database, anythings possible.\"), mdx(\"p\", null, \"If you checked out the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pg_hba.conf file\"), \" you\\u2019ll see a setup similar to this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-conf\"\n  }), \"# ... above code omitted for brevity\\n# Database administrative login by Unix domain socket\\nlocal   all             postgres                                peer\\n\\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\\n\\n# \\\"local\\\" is for Unix domain socket connections only\\nlocal   all             all                                     peer\\n# IPv4 local connections:\\nhost    all             all             127.0.0.1/32            md5\\n# IPv6 local connections:\\nhost    all             all             ::1/128                 md5\\n# Allow replication connections from localhost, by a user with the\\n# replication privilege.\\n#local   replication     postgres                                peer\\n#host    replication     postgres        127.0.0.1/32            peer\\n#host    replication     postgres        ::1/128                 peer\\n\")), mdx(\"p\", null, \"Without getting too technical, the very last column of each row decides the\\nauthentication option you would like to use. If for some reason you cannot\\nget access to your database, there may be a password set for the user that\\nyou don\\u2019t know.\"), mdx(\"p\", null, \"The easiest way to fix this is to change all options in the last column to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trust\")), mdx(\"p\", null, \"I made a script specifically for changing the options in the last column to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trust\")), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/blob/master/scripts/postgres-pass-reset.sh\"\n  }), \"Change to trust script\")), mdx(\"p\", null, \"Now you can go in and change the password for the user to whatever you would like it to be.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"psql -U postgres\\n\\n# drops you into a postgres instance\\n-> alter user postgres with password 'NEW_PASSWORD'\\\"\\n-> \\\\q\\n\")), mdx(\"p\", null, \"This will change password of the user \\u2018postgres\\u2019 to the value of \\u2018NEW_PASSWORD\\u2019\"), mdx(\"p\", null, \"Now if you would like to lock your database back down I created a script for that as well!\"), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/blob/master/scripts/postgres-md5-require.sh\"\n  }), \"Reset auth options to md5 script\")), mdx(\"p\", null, \"This will now require a password everytime you attempt to login.\"), mdx(\"h3\", null, \"Additional notes\"), mdx(\"p\", null, \"If you don\\u2019t want to use my scripts you can manually edit your\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/postgresql/<version_number>/main/pg_hba.conf\"), \" to reflect the options you would like.\"), mdx(\"p\", null, \"Be careful with this, as for me I\\u2019m using postgresql version 11.5, however, when editing\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/postgresql/11/main/pg_hba.conf\"), \" It did not properly reflect my settings.\"), mdx(\"p\", null, \"I had to edit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/postgresql/9.5/pg_hba.conf\"), \" which is the reason my scripts will change\\nthe value of the auth method in all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/postgresql/<version-number>/pg_hba.conf\"), \" files\"), mdx(\"h3\", null, \"Closing thoughts\"), mdx(\"p\", null, \"Setting up a database is never fun which is why I now always try to script the process.\\nThis one had me stumped for a whole day before I came across the relevant articles. I hope\\nthis article can help you as much as it helped me! Have a fantastic day.\"), mdx(\"p\", null, \"Any questions feel free to email me: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"mailto:Konnor7414@gmail.com\"\n  }), \"Konnor7414@gmail.com\")), mdx(\"p\", null, \"I don\\u2019t claim to know all, and I don\\u2019t even work as a software developer fulltime\\u2026(yet)\\nI\\u2019m sure I made some errors and some mistakes. Feel free to correct me and I will update the article\"), mdx(\"p\", null, \"Setting up a database is never fun which is why I now always try to script the process.\\nThis one had me stumped for a whole day before I came across the relevant articles. I hope\\nthis article can help you as much as it helped me! Have a fantastic day.\"), mdx(\"p\", null, \"Any questions feel free to email me: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"mailto:Konnor7414@gmail.com\"\n  }), \"Konnor7414@gmail.com\")), mdx(\"p\", null, \"I don\\u2019t claim to know all, and I don\\u2019t even work as a software developer fulltime\\u2026(yet)\\nI\\u2019m sure I made some errors and some mistakes. Feel free to correct me and I will update the article.\"), mdx(\"h3\", null, \"Links\"), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://github.com/ParamagicDev/config-files/tree/master/scripts\"\n  }), \"My config-files repo with postgres scripts\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.postgresql.org/\"\n  }), \"PostgresQL Homepage\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/docker-library/postgres/blob/4a82eb932030788572b637c8e138abb94401640c/12/Dockerfile\"\n  }), \"PostgresQL Dockerfile\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://enterprise.arcgis.com/en/server/10.3/cloud/amazon/change-default-database-passwords-on-linux.htm\"\n  }), \"Where I found the sed scripts\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/4494336/how-do-you-store-a-list-of-directories-into-an-array-in-bash-and-then-print-the\"\n  }), \"How I figured out how to put multiple directories into a bash array\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}