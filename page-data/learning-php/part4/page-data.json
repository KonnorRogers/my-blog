{"componentChunkName":"component---src-templates-blog-post-js","path":"/learning-php/part4/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"a162ce11-9eca-5e4c-b554-c469c3591978","excerpt":"Part 4 Laracasts main site \n Laracasts - PHP for beginners Chapters covered: Chapter 8 - Booleans \n Chapter 9 - Conditionals Chapter 8 - Booleans I divergedâ€¦","frontmatter":{"title":"Learning PHP - Part 4 - Lets get conditional","date":"August 19, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 4 - Lets get conditional\",\n  \"date\": \"2019-08-19T00:28:06\",\n  \"description\": \"Dealing with conditionals and booleans\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 4\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/8\"\n  }), \"Chapter 8 - Booleans\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/9\"\n  }), \"Chapter 9 - Conditionals\")), mdx(\"h2\", null, \"Chapter 8 - Booleans\"), mdx(\"p\", null, \"I diverged from laracasts here. I didn\\u2019t want to make\\nmultiple \\\\<li\", \">\", \" tags, so I used a conditional which is\\nin the next chapter. The code is as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<!-- Above HTML omitted for brevity -->\\n<ul>\\n  <?php foreach ($task as $key => $value) : ?>\\n    <li>\\n      <strong><?= ucwords($key); ?>: </strong>\\n        <?php if ($key == 'completed') {\\n          $value = ($value) ? 'Completed' : 'Incomplete';\\n        }; ?>\\n      <?= $value; ?>\\n    </li>\\n  <?php endforeach; ?>\\n</ul>\\n<!-- Below HTML omitted for brevity -->\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Yes, I know it looks like a lot but lets highlight the keypart:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<?php if ($key == 'completed') {\\n  $value = ($value) ? 'Completed' : 'Incomplete';\\n}; ?>\\n\")), mdx(\"strong\", null, \"Line 1: \"), \" \", mdx(\"pre\", null, \"<?php if (\\\\$key == 'completed')\"), mdx(\"p\", null, \"If the current key equal to the string \\u2018completed\\u2019, then move to\\nthe next line, if it\\u2019s not equal to \\u2018completed\\u2019, then move past\\nthe curly braces.\"), mdx(\"strong\", null, \"Line 2: \"), \" `$value = ($value) ? 'Completed' : 'Incomplete';`\", mdx(\"br\", null), \"set $value equal to 'Completed' if TRUE set $value equal to 'Incomplete' if FALSE 'Incomplete'\", mdx(\"br\", null), \"This is called the \\\"ternary operator\\\" should you want to read more\", mdx(\"br\", null), mdx(\"strong\", null, \"Line 3: \"), \" `}; ?\\\\>`\", mdx(\"br\", null), \"End the block, continue to the end\", mdx(\"strong\", null, mdx(\"em\", null, \"Note: \")), mdx(\"br\", null), \" I cannot find any definitive documentation as to whether to use:\", mdx(\"br\", null), \"`True vs TRUE vs true`\", mdx(\"br\", null), \"`False vs FALSE vs false`\", mdx(\"br\", null), \"All of the above are booleans.\", mdx(\"p\", null, \"I found this article \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.php-fig.org/psr/psr-12/#25-keywords-and-types\"\n  }), \"PHP The Right Way Keyword & Type\")), mdx(\"p\", null, \"This suggests to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" for booleans\"), mdx(\"h2\", null, \"Chapter 9 - Conditionals\"), mdx(\"p\", null, \"Plain if statement in php:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<?php\\n\\nif (condition) {\\n  do stuff\\n} else {\\n  do other stuff\\n};\\n\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"If statements that drop down to plain html to make it more readable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<!-- more HTML -->\\n\\n<?php if (condition) : ?>\\n  <p><strong>Words</strong></p>\\n<?php else : ?>\\n  <h1>Do other stuff</h1>\\n<?php endif; ?>\\n\\n<!-- more HTML -->\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Checking if something is NOT true:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"<?php\\n\\n$boolean = true\\nif (! $boolean){\\n  // Will run if the value of $boolean == false\\n} else {\\n  // Will run if the value of $boolean == true\\n}\\n\")), mdx(\"p\", null, \"This is called the \\u201CBANG\\u201D operator.\"), mdx(\"p\", null, \"This is all I got for chapter 9. Lets move to chapter 10.\"), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, mdx(\"a\", {\n    href: \"https://github.com/ParamagicDev/php-for-beginners)\"\n  }, \"Follow along with my repo\"), mdx(\"br\", null)), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\")), mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null), \"[PHP The Right Way](https://phptherightway.com)\");\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/learning-php/part4/","previous":{"id":"f26bf73c-0bb7-516a-ba7b-c2b2f73685be","fields":{"slug":"/learning-php/part3/"},"frontmatter":{"title":"Learning PHP - Part 3 - Arrays, Arrays, and more Arrays"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 3 - Arrays, Arrays, and more Arrays\",\n  \"date\": \"2019-08-18T19:27:44\",\n  \"description\": \"Lets dive deep into arrays and associative arrays\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 3\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/6\"\n  }), \"Chapter 6 - Understanding Arrays\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/7\"\n  }), \"Chapter 7 - Associative Arrays\"), mdx(\"br\", null)), mdx(\"h2\", null, \"Chapter 6 - Understanding Arrays\"), mdx(\"h3\", null, \"Looping through an array\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$names = ['Bob', 'Billy', 'Jimmy'];\\n\\nforeach ($names as $name) {\\n  echo $name . ', ';\\n};\\n\\n// Outputs: Bob, Billy, Jimmy,\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Alright, now lets break it out to the view and create a list:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$names = ['Bob', 'Billy', 'Jimmy'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<ul>\\n  <?php\\n    foreach ($names as $name) {\\n      echo \\\"<li>$name</li>\\\";\\n    }\\n  ?>\\n\\n  <-- Alternative syntax -->\\n  <?php foreach ($names as $name) : ?>\\n    <!-- PHP parsing has stopped, drop to HTML -->\\n    <li>\\n      <!-- Start parsing PHP -->\\n      <?= $name ?>\\n      <!-- End parsing PHP -->\\n    </li>\\n  <!-- End the loop by parsing PHP again -->\\n  <?php endforeach; ?>\\n</ul>\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"This will produce the following:\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bob\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"billy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jimmy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bob\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"billy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jimmy\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Chapter 7 - Associative Arrays\"), mdx(\"p\", null, \"These appear to me to be similar to a ruby hash so here we go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\nrequire 'index.view.php';\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.view.php\\n<!-- Above html omitted for brevity -->\\n<ul>\\n  <?php foreach ($person as $key => $feature) : ?>\\n    <li>\\n      <strong><?= $key; ?>: </strong><?= $feature; ?>\\n    </li>\\n  <?php endforeach; ?>\\n</ul>\\n<!-- Below html omitted for brevity -->\\n\")), mdx(\"p\", null, \"This will produce the following:\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", null, \"age: \"), \"23\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", null, \"hair: \"), \"blonde\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", null, \"career: \"), \"web developer\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Pushing to Arrays\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// Pushing to associative arrays\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\n$person['name'] = 'Bob';\\n// Appends bob to $person\\n\\n// Pushing to non-associative arrays\\n$animals = ['dog', 'cat'];\\n\\n$animals[] = 'zebra';\\n// Appends 'zebra' to $animals\\n\")), mdx(\"h3\", null, \"Printing Arrays\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\n$person['name'] = 'Bob';\\n\\n// Will convert the array to a string then print it\\nvar_dump($person);\\n\\n// Will stop parsing after this function, will still print $person\\ndie(var_dump($person));\\n\\n// Wont get evaluated because of die();\\nrequire 'index.view.php'\\n\")), mdx(\"h3\", null, \"Removing an item from an associative array\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// associative array\\n$person = [\\n  'age' => 23,\\n  'hair' => 'blonde',\\n  'career' => 'web developer'\\n];\\n\\n// Remove hair\\nunset($person['hair']);\\n\\n/* $person = [\\n    'age' => 23,\\n    'career' => 'web developer'\\n    ]\\n*/\\n\")), mdx(\"h3\", null, \"Homework\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// homework.php\\n<?php\\n\\n$task = [\\n  'title' => 'Renew registration',\\n  'due_date' => 'tomorrow',\\n  'assigned_to' => 'Konnor',\\n  'completed' => True\\n];\\n\")), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, \"[Follow along with my repo](https://github.com/ParamagicDev/php-for-beginners)\", mdx(\"br\", null)), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"990f56d8-f4e1-56fb-a00b-092fb6353b81","fields":{"slug":"/learning-php/part5/"},"frontmatter":{"title":"Learning PHP - Part 5 - Lets make it functional"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 5 - Lets make it functional\",\n  \"date\": \"2019-08-26T02:19:15\",\n  \"description\": \"Lets learn a little bit about functions\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 5\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/10\"\n  }), \"Chapter 10 - Functions\")), mdx(\"h3\", null, \"Chapter 10 - Functions\"), mdx(\"p\", null, \"Functions are simple, but very powerful reusable pieces of code. They are the\\nbuilding blocks of any language. Lets see how they help shape PHP.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// Will echo the values of $one, $two, and $three onto your web page\\nfunction dumper($one, $two, $three){\\n  var_dump($one, $two, $three);\\n}\\n\\n\")), mdx(\"p\", null, \"Lets break it down.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"function\"), \" : This tells the PHP interpreter youre defining a function\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dumper()\"), \" : \\u2018dumper\\u2019 is the name of the function when you call it\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"($one, $two, $three)\"), \" : These are whats called \\u201Carguments\\u201D or\\n\\u201Cparameters\\u201D. These are what are passed into the function, this can be blank.\", mdx(\"br\", null)), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"{\\n  var_dump($one, $two, $three);\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"This calls the function:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.php.net/manual/en/function.var-dump.php\"\n  }), \"var_dump()\"), mdx(\"br\", null), \"\\nThis will output your variables onto the page.\", mdx(\"br\", null)), mdx(\"p\", null, \"Lets get a little bit more advanced. Lets create a dd() function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\n// Die and dump\\nfunction dd($val){\\n  echo '<pre>';\\n  die(var_dump($val));\\n  echo '</pre>';\\n}\\n\\n// Will stop anything after this function\\ndd('hello world');\\n\\n// Will not run\\ndd('hi there');\\n\")), mdx(\"p\", null, \"Lets look at what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dd($val)\"), \" is doing.\", mdx(\"br\", null)), mdx(\"p\", null, \"So first, it defines the function dd, then it will take in a 1 variable argument.\", mdx(\"br\", null), \"\\nNext, it will wrap the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"die(var_dump($val)\"), \" inside of \\\\\", mdx(\"pre\", null, \"\\\\\"), \" tags.\\nFinally, it will kill the execution of the php program. Equivalent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exit\"), \".\"), mdx(\"h4\", null, \"Homework\"), mdx(\"p\", null, \"Assume you own a night club. Only allow people 21 or older inside and print a message\\ntelling them if they\\u2019re allowed to come in.\", mdx(\"br\", null)), mdx(\"p\", null, \"My solution:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// functions.php\\n<?php\\n\\nfunction isOldEnough($age){\\n  return ($age >= 21 ? true : false);\\n}\\n\\nfunction echoOldEnough($age){\\n  echo '<p>';\\n  echo 'You are, ' . $age . \\\". \\\";\\n  echo (isOldEnough($age) ? \\\"You can enter the club.\\\" : \\\"You cannot enter.\\\");\\n  echo '</p>';\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// index.php\\n<?php\\n\\nrequire 'functions.php';\\n\\nechoOldEnough(21); // is allowed inside\\nechoOldEnough(20); // is not allowed inside\\n\")), mdx(\"p\", null, \"I\\u2019m not going to go too in depth, but basically \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"echoOldEnough()\"), \" is a wrapper around\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOldEnough()\"), \". This allows you to print a readable message on the webpage.\", mdx(\"br\", null), \"\\nThis function is imported into \\u2018index.php\\u2019 when you run: \", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require 'functions.php';\")), mdx(\"p\", null, \"Lets go to Chapter 11 in the next part.\"), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, \"[Follow along with my repo](https://github.com/ParamagicDev/php-for-beginners)\", mdx(\"br\", null)), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}