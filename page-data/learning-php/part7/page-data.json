{"componentChunkName":"component---src-templates-blog-post-js","path":"/learning-php/part7/","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"mdx":{"id":"be103f1d-b2e7-5477-a4b8-88482273cac4","excerpt":"Part 7 Laracasts main site \n Laracasts - PHP for beginners Chapters covered Chapter 12 - Classes 101 Chapter 12 - Classes 101 What is a class? Well, accordingâ€¦","frontmatter":{"title":"PHP for beginners - Part 7 - Classes?...Like school?","date":"August 26, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PHP for beginners - Part 7 - Classes?...Like school?\",\n  \"date\": \"2019-08-26T06:31:03\",\n  \"description\": \"Lets look into classes in PHP. Classes are the building blocks of Object Oriented Programming\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 7\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/12\"\n  }), \"Chapter 12 - Classes 101\")), mdx(\"h3\", null, \"Chapter 12 - Classes 101\"), mdx(\"p\", null, \"What is a class? Well, according to Wikipedia, this is what a programming class is:\", mdx(\"br\", null), \"\\nIn object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods)\"), mdx(\"p\", null, \"What does that mean? A class is very simply a way of packaging variables and functions\\nwithin a template to be reused or extended.\"), mdx(\"p\", null, \"Yea but what does that mean? Its kind of hard to wrap your head around, but lets\\ndive into what classes do in PHP and how to make them. This will better help you\\nunderstand what\\u2019s going on.\"), mdx(\"h4\", null, \"Syntax\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"class Task {\\n\\n}\\n\")), mdx(\"p\", null, \"Wow thats it? Yes, technically this is all a class needs, however this isnt very\\ndynamic, so lets extend it a little.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"class Task {\\n  protected $description;\\n\\n  public function __construct($description) {\\n    $this->$description;\\n  }\\n}\\n\")), mdx(\"p\", null, \"This is a very basic example and intro to classes.\\nLets break it down now.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class Task\"), \" Define the class name\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"protected $description;\"), \" initialize the variable \\\\$description\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public function __construct($description)\"), \" This is a special \\u2018constructor\\u2019 function.\", mdx(\"br\", null), \"\\nThis means that when a class is \\u2018instantiated\\u2019, to run the following code. Or in other\\nwords when you create a \\u2018new\\u2019 class, do the run the following code.\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$this->$description;\"), \" ahhhh yes. The magical \\u2019\\\\$this\\u2019. In some languages it may just\\nbe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \". This is a tough term to wrap your head around so let\\u2019s keep it simple.\", mdx(\"br\", null)), mdx(\"p\", null, \"In this case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$this\"), \" means, for THIS instance of Task, set the value provided in the constructor to\\nthis instance\\u2019s \\\\$description variable\", mdx(\"br\", null)), mdx(\"p\", null, \"So what the heck does that above statment even mean? Well let\\u2019s continue on. Examples\\nexplain this better than I can. Lets instantiate a the class Task now.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"$task = new Task('I am a description');\\nvar_dump($task);\\n\")), mdx(\"p\", null, \"This will very simply provide a nice human readable version of task displayed in\\nthe web browser of your choice.\"), mdx(\"p\", null, \"Okay, this is great and all, but we can\\u2019t do anything with this right now.\"), mdx(\"p\", null, \"You could try\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"$task = new Task('I am a description');\\nvar_dump($task->$description);\\n\")), mdx(\"p\", null, \"But you\\u2019ll get an access error. So let\\u2019s talk about getters and setters.\\nA getter simply \\u2018gets\\u2019 a value from a class and a setter \\u2018sets\\u2019 a value in a class.\\nGetters and setters are part of a OOP term called \\u2018encapsulation\\u2019. Don\\u2019t worry about\\nwhat that means for now, just know that it may come up in the future.\\nNot very useful, but lets see how it works.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"class Task {\\n  protected $description;\\n\\n  public function __construct($description){\\n    $this->$description;\\n  }\\n\\n  public function getDescription(){\\n    return $this->description;\\n  }\\n\\n  public function setDescription($description){\\n    $this->description = $description;\\n  }\\n}\\n\\n$task = new Task(\\\"Go to the store\\\");\\n\")), mdx(\"br\", null), \"The above defines the class Task. Now lets see how we would access values.\", mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// ...above code omitted for brevity\\n\\n// Accessing the value of $task->description\\nvar_dump($task->getDescription();\\n\\n// Changes the value of $task->description to the new description\\n$task->setDescription(\\\"Go to grandma's house\\\");\\nvar_dump($task->getDescription();\\n// Will now var_dump \\\"Go to grandma's house\\\" instead of \\\"go to store\\\"\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Now what if we want to make multiple tasks and store them in an array?\\nSimple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-php\"\n  }), \"// ...above code omitted for brevity\\n$tasks = [\\n  new Task(\\\"Go to store\\\"),\\n  new Task(\\\"Go to grandma's house\\\"),\\n  new Task(\\\"Go home\\\")\\n];\\n\\nvar_dump($tasks);\\n\")), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, \"[Follow along with my repo](https://github.com/ParamagicDev/php-for-beginners)\", mdx(\"br\", null)), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/learning-php/part7/","previous":{"id":"7473bcd2-35c0-5b38-83f0-004b22d6aab6","fields":{"slug":"/learning-php/part6/"},"frontmatter":{"title":"Learning PHP - Part 6 - MySQL? Or Your SQL?"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning PHP - Part 6 - MySQL? Or Your SQL?\",\n  \"date\": \"2019-08-26T02:24:59\",\n  \"description\": \"Lets learn some basics of SQL based databases, in this case, MySQL\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Part 6\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com\"\n  }), \"Laracasts main site\"), mdx(\"br\", null), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners\"\n  }), \"Laracasts - PHP for beginners\")), mdx(\"h2\", null, \"Chapters covered\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laracasts.com/series/php-for-beginners/episodes/11\"\n  }), \"Chapter 11 - Databases 101\")), mdx(\"h3\", null, \"Chapter 11 - MySQL 101\"), mdx(\"p\", null, \"Now its time to switch gears. Lets learn about MySQL. Its a relational database,\\nor SQL-based database, which essentially means everythings related, as implied\\nby the name via various \\u2018id\\u2019 columns. SQL stands for \\u2018Structured Query Language\\u2019.\\nIt\\u2019s simply a standardized way of accessing data in a database.\"), mdx(\"p\", null, \"This is in contrast to a NoSQL-based database. The most obvious NoSQL-based database\\nis MongoDB. NoSQL essentially follows a way of storing data nonrelationally. I won\\u2019t\\nget into the advantages and disadvantages of both, just know that both exist.\"), mdx(\"h4\", null, \"Installing MySQL - Ubuntu 18.04\"), mdx(\"p\", null, \"Feel free to check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mysql.com/downloads/\"\n  }), \"MySQL downloads page\"), \" for\\nyour specific needs.\"), mdx(\"p\", null, \"For me I used the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo apt update\\nsudo apt install -y mysql-server # installs mysql\\nsudo mysql_secure_installation # will provide various prompts\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Ensure its working:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mysql # enters a prompt\\n  -> exit\\nsudo service mysql status\\nsudo service mysql stop\\nsudo service mysql start\\nsudo service mysql status\\n\")), mdx(\"br\", null), mdx(\"em\", null, \"If you are having permission issues: \", mdx(\"a\", {\n    href: \"#issues\"\n  }, \"Check this out\")), mdx(\"p\", null, \"There are additional configs to add users, but thats a little\\ntoo advanced for what were doing here.\"), mdx(\"h4\", null, \"Using MySQL\"), mdx(\"p\", null, \"Creating your first database:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mysql\\n -> show databases;\\n# Lists databases\\n -> create database todo;\\n# Query OK, 1 row affected\\n -> show databases; # should show mytodo\\n -> use mytodo; # This tells mysql what database to switch into and use\\n -> show tables; # should be empty\\n -> CREATE TABLE todos (description TEXT, completed BOOLEAN);\\n# Query OK, 0 rows affected\\n -> show tables; # Should show your new todos table\\n -> describe todos; # Shows your fields and types\\n -> drop tables; # Removes your todos tables\\n -> CREATE TABLE todos (id INTEGER PRIMARY KEY AUTO_INCREMENT, description TEXT NOT NULL, completed BOOLEAN NOT NULL);\\n -> show tables;\\n -> describe todos;\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"I\\u2019m not going to get too in depth with the above commands, but I will touch on the\\nfollowing query.\"), mdx(\"p\", null, \"Here\\u2019s the command:\", mdx(\"br\", null), mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATE TABLE todos (id integer PRIMARY KEY AUTO_INCREMENT, description text NOT NULL, completed boolean NOT NULL);\"), mdx(\"br\", null)), mdx(\"p\", null, \"Here\\u2019s what it\\u2019s doing:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATE TABLE todos();\"), \" Create the table called \\u2018todos\\u2019\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id integer PRIMARY KEY AUTO_INCREMENT\"), \": The first field will be the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" field,\\nthis field will accept an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INTEGER\"), \". This field will also be the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PRIMARY KEY\"), \".\\nThis means that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" will be the unique identifier for whatever data is stored.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AUTO_INCREMENT\"), \" means the user does not have to supply the id integer. Instead, the\\ndatabase will automatically set the id starting from 1.\", mdx(\"br\", null)), mdx(\"h4\", null, \"Manipulating a tables data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mysql\\n-> INSERT INTO todos (description, completed) VALUES('Go to the store', false);\\n# Will auto-add the id, will add the description 'Go to store', and the boolean false\\n\\n-> SELECT * FROM todos;\\n# Will show all columns in the todos table\\n\")), mdx(\"h4\", null, \"Summarizing\"), mdx(\"h4\", null, \"Installing a MySQL GUI - \", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://dev.mysql.com/doc/workbench/en/\"\n  }), \"MySQL-Workbench\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mysql\"), \" Start mysql\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> create database \\\\<database\\\\>;\"), \" Create the database with \\\\<database\", \">\", \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> use database <\\\\database\\\\>;\"), \" Set the current database to query to \\\\<database\", \">\", \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> CREATE TABLE \\\\<table\\\\>(<\\\\fields\\\\>);\"), \" Create a table within the database with a name of \\\\<table\", \">\", \"\\nand has the following \\\\<fields\", \">\", \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> show tables;\"), \" List the tables in your database.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> describe <\\\\table\\\\>;\"), \" Shows the fields of the given \\\\<table\", \">\", \".\"), mdx(\"p\", null, \"Simple manipulation:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> INSERT INTO <\\\\table\\\\>(<\\\\field1\\\\>, \\\\<field2\\\\>) VALUES(<\\\\value1\\\\>, <\\\\value2\\\\>);\"), \"\\nInsert the following\\nvalues into the specified \\\\<field\", \">\", \" for the given table name. Order is important.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> SELECT * FROM \\\\<table\\\\>;\")), mdx(\"p\", null, \"Allows you to view all columns and their data from the given\\n\\\\<table\", \">\", \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> SELECT * FROM \\\\<table\\\\>WHERE id = 1;\")), mdx(\"p\", null, \"Select all columns from \\\\<table\", \">\", \" but only where the id is equal to 1.\"), mdx(\"p\", null, \"Now using the command line for everything is not very fun. You can simply google:\"), mdx(\"p\", null, \"\\u2018mysql database GUI tools\\u2019\"), mdx(\"p\", null, \"I decided to use the officially supported mysql-workbench.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo apt install mysql-workbench\\nmysql-workbench\\n\")), mdx(\"p\", null, \"Easy, simple, I like it.\"), mdx(\"h3\", {\n    id: \"issues\"\n  }, \"Issues\"), mdx(\"h4\", null, \"Running mysql without sudo\"), mdx(\"strong\", null, \"Note: \"), \" I ran into the issue of having to run mysql without sudo. I found this guide: [DigitalOcean Guide to MySQL](https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04).\", mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo mysql -> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password\\nBY 'password'; -> FLUSH PRIVILEGES;\\n\")), mdx(\"p\", null, \"Yes, you can create a new user and then provide privileges that way. Again, beyond\\nthe scope of this, and this wont be used in production either.\"), mdx(\"h4\", null, \"Running mysql-workbench without sudo\"), mdx(\"p\", null, \"I also had an issue running mysql-workbench without sudo. I solved this by\\nchowning ~/.mysql\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo chown $USER:$USER ~/.mysql\\nmysql-workbench\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"I\\u2019ll let you figure out other configurations with mysql-workbench. Play around with\\nit. Don\\u2019t rush, find other commands. Have fun! Ill see you in the next part about\\nclasses.\"), mdx(\"h2\", null, \"Links\"), mdx(\"strong\", null, mdx(\"a\", {\n    href: \"https://github.com/ParamagicDev/php-for-beginners\"\n  }, \"My repo\"), mdx(\"br\", null)), \"[Laracasts main site](https://laracasts.com)\", mdx(\"br\", null), \"[PHP for beginners](https://laracasts.com/series/php-for-beginners)\", mdx(\"br\", null), \"[MySQL downloads page](https://www.mysql.com/downloads/)\", mdx(\"br\", null), \"[DigitalOcean Guide to MySQL](https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04).\", mdx(\"br\", null), \"[MySQL-Workbench](https://dev.mysql.com/doc/workbench/en/)\", mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"251e7d1b-57d0-58a9-baf0-7598f303f3d1","fields":{"slug":"/javascript/introduction/"},"frontmatter":{"title":"JS - Introduction"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS - Introduction\",\n  \"date\": \"2019-09-29T17:31:23\",\n  \"description\": \"A basic introduction as to what this series will be about\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Purpose\"), mdx(\"p\", null, \"This is a collection of various things I have found while doing various projects\\nusing Javascript. This is not meant to be read in any order, rather its just random\\ntidbits and items I have come across while using Javascript.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}