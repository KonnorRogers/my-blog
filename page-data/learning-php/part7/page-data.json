{"componentChunkName":"component---src-templates-blog-post-js","path":"/learning-php/part7/","webpackCompilationHash":"75c6e1678864bf17e7bb","result":{"data":{"site":{"siteMetadata":{"title":"Konnor's Blog","author":"Konnor Rogers"}},"markdownRemark":{"id":"0783340a-1d9f-501f-b37d-1bbf75a9209f","excerpt":"Part 7 Laracasts main site\nLaracasts - PHP for beginners Chapters covered Chapter 12 - Classes 101 Chapter 12 - Classes 101 What is a class? Well, according to…","html":"<h1>Part 7</h1>\n<p><a href=\"https://laracasts.com\">Laracasts main site</a><br>\n<a href=\"https://laracasts.com/series/php-for-beginners\">Laracasts - PHP for beginners</a></p>\n<h2>Chapters covered</h2>\n<p><a href=\"https://laracasts.com/series/php-for-beginners/episodes/12\">Chapter 12 - Classes 101</a></p>\n<h3>Chapter 12 - Classes 101</h3>\n<p>What is a class? Well, according to Wikipedia, this is what a programming class is:<br>\nIn object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods)</p>\n<p>What does that mean? A class is very simply a way of packaging variables and functions\nwithin a template to be reused or extended.</p>\n<p>Yea but what does that mean? Its kind of hard to wrap your head around, but lets\ndive into what classes do in PHP and how to make them. This will better help you\nunderstand what’s going on.</p>\n<h4>Syntax</h4>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wow thats it? Yes, technically this is all a class needs, however this isnt very\ndynamic, so lets extend it a little.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token variable\">$description</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$description</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token variable\">$description</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a very basic example and intro to classes.\nLets break it down now.</p>\n<p><code class=\"language-text\">class Task</code> Define the class name<br>\n<code class=\"language-text\">protected $description;</code> initialize the variable $description<br>\n<code class=\"language-text\">public function __construct($description)</code> This is a special ‘constructor’ function.<br>\nThis means that when a class is ‘instantiated’, to run the following code. Or in other\nwords when you create a ‘new’ class, do the run the following code.<br>\n<code class=\"language-text\">$this-&gt;$description;</code> ahhhh yes. The magical ‘$this’. In some languages it may just\nbe <code class=\"language-text\">this</code> or <code class=\"language-text\">self</code>. This is a tough term to wrap your head around so let’s keep it simple.<br></p>\n<p>In this case <code class=\"language-text\">$this</code> means, for THIS instance of Task, set the value provided in the constructor to\nthis instance’s $description variable<br></p>\n<p>So what the heck does that above statment even mean? Well let’s continue on. Examples\nexplain this better than I can. Lets instantiate a the class Task now.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'I am a description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$task</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will very simply provide a nice human readable version of task displayed in\nthe web browser of your choice.</p>\n<p>Okay, this is great and all, but we can’t do anything with this right now.</p>\n<p>You could try</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'I am a description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$task</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token variable\">$description</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But you’ll get an access error. So let’s talk about getters and setters.\nA getter simply ‘gets’ a value from a class and a setter ‘sets’ a value in a class.\nGetters and setters are part of a OOP term called ‘encapsulation’. Don’t worry about\nwhat that means for now, just know that it may come up in the future.\nNot very useful, but lets see how it works.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token variable\">$description</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$description</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token variable\">$description</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">description</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$description</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">description</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$description</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Go to the store\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\nThe above defines the class Task. Now lets see how we would access values.\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// ...above code omitted for brevity</span>\n\n<span class=\"token comment\">// Accessing the value of $task->description</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$task</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Changes the value of $task->description to the new description</span>\n<span class=\"token variable\">$task</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Go to grandma's house\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$task</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Will now var_dump \"Go to grandma'</span>s house<span class=\"token double-quoted-string string\">\" instead of \"</span>go to store\"</code></pre></div>\n<br>\n<p>Now what if we want to make multiple tasks and store them in an array?\nSimple:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// ...above code omitted for brevity</span>\n<span class=\"token variable\">$tasks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Go to store\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Go to grandma's house\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Go home\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tasks</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Links</h2>\n<p><strong><a href=\"https://github.com/ParamagicDev/php-for-beginners\">Follow along with my repo</a><br></strong>\n<a href=\"https://laracasts.com\">Laracasts main site</a><br>\n<a href=\"https://laracasts.com/series/php-for-beginners\">PHP for beginners</a><br></p>","frontmatter":{"title":"PHP for beginners - Part 7 - Classes?...Like school?","date":"August 26, 2019","description":"Lets look into classes in PHP. Classes are the building blocks of Object Oriented Programming"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/learning-php/part7/","previous":{"fields":{"slug":"/learning-php/part6/"},"frontmatter":{"title":"Learning PHP - Part 6 - MySQL? Or Your SQL?"}},"next":{"fields":{"slug":"/get-jiggy-with-js/introduction/"},"frontmatter":{"title":"Gettin' Jiggy with Javascript - Introduction"}}}}}